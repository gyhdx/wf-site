import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-DBc2jY3V.js";const p="/wf-site/assets/202303082359942-xb5wW5ZL.png",o="/wf-site/assets/202303090013470-B3xbLNCG.png",i="/wf-site/assets/202303092314976-i-0e-LD1.png",c="/wf-site/assets/202303092324384-BDeNrjds.png",l={};function r(u,n){return s(),a("div",null,n[0]||(n[0]=[e('<h1 id="_15-qpainter和graphics-view绘图3" tabindex="-1"><a class="header-anchor" href="#_15-qpainter和graphics-view绘图3" aria-hidden="true">#</a> 15.QPainter和Graphics/View绘图3</h1><h3 id="代理控件和图形控件" tabindex="-1"><a class="header-anchor" href="#代理控件和图形控件" aria-hidden="true">#</a> 代理控件和图形控件</h3><p>场景中除了可以直接添加图项外,也可以添加常用的控件,甚至是对话框.场景中的控仙也可以进行布局。</p><h4 id="代理控件qgraphicsproxywidget" tabindex="-1"><a class="header-anchor" href="#代理控件qgraphicsproxywidget" aria-hidden="true">#</a> 代理控件QGraphicsProxyWidget</h4><p>前面介绍过,通过场景的 addWidget(QWidget,wFlags:Qt.WindowFlags)方法可以把一个控件或窗口加人到场景中,并返回代理类控件 QGraphicsProxyWidget。</p><p>代理类控件可以将QWidget类控件加入到场景中,可以先创建QGraphicsProxyWidget 控件,然后用场景的addItem(QGraphicsProxyWidget)方法把代理控件加人到场景中。</p><p>代理控件QGraphicsProxyWidget 继承自图形控件 QGraphicsWidget,它们之间的继承关系如图所示。</p><figure><img src="'+p+`" alt="image-20230308235906098" tabindex="0" loading="lazy"><figcaption>image-20230308235906098</figcaption></figure><p>用QGraphicsProxyWidget 类创建代理实例对象的方法如下,其中parent 是QGraphicsItem的实例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsProxyWidget

QGraphicsProxyWidget<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> wFlags<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>WindowType <span class="token operator">=</span> Default<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WindowFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsProxyWidget 中添加控件的方法是 setWidget(QWidget),QWidget 不能有WA_PaintOnScreen 属性,也不能是包含其他程序的控件,例如QOpenGLWidget 和QAxWidget控件。</p><p>用widget()方法可以获取代理控件中的控件。代理控件和其内部包合的控件在状态方面保持同步,例如可见性、激活状态、字体、调色板、光标形状、窗口标题、几何尺寸、布局方向等</p><p>下面是一个代理控件的实例,程序运行界面如图所示。单击&quot;选择图片文件&quot;按钮弹出打开文件对话框,选择图片文件后显示图片,图片所在的窗口用代理控件定义成图项程序中对图片所在的图项进行了错切变换。</p><figure><img src="`+o+`" alt="image-20230309001345787" tabindex="0" loading="lazy"><figcaption>image-20230309001345787</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/9 0:00</span>
<span class="token comment"># File_name: 02-代理控件QGraphicsProxyWidget实例.py.py</span>


<span class="token keyword">import</span> sys<span class="token punctuation">,</span> os
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QGraphicsProxyWidget<span class="token punctuation">,</span> QGraphicsScene<span class="token punctuation">,</span> QGraphicsView<span class="token punctuation">,</span> QFrame<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QFileDialog
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPainter<span class="token punctuation">,</span> QTransform<span class="token punctuation">,</span> QPixmap
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">.</span>QRect


<span class="token keyword">class</span> <span class="token class-name">myFrame</span><span class="token punctuation">(</span>QFrame<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 创建QFrame的子类</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fileName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 重写painterEvent,完成绘图</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pix <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span>
            painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
            rect <span class="token operator">=</span> QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>rect<span class="token punctuation">,</span> pix<span class="token punctuation">)</span>

        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>paintEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">myPixmapWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>frame <span class="token operator">=</span> myFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 自定义QFrame的实例</span>
        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;选择图片文件&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 按钮实例</span>
        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_clicked<span class="token punctuation">)</span>  <span class="token comment"># 按钮信号与槽函数的连接</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 布局</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>

    <span class="token comment"># 按钮的槽函数</span>
    <span class="token keyword">def</span> <span class="token function">button_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fileName<span class="token punctuation">,</span> <span class="token builtin">filter</span> <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span> caption<span class="token operator">=</span><span class="token string">&quot;打开图片&quot;</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token operator">=</span><span class="token string">&quot;../../Resources&quot;</span><span class="token punctuation">,</span> <span class="token builtin">filter</span><span class="token operator">=</span><span class="token string">&quot;图片(*.png *.bmp *.jpg *.jpeg)&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>fileName <span class="token operator">=</span> fileName
        self<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        pix <span class="token operator">=</span> myPixmapWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 绘图窗口</span>
        view <span class="token operator">=</span> QGraphicsView<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 视图控件</span>
        scene <span class="token operator">=</span> QGraphicsScene<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 场景</span>
        view<span class="token punctuation">.</span>setScene<span class="token punctuation">(</span>scene<span class="token punctuation">)</span>  <span class="token comment"># 在视图中设置场景</span>
        proxy <span class="token operator">=</span> QGraphicsProxyWidget<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>Window<span class="token punctuation">)</span>  <span class="token comment"># 创建代理控件</span>
        proxy<span class="token punctuation">.</span>setWidget<span class="token punctuation">(</span>pix<span class="token punctuation">)</span>  <span class="token comment"># 代理控件设置控件</span>
        proxy<span class="token punctuation">.</span>setTransform<span class="token punctuation">(</span>QTransform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 错切变换</span>
        scene<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>  <span class="token comment"># 在场景中添加图项</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 布局</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>view<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图形控件qgraphicswidget" tabindex="-1"><a class="header-anchor" href="#图形控件qgraphicswidget" aria-hidden="true">#</a> 图形控件QGraphicsWidget</h4><p>图形控件 QGraphicsWidget 的继承关系如图所示,</p><figure><img src="`+i+`" alt="image-20230309231433109" tabindex="0" loading="lazy"><figcaption>image-20230309231433109</figcaption></figure><p>它继承自QGraphicsObject 和QGraphicsLayoutItem,间接继承自 QObject和 QGraphicsItem,因此它可以直接添加到场景中。</p><p>QGraphicsWidget 是图形控件的基类,继承QGraphicsWidget 的类有</p><ul><li>QGraphicsProxyWidget</li><li>QtCharts.QChart</li><li>QtCharts.QLegend</li><li>QtCharts.QPolarChart</li></ul><p>QWidget 继承自 QObject 和QPaintDevice。QGraphicsWidget和QWidget 有很多相同点但也有些不同点。</p><p>在 QGraphicsWidget 中可以放置其他代理控件和布局,因此QGraphicsWidget 可以作为场景中的容器使用。用QGraphicsWidget类创建图形控件的方法如下,其中 parent是QGraphicsItem 的实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsWidget

QGraphicsWidget<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> 
                wFlags<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>WindowType <span class="token operator">=</span> Default<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WindowFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图形控件QGraphicsWidget 的常用方法如表所示,其中:</p><ul><li>用setAttribute(attribute:Qt.WidgetAttribute,on: bool=True)方法设置窗口的属性,参数 attribute可以取: <ul><li>Qt.WA_SetLayoutDirection</li><li>Qt.WA_RightToLeft、</li><li>Qt.WA_SetStyle、</li><li>Qt.WAResized</li><li>Qt.WA_SetPalette</li><li>Qt.WA_SetFont</li><li>Qt.WAWindowPropagation。</li></ul></li><li>图形控件QGraphicsWidget 中通常需要用设置布局方法 setLayout(layout;QGraphicsLayout),在布局中添加图项或代理控件。</li></ul><table><thead><tr><th>QGraphicsWidget 的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setAttribute(attribute: Qt.WidgetAttribute,on: bool= True)</td><td>设置属性</td></tr><tr><td>testAttribute(attribute: Qt.WidgetAttribute)</td><td>测试是否设置了某种属性</td></tr><tr><td>itemChange(change: QGraphicsltem.GraphicsItemChange, value: Any)</td><td>重写该函数,作为信号使用。关于该函数的使 用详见6.2.5节的内容</td></tr><tr><td>paint(painter: QPainter,option: QStyleOptionGraphicsItem, widget:QWidget=None)</td><td>重写该函数,绘制图形</td></tr><tr><td>boundingRect()</td><td>重写该函数,返回边界矩形QRectF</td></tr><tr><td>shape()</td><td>重写该函数,返回路径QPainterPath</td></tr><tr><td>setLayout(layout:QGraphicsLayout)</td><td>设置布局</td></tr><tr><td>layout()</td><td>获取布局</td></tr><tr><td>setLayoutDirection(direction: Qt.LayoutDirection)</td><td>设置布局方向</td></tr><tr><td>setAutoFillBackground(enabled:bool)</td><td>设置是否自动填充背景</td></tr><tr><td>setContentsMargins(margins:Union[QMarginsF, QMargins])</td><td>设置窗口内的控件到边框的最小距离</td></tr><tr><td>setContentsMargins(left: float, top: float, right: float, bottom: float)</td><td>设置窗口内的控件到边框的最小距离</td></tr><tr><td>sctFocusPolicy(policy:Qt.FocusPolicy)</td><td>设置获取焦点的策略</td></tr><tr><td>sctFont(font: Union[QFont,str,Sequence[str]])</td><td>设置字体</td></tr><tr><td>serGeometry(rect:Union[QRectF,QRect])</td><td>设置工作区的位置和尺寸</td></tr><tr><td>setGeometry(x: float,y: float,w: float,h: float)</td><td>设置工作区的位置和尺寸</td></tr><tr><td>setPalette(palette:Union[QPalette, Qt.GlobalColor, QColor])</td><td>设置调色板</td></tr><tr><td>setStyle(style: QStyle)</td><td>设置风格</td></tr><tr><td>[static]setTabOrder(first: QGraphicsWidget, second: QGraphicsWidget)</td><td>.设置按Tab键获取焦点的顺序</td></tr><tr><td>setWindowFlags(wFlags: Qt.WindowFlags)</td><td>设置窗口标识</td></tr><tr><td>setWindowFrameMargins s(Union[QMarginsF, QMargins])</td><td>设置边框距 比图,超强实空。</td></tr><tr><td>setWindowFrameMargins(float, float, float, float)</td><td>设置边框距 比图,超强实空。</td></tr><tr><td>setWindowTitle(title:str)</td><td>设置窗口标题</td></tr><tr><td>rect()</td><td>获取图形控件的窗口范围 QRectF</td></tr><tr><td>resize(QSizeF)</td><td>调整窗口尺寸·</td></tr><tr><td>resize(float,float)</td><td>调整窗口尺寸·</td></tr><tr><td>size()</td><td>获取尺寸 QSizeF</td></tr><tr><td>focusWidget()</td><td>获取焦点控件 QGraphicsWidget</td></tr><tr><td>isActiveWindow()</td><td>获取是否是活跃控件</td></tr><tr><td>updateGeometry()</td><td>刷新图形控件</td></tr><tr><td>addAction(QAction)、 addActions(-Sequence[QAction])</td><td>图形控件中添加动作</td></tr><tr><td>insertAction(before:QAction,action:QAction)</td><td>图形控件中插入动作,图形控件的动作可以作 为右键快捷菜单使用</td></tr><tr><td>insertActions(before: QAction, actions: Sequence[QAction])</td><td>图形控件中插入动作,图形控件的动作可以作 为右键快捷菜单使用</td></tr><tr><td>actions()</td><td>获取动作列表List[QAction]</td></tr><tr><td>removeAction(action:QAction)</td><td>移除动作</td></tr><tr><td>[slot]close()</td><td>关闭窗口,成功则返回True</td></tr></tbody></table><p>QGraphicsWidget 的信号有</p><ul><li>geometryChanged()和 layoutChanged(),当几何尺寸和布局发生改变时发送信号</li><li>另外QGraphicsWidget 从QGraphicsObject 继承的信号有 <ul><li>opacityChanged()</li><li>parentChanged()</li><li>rotationChanged()</li><li>scaleChanged()</li><li>visibleChanged()</li><li>xChanged()</li><li>yChanged()</li><li>zChanged()</li></ul></li></ul><h4 id="图形控件的布局" tabindex="-1"><a class="header-anchor" href="#图形控件的布局" aria-hidden="true">#</a> 图形控件的布局</h4><p>图形控件可以添加布局,图形控件的布局有 3种分别为QGrphicsLinearLayout、QGraphicsGridLayout 和 QGraphicsAnchorLayout;它们都继承自QGraphicsLayoutItem。</p><h5 id="线性布局ographicslinearlayout" tabindex="-1"><a class="header-anchor" href="#线性布局ographicslinearlayout" aria-hidden="true">#</a> 线性布局OGraphicsLinearLayout</h5><p>线性布局 QGraphicsLinearLayout 类似于 QHLayoutBox或 QVLayoutBox,布局内的图形控件线性分布。</p><p>用QGraphicsLinearLayout创建线性布局的方法如下,其中parent是QGraphicsLayoutItem 的实例;Qt.Orientation 确定布局的方法可以取 QHorizontal或Qt.Vertical,默认是水平方向。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsLinearLayout

QGraphicsLinearLayout<span class="token punctuation">(</span>orientation<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Orientation<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsLayoutItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsLinearLayout<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsLayoutItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsLinearLayout 的主要方法如表所示。</p><ul><li>用图形控件的setLayout(QGraphicsLayout)方法可以添加二个布局,</li><li>用addItem(QGraphicsLayoutItem)方法可以添加图形控件,</li><li>用insertItem(index,QGraphicsLayoutItem)方法在指定索引处插人图形控件,</li><li>用addStretch(stretch=1)方法可以添加空间拉伸系数,</li><li>用insertStretch(index,stretch=1)方法插人空间拉伸系数</li><li>用setStretchFactor(QGraphicsLayoutItem,int)方法设置图项或布局的拉伸系数,</li><li>用setOrientation(QtOrientation)方法设置布局的方向。</li></ul><table><thead><tr><th>QGraphicsLinearLayout的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>addItem(item: QGraphicsLayoutItem)</td><td>添加图形控件、代理控件或布局</td></tr><tr><td>insertItem(index:int, item:QGraphicsLayoutItem)</td><td>根据索引插入图形控件或布局</td></tr><tr><td>addStretch(stretch: int=1)</td><td>在末尾添加拉伸系数</td></tr><tr><td>insertStretch(index: int,stretch:int=1)</td><td>根据索引插入拉伸系数</td></tr><tr><td>count()</td><td>获取弹性控件和布局的个数</td></tr><tr><td>setAlignment(QGraphicsLayoutItem,Qt.Alignment)</td><td>设置图形控件的对齐方式</td></tr><tr><td>setGeometry(rect:Union[QRectF,QRect])</td><td>设置布局的位置和尺寸</td></tr><tr><td>setItemSpacing(index:int,spacing:float)</td><td>根据索引设置间距</td></tr><tr><td>setOrientation(Qt.Orientation)</td><td>设置布局方向</td></tr><tr><td>setSpacing(spacing:float)</td><td>设置图形控件之间的间距</td></tr><tr><td>setStretchFactor(item: QGraphicsLayoutItem,stretch: int)</td><td>设置图形控件的拉伸系数</td></tr><tr><td>stretchFactor(item:QGraphicsLayoutItem)</td><td>获取控件的拉伸系数</td></tr><tr><td>itemAt(index:int)</td><td>根据索引获取图形控件或布局</td></tr><tr><td>removeAt(index:int)</td><td>根据索引移除图形控件或布局</td></tr><tr><td>removeltem(item:QGraphicsLayoutltem)</td><td>移除指定的图形控件或布局</td></tr></tbody></table><p>下面的程序在 QGraphicsWidget 中添加线性布局在布局中添加了两个 QLabel和两个 QPushButton。</p><figure><img src="`+c+`" alt="image-20230309232358243" tabindex="0" loading="lazy"><figcaption>image-20230309232358243</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/9 23:10</span>
<span class="token comment"># File_name: 02-线性布局QGraphicsLinearLayout.py</span>


<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QGraphicsProxyWidget<span class="token punctuation">,</span> QGraphicsScene<span class="token punctuation">,</span> QGraphicsView<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QGraphicsWidget<span class="token punctuation">,</span> QGraphicsLinearLayout<span class="token punctuation">,</span> QLabel
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>

        view <span class="token operator">=</span> QGraphicsView<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 视图控件</span>
        scene <span class="token operator">=</span> QGraphicsScene<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 场景</span>
        view<span class="token punctuation">.</span>setScene<span class="token punctuation">(</span>scene<span class="token punctuation">)</span>  <span class="token comment"># 视图中设置场景</span>

        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 布局</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>view<span class="token punctuation">)</span>

        widget <span class="token operator">=</span> QGraphicsWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        widget<span class="token punctuation">.</span>setFlags<span class="token punctuation">(</span>QGraphicsWidget<span class="token punctuation">.</span>ItemIsMovable <span class="token operator">|</span> QGraphicsWidget<span class="token punctuation">.</span>ItemIsSelectable<span class="token punctuation">)</span>
        scene<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>widget<span class="token punctuation">)</span>
        linear <span class="token operator">=</span> QGraphicsLinearLayout<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>Vertical<span class="token punctuation">,</span> widget<span class="token punctuation">)</span>  <span class="token comment"># 线性竖直布局</span>
        label1 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;MyLabel 1&quot;</span><span class="token punctuation">)</span>
        label2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;MyIabel2&quot;</span><span class="token punctuation">)</span>
        button1 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;MyPushbutton 1&quot;</span><span class="token punctuation">)</span>
        button2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;MyPushbutton 2&quot;</span><span class="token punctuation">)</span>

        p1 <span class="token operator">=</span> QGraphicsProxyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p1<span class="token punctuation">.</span>setWidget<span class="token punctuation">(</span>label1<span class="token punctuation">)</span>

        p2 <span class="token operator">=</span> QGraphicsProxyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p2<span class="token punctuation">.</span>setWidget<span class="token punctuation">(</span>label2<span class="token punctuation">)</span>

        p3 <span class="token operator">=</span> QGraphicsProxyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p3<span class="token punctuation">.</span>setWidget<span class="token punctuation">(</span>button1<span class="token punctuation">)</span>

        p4 <span class="token operator">=</span> QGraphicsProxyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        p4<span class="token punctuation">.</span>setWidget<span class="token punctuation">(</span>button2<span class="token punctuation">)</span>

        linear<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
        linear<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>
        linear<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>p3<span class="token punctuation">)</span>
        linear<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>p4<span class="token punctuation">)</span>

        linear<span class="token punctuation">.</span>setSpacing<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        linear<span class="token punctuation">.</span>setStretchFactor<span class="token punctuation">(</span>p3<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        linear<span class="token punctuation">.</span>setStretchFactor<span class="token punctuation">(</span>p4<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="格栅布局-qgraphicsgridlayout" tabindex="-1"><a class="header-anchor" href="#格栅布局-qgraphicsgridlayout" aria-hidden="true">#</a> 格栅布局 QGraphicsGridLayout</h5><p>格栅布局QGraphicsGridLayout与 QGridLayout 类似,由多行和多列构成,一个图形控件可以占用一个节点,也可以占用多行和多列。</p><p>用QGraphicsGridLayout创建格棚市局的方法如下所示,其中parent是 QGraphicsLayoutItem 的实例或图形控件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsGridLayout

QGraphicsGridLayout<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsLayoutItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsGridLayout 的常用方法如表示:</p><p>可以添加和移除图形控件及布局,可以设置列宽度、行高度、列之间的间隙和行之间的间隙,及行或列的拉伸系数。</p><table><thead><tr><th>QGraphicsGridLayout的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>addltem(item: QGraphicsLayoutltem,row: int, column: int,alignment: Qt.Alignment =Default(Qt.Alignment))</td><td>在指定的位置添加图形控件</td></tr><tr><td>addItem(item: QGraphicsLayoutltem,row: int, column: int, rowSpan: int, columnSpan: int, alignment: Qt.Alignment)</td><td>添加图形控件,可占据多行多列</td></tr><tr><td>rowCount()、columnCount()</td><td>获取行数、获取列数</td></tr><tr><td>count()</td><td>获取图形控件和布局的个数</td></tr><tr><td>itemAt(row: int,column:int)</td><td>获取指定行和列处的图形控件或布局</td></tr><tr><td>itemAt(index:int)</td><td>根据索引获取图形控件或布局</td></tr><tr><td>removeAt(index: int)</td><td>根据索引移除图形控件或布局</td></tr><tr><td>removeItem(QGraphicsLayoutItem)</td><td>移除指定的图形控件或布局</td></tr><tr><td>setGeometry(rect:Union[QRectF,QRect])</td><td>设置控件所在的区域</td></tr><tr><td>setAlignment(QGraphicsLayoutItem,Qt.Alignment)</td><td>设置控件的对齐方式</td></tr><tr><td>setRowAlignment(row: int, alignment: Qt.Alignment)</td><td>设置行对齐方式</td></tr><tr><td>setColumnAlignment(column:int, alignment: Qt.Alignment)</td><td>设置列对齐方式</td></tr><tr><td>setRowFixedHeight(row: int,height:float)</td><td>设置行的固定高度</td></tr><tr><td>setRowMaximumHeight(row:int,height: float)</td><td>设置行的最大高度 32LdG5</td></tr><tr><td>setRowMinimumHeight(row:int,height:float)</td><td>设置行的最小高度</td></tr><tr><td>setRowPreferredHeight(row:int,height: float)</td><td>设置指定行的高度</td></tr><tr><td>setRowSpacing(row: int,spacing:float)</td><td>设置指定行的间距</td></tr><tr><td>setRowStretchFactor(row:int,stretch: int)</td><td>设置指定行的拉伸系数</td></tr><tr><td>setColumnFixedWidth(column:int,width:float)</td><td>设置列的固定宽度</td></tr><tr><td>setColumnMaximumWidth(column:int,width:float)</td><td>设置列的最大宽度</td></tr><tr><td>setColumnMinimumWidth(column:int,width:float)</td><td>设置列的最小宽度</td></tr><tr><td>setColumnPreferredWidth(column:int,width:float)</td><td>设置指定列的宽度:</td></tr><tr><td>setColumnSpacing(column:int, spacing:float)</td><td>设置指定列的间隙</td></tr><tr><td>setColumnStretchFactor(column:int,stretch:int)</td><td>设置指定列的拉伸系数</td></tr><tr><td>setSpacing(spacing: float)</td><td>设置行、列之间的间隙</td></tr><tr><td>setHorizontalSpacing(spacing: float)</td><td>设置水平间隙</td></tr><tr><td>setVerticalSpacing(spacing:float)</td><td>设置竖直间隙</td></tr></tbody></table><h5 id="锚点布局ographicsanchorlayout" tabindex="-1"><a class="header-anchor" href="#锚点布局ographicsanchorlayout" aria-hidden="true">#</a> 锚点布局OGraphicsAnchorLayout</h5><p>锚点布局可以设置两个图形控件之间的相对位置,可以是两个边对齐,也可以是两个点对齐。</p><p>用QGraphicsAnchorLayout 创建铺点布局的方法如下,其中参数 parent 是QGraphicsLayoutItem 实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsAnchorLayout

QGraphicsAnchorLayout<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsLayoutItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsAnchorLayout 的方法中</p><ul><li>用addAnchor(firstItem;QGraphicsLayoutItem;firstEdge: Qt.AnchorPoint, secondItem;QGraphicsLayoutItem, secondEdge: Qt.AnchorPoint)方法将第 1个图形控件的某个边与第 2个图形控件的某个边对齐,其中Q.AnchorPoint 可以取: <ul><li>Qt.AnchorLeft</li><li>Qt.AnchorHorizontalCenter</li><li>Qt.AnchorRight</li><li>Qt.AnchorTop</li><li>Qt.AnchorVerticalCenter</li><li>Qt.AnchorBottom</li></ul></li><li>用addCornerAnchors(firstItem:QGraphicsLayoutItem, first(orner: Qt.(Corner, secondltem; QGraphicsLayoutItem , secondCorner :Qt.Corner)方法可以让第1个控件的某个角点与第2个控件的某个角点对齐,其中QCorner可以取: <ul><li>Qt.TopLeftCorner</li><li>Qt.TopRightCorner</li><li>Qt.BottomLeftCorner</li><li>Qt.BottomRightCorner;</li></ul></li><li>用addAnchors(firstItem; QGraphicslayoutItem, secondltem: QGraphicsLayoutItemorientations:Qt Orientations=Qt.Horizontal QtVertical)方法可以使两个控件在某个方向上尺寸相等。</li><li>另外用setHorizontalSpacing(spacing; float)setVerticalSpacing(spacing:[loat)或 setSpacing(spacing:[loat)方法可以设置控件之间在水平和竖直方向的间距,</li><li>用itemAt(index:int)方法可以取图形控件,用removeAt(index:int)方法可以移除图形控件,用count()方法可以获取图形控件的数量</li></ul><h4 id="图形效果" tabindex="-1"><a class="header-anchor" href="#图形效果" aria-hidden="true">#</a> 图形效果</h4><p>在图项和视图控件的视口之间可以添加渲染通道,实现对图项显示效果的特殊设置。</p><p>图形效果 QGraphicsEffect 类是图形效果的基类,图形效果类有:</p><ul><li>QGraphicsBlurEffect(模糊效果)</li><li>QGraphicsColorizeEffect(变色效果)</li><li>QGraphicsDropShadowEffect(阴影效果)</li><li>QGraphicsOpacityEffect(透明效果)</li></ul><p>用图项的 setGraphicsEffect(QGraphicsEffect)方法设置图项的图形效果。</p><p>创建这 4 种效果的方法如下所示,其中 parent 是指继承自 QObject 的实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsBlurEffect<span class="token punctuation">,</span> QGraphicsColorizeEffect<span class="token punctuation">,</span> QGraphicsDropShadowEffect<span class="token punctuation">,</span> QGraphicsOpacityEffect

QGraphicsBlurEffect<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsColorizeEffect<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsDropShadowEffect<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsOpacityEffect<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="图形效果的常用方法" tabindex="-1"><a class="header-anchor" href="#图形效果的常用方法" aria-hidden="true">#</a> 图形效果的常用方法</h5><p>QGraphicsBlurEffect、 QGraphicsColorizeEffect、QGraphicsDropShadowEffect 和QGraphicsOpacityEffect 的常用方法如表所示</p><ul><li><strong>QGraphicsBlurEffect</strong></li></ul><table><thead><tr><th>图形效果的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>setEnabled(enable: bool)</td><td>设置激活图形效果</td></tr><tr><td>[slot]setBlurHints(hints: QGraphicsBlurEffect.BlurHints)</td><td>设置模糊提示</td></tr><tr><td>[slot]setBlurRadius(blurRadius:float)</td><td>设置模糊半径</td></tr><tr><td>blurHints()</td><td>获取模糊提示</td></tr><tr><td>blurRadius()</td><td>获取模糊半径</td></tr></tbody></table><ul><li><strong>QGraphicsColorizeEffect</strong></li></ul><table><thead><tr><th>图形效果的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>[slot]setColor(Union[QColor,Qt.GlobalColor, str])</td><td>设置着色用的颜色</td></tr><tr><td>[slot]setStrength(strength:float)</td><td>设置着色强度</td></tr><tr><td>color()</td><td>获取着色用的颜色</td></tr><tr><td>strength()</td><td>获取着色强度</td></tr></tbody></table><ul><li><strong>QGraphicsDropShadowEffect</strong></li></ul><table><thead><tr><th>图形效果的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>[slot]setBlurRadius(blurRadius:float)</td><td>设置模糊半径</td></tr><tr><td>[slot]setColor(Union[QColor, Qt.GlobalColor, str])</td><td>设置引用颜色</td></tr><tr><td>[slot]setOffset(d: float)</td><td>设置阴影的x和y偏 移量</td></tr><tr><td>[slot]setOffset(dx: float,dy:float)</td><td>设置阴影的x和y偏 移量</td></tr><tr><td>[slot]setOffset(ofs: Union[QPointF,QPoint])</td><td>设置阴影的位移量</td></tr><tr><td>[slot]setXOffset(dx: float)</td><td>设置阴影的x偏移量</td></tr><tr><td>[slot]setYOffset(dy:float)</td><td>设置阴影的y偏移量</td></tr><tr><td>blurRadius()</td><td>获取模糊半径</td></tr><tr><td>color()</td><td>获取阴影颜色QColor</td></tr><tr><td>offset()</td><td>获取阴影的偏移量</td></tr><tr><td>xOffset()</td><td>获取阴影的x偏移量</td></tr><tr><td>yOffset()</td><td>获取阴影的y偏移量</td></tr></tbody></table><ul><li><strong>QGraphicsOpacityEffect</strong></li></ul><table><thead><tr><th>图形效果的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>[slot]setOpacity(opacity: float)</td><td>设置不透明度</td></tr><tr><td>[slot]setOpacityMask(Union[QBrush, Qt.BrushStyle, Qt.GlobalColor, QColor,QGradient, QTmage,QPixmap])</td><td>设置遮掩面刷</td></tr><tr><td>opacity()</td><td>获取不透明度</td></tr><tr><td>opacityMass()</td><td>获取遮掩画刷 QBrush</td></tr></tbody></table><p>主要方法介绍如下</p><ul><li><p>模糊效果是使图项变得模糊不清,可以隐藏一些细节。在一个图项失去焦点,或将注意力移到其他图项上时可以使用模糊效果。</p><ul><li><p>QGraphicsBlurEffect 的模糊效果是通过设置模糊半径和模糊提示实现的。</p></li><li><p>QGraphicsBlurEffect 主要有槽函数setBlurRadius(blurRadius;float),setBlurHints(QGraphicsBlurEffect, BlurHint).</p></li><li><p>其中模糊半径默认为5个像聚,模糊半径越大图像越模糊;</p></li><li><p>模糊提示QGraphicsBlurEffect,BlurHint 可以取:</p><ul><li>QGraphicsBlurEffect.PerformanceHint(主要考虑染性能)</li><li>QGraphicsBlurEffect,QualityHint(主要考虑染质量)</li><li>QGraphicsBlurEffect,AnimationHint(用于染动画)。</li></ul></li></ul></li><li><p>变色效果是用另外一种颜色给图项着色</p><ul><li>QGraphicsColorizeEffect 的变色效果是通过设置新颜色和着色强度来实现的,默认的着色是浅蓝色(QColor(0,0,192))</li><li>QGraphicsColorizeEffeet 主要有槽函数 setColor(Union[QColor,Qt.GlobalColor, str])和 setStrength(strength: float)</li></ul></li><li><p>阴影效果能给图项增加立体效果</p><ul><li>QGraphicsDropShadowEffect 的阴影效果需要设置背景色、模糊半径和阴影的偏移量。默认的阴影颜色是灰色(QColor(63,63,63.180)),默认的模糊半径是 1,偏移量是8个像素,方向是右下</li><li>QGraphicsDropShadowEffect 主要有槽函数 <ul><li>setBlurRadius(blurRadius float)</li><li>setColor(Union[QColor, Qt.GlobalColor,str])</li><li>setOffset(dx: float,dy: float)</li><li>setOffset(ofs: Union[QPointF,QPoint])</li></ul></li></ul></li><li><p>透明效果可以使人看到图项背后的图形</p><ul><li>QGraphicsOpacityEffect 的透明效果需要设置不透明度。</li><li>QGraphicsOpacityEffect 有函数: <ul><li>setOpacity(opacity: float)</li><li>setOpacityMask(Union[QBrush,Qt.BrushStyle, Qt.GlobalColor,QColor.QGradient,QImage,QPixmap])</li></ul></li><li>setOpacity(opacity:float)用于设置不透明度opacity 的值在 0.0~1.0之间,00表示完全透明,10表示完全不透明,默认值为0.7;</li><li>setOpacityMask()用于设置部分透明。</li></ul></li></ul><h5 id="图形效果的信号" tabindex="-1"><a class="header-anchor" href="#图形效果的信号" aria-hidden="true">#</a> 图形效果的信号</h5><p>图形效果的信号如表所示</p><table><thead><tr><th>图形效果</th><th>图形效果的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>QGraphicsBlurEffect</td><td>blurRadiusChanged(radius: float)</td><td>模糊半径发生改变时发送信号</td></tr><tr><td>QGraphicsBlurEffect</td><td>blurHintsChanged(hints: QGraphicsBlurEffect.BlurHints)</td><td>模糊提示发生改变时发送信号</td></tr><tr><td>QGraphicsColorizeEffect</td><td>colorChanged(color:QColor)</td><td>颜色发生改变时发送信号</td></tr><tr><td>QGraphicsColorizeEffect</td><td>strengthChanged(strength: float)</td><td>强度发生改变时发送信号</td></tr><tr><td>QGraphicsDropShadow Effect</td><td>blurRadiusChanged(blurRadius:float)</td><td>模糊半径发生改变时发送信号</td></tr><tr><td>QGraphicsDropShadow Effect</td><td>colorChanged(color:QColor)</td><td>阴影颜色发生改变时发送信号</td></tr><tr><td>QGraphicsDropShadow Effect</td><td>offsetChanged(offset: QPointF)</td><td>阴影偏移量发生改变时发送信号</td></tr><tr><td>QGraphicsOpacityEffect</td><td>opacityChanged(opacity:float)</td><td>不透明度发生改变时发送信号</td></tr><tr><td>QGraphicsOpacityEffect</td><td>opacityMaskChanged(mask:QBrush)</td><td>遮掩画刷发生改变时发送信号</td></tr></tbody></table>`,76)]))}const m=t(l,[["render",r],["__file","15QPainter和GraphicsView绘图3.html.vue"]]);export{m as default};
