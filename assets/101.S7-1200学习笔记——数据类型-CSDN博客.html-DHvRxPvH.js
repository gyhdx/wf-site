import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,c as i,o as n,b as e,a as p,e as r,d as l}from"./app-DBc2jY3V.js";const o={},s={href:"https://so.csdn.net/so/search?q=PLC&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"};function u(_,a){const d=h("ExternalLinkIcon");return n(),i("div",null,[a[9]||(a[9]=e("h2",{id:"一、数据类型组的有效性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、数据类型组的有效性","aria-hidden":"true"},"#"),r(" 一、数据类型组的有效性")],-1)),a[10]||(a[10]=e("p",null,"数据类型组中定义有数据的属性，例如：内容及有效存储区的表示。",-1)),a[11]||(a[11]=e("p",null,"在用户程序中，可使用预定义的数据类型，并将这些数据类型添加到用户自定义数据类型中。此时，可使用以下类别：",-1)),e("ul",null,[a[3]||(a[3]=e("li",null,"基本数据类型（二进制数、整数、浮点数、定时器、DATE、TOD、LTOD、CHAR、WCHAR）",-1)),a[4]||(a[4]=e("li",null,"复杂数据类型（DT、LDT、DTL、STRING、WSTRING、ARRAY、STRUCT）",-1)),e("li",null,[a[1]||(a[1]=r("用户自定义数据类型（")),e("a",s,[a[0]||(a[0]=r("PLC")),l(d)]),a[2]||(a[2]=r(" 数据类型 (UDT)）"))]),a[5]||(a[5]=e("li",null,"指针",-1)),a[6]||(a[6]=e("li",null,"参数类型",-1)),a[7]||(a[7]=e("li",null,"系统数据类型",-1)),a[8]||(a[8]=e("li",null,"硬件数据类型",-1))]),a[12]||(a[12]=p('<table><thead><tr><th>数据类型</th><th>位数</th><th>字节数</th></tr></thead><tbody><tr><td>Byte</td><td>8</td><td>1</td></tr><tr><td>Word</td><td>16</td><td>2</td></tr><tr><td>Dwod</td><td>32</td><td>4</td></tr><tr><td>Lwod</td><td>64</td><td>8</td></tr></tbody></table><h2 id="二、-基本数据类型" tabindex="-1"><a class="header-anchor" href="#二、-基本数据类型" aria-hidden="true">#</a> 二、 基本数据类型</h2><h3 id="_1-二进制数" tabindex="-1"><a class="header-anchor" href="#_1-二进制数" aria-hidden="true">#</a> 1 二进制数</h3><h4 id="_1-1-bool-位" tabindex="-1"><a class="header-anchor" href="#_1-1-bool-位" aria-hidden="true">#</a> 1.1 BOOL（位）</h4><p>长度： 1位</p><p>取值： FALSE 或 TRUE</p><p>输入值示例： FALSE、TRUE、BOOL#1、1、2#1、8#1、16#1、</p><h4 id="_1-2-byte" tabindex="-1"><a class="header-anchor" href="#_1-2-byte" aria-hidden="true">#</a> 1.2 BYTE</h4><p>长度： 8位</p><p>取值： 0 ~ 255 或 -128 ~ +127</p><p>输入值示例： IB2、MB2、DB1.DBB4</p><h4 id="_1-3-word" tabindex="-1"><a class="header-anchor" href="#_1-3-word" aria-hidden="true">#</a> 1.3 WORD</h4><p>长度： 16位</p><p>取值： 0 ~ 65535 或 -32768 ~ +32767</p><p>输入值示例： MW10、DB1.DBW2</p><h4 id="_1-4-dword" tabindex="-1"><a class="header-anchor" href="#_1-4-dword" aria-hidden="true">#</a> 1.4 DWORD</h4><p>长度： 32位</p><p>取值： 0 ~ 4294967295 或 -2147483647 ~ +2147483647</p><p>输入值示例： MW10、DB1.DBW2</p><h4 id="_1-5-lword" tabindex="-1"><a class="header-anchor" href="#_1-5-lword" aria-hidden="true">#</a> 1.5 LWORD</h4><p>长度： 64位</p><p>取值： 略</p><p>输入值示例： 略</p><h3 id="_2-整数" tabindex="-1"><a class="header-anchor" href="#_2-整数" aria-hidden="true">#</a> 2 整数</h3><h4 id="_2-1-sint" tabindex="-1"><a class="header-anchor" href="#_2-1-sint" aria-hidden="true">#</a> 2.1 SINT</h4><p>长度： 8位</p><p>取值： -128 ~ +127</p><p>输入值示例： +55、SINT#+44</p><h4 id="_2-2-usint" tabindex="-1"><a class="header-anchor" href="#_2-2-usint" aria-hidden="true">#</a> 2.2 USINT</h4><p>长度： 8位</p><p>取值： 0 ~ +255</p><p>输入值示例： 55、USINT#66</p><h4 id="_2-3-int" tabindex="-1"><a class="header-anchor" href="#_2-3-int" aria-hidden="true">#</a> 2.3 INT</h4><p>长度： 16位</p><p>取值： -32768 ~ +32768</p><p>输入值示例： 555、INT#656</p><h4 id="_2-4-uint" tabindex="-1"><a class="header-anchor" href="#_2-4-uint" aria-hidden="true">#</a> 2.4 UINT</h4><p>长度： 16位</p><p>取值： 0 ~ 65535</p><p>输入值示例： 6555、UINT#61156</p><h4 id="_2-5-dint" tabindex="-1"><a class="header-anchor" href="#_2-5-dint" aria-hidden="true">#</a> 2.5 DINT</h4><p>长度： 32位</p><p>取值： -2147483648 ~ +3147483647</p><p>输入值示例： 126555、DINT#6111156</p><h4 id="_2-6-udint" tabindex="-1"><a class="header-anchor" href="#_2-6-udint" aria-hidden="true">#</a> 2.6 UDINT</h4><p>长度： 32位</p><p>取值： 0 ~ +4294967295</p><p>输入值示例： 121216555、UDINT#61111156</p><h4 id="_2-7-lint" tabindex="-1"><a class="header-anchor" href="#_2-7-lint" aria-hidden="true">#</a> 2.7 LINT</h4><p>长度： 64位</p><p>取值： 略</p><p>输入值示例： 略</p><h4 id="_2-8-ulint" tabindex="-1"><a class="header-anchor" href="#_2-8-ulint" aria-hidden="true">#</a> 2.8 ULINT</h4><p>长度： 64位</p><p>取值： 略</p><p>输入值示例： 略</p><h3 id="_3-浮点数" tabindex="-1"><a class="header-anchor" href="#_3-浮点数" aria-hidden="true">#</a> 3 浮点数</h3><h4 id="_3-1-real" tabindex="-1"><a class="header-anchor" href="#_3-1-real" aria-hidden="true">#</a> 3.1 REAL</h4><p>长度： 32位 [31位：符号位；23-30位：指数位；0-22位：尾数位]</p><p>取值： 略</p><p>输入值示例： 略</p><blockquote><p>处理 REAL 数据类型时会精确到 6 位数。</p></blockquote><h4 id="_3-2-lreal" tabindex="-1"><a class="header-anchor" href="#_3-2-lreal" aria-hidden="true">#</a> 3.2 LREAL</h4><p>长度： 64位 [63位：符号位；52-63位：指数位；0-51位：尾数位]</p><p>取值： 略</p><p>输入值示例： 略</p><blockquote><p>处理 LREAL 数据类型时会精确到 15 位数。</p></blockquote><h3 id="_4-字符串" tabindex="-1"><a class="header-anchor" href="#_4-字符串" aria-hidden="true">#</a> 4 字符串</h3><h4 id="_4-1-字符" tabindex="-1"><a class="header-anchor" href="#_4-1-字符" aria-hidden="true">#</a> 4.1 字符</h4><h5 id="_4-1-1-char-字符" tabindex="-1"><a class="header-anchor" href="#_4-1-1-char-字符" aria-hidden="true">#</a> 4.1.1 CHAR（字符）</h5><p>长度： 8位</p><p>取值： ASCII 字符</p><p>输入值示例： ‘A’</p><h5 id="_4-1-2-wchar-宽字符" tabindex="-1"><a class="header-anchor" href="#_4-1-2-wchar-宽字符" aria-hidden="true">#</a> 4.1.2 WCHAR（宽字符）</h5><p>长度： 16位</p><p>取值： ASCII 字符</p><p>输入值示例： WCHAR#‘A’</p><blockquote><p>WCHAR 数据类型将扩展字符集中的单个字符保存为 UFT-16 编码形式。</p></blockquote><h4 id="_4-2-字符串" tabindex="-1"><a class="header-anchor" href="#_4-2-字符串" aria-hidden="true">#</a> 4.2 字符串</h4><h5 id="_4-2-1-string" tabindex="-1"><a class="header-anchor" href="#_4-2-1-string" aria-hidden="true">#</a> 4.2.1 STRING</h5><p>长度：</p><p>取值： ASCII 字符串，包括特殊字符</p><p>输入值示例： “name”</p><h2 id="三、复杂数据类型" tabindex="-1"><a class="header-anchor" href="#三、复杂数据类型" aria-hidden="true">#</a> 三、复杂数据类型</h2><h3 id="_1-array-数组" tabindex="-1"><a class="header-anchor" href="#_1-array-数组" aria-hidden="true">#</a> 1 Array（数组）</h3>',85))])}const f=t(o,[["render",u],["__file","101.S7-1200学习笔记——数据类型-CSDN博客.html.vue"]]);export{f as default};
