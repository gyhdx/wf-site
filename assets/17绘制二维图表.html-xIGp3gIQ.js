import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,a as e}from"./app-DBc2jY3V.js";const p="/wf-site/assets/202303112042037-DGJFdu4K.png",o="/wf-site/assets/202303112138739-DXmY9a5L.png",i="/wf-site/assets/202303112339076-fLfZ4ya-.png",l="/wf-site/assets/202303120212015-DKDJgGsd.png",c="/wf-site/assets/202303121730374-CN1nqi63.png",d="/wf-site/assets/202303121733082-RfkP3-c3.png",u="/wf-site/assets/202303121821480-D6gFqgQw.png",r="/wf-site/assets/202303121844690-BtPlP-FQ.png",k="/wf-site/assets/202303121920486-D7kfbGD0.png",b="/wf-site/assets/202303121952613-BLffhdJb.png",m="/wf-site/assets/202303121959388-lsdy4oHt.png",v="/wf-site/assets/202303122038824-BplQhAeh.png",h={};function Q(g,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_17-绘制二维图表" tabindex="-1"><a class="header-anchor" href="#_17-绘制二维图表" aria-hidden="true">#</a> 17.绘制二维图表</h1><p>如果文件中存在大量的数据,若直接观察,很难发现数据的规律,而且也不方便,可以将数据绘制成图表的形式以方便分析。</p><p>PySide6 可以绘制二维图表和三维图表PySide6的PyCharts模块提供绘制二维图表的控件和数据序列,可以绘制折线图样条曲线图散点图、面积图饼图条形图蜡烛图、箱线图和极坐标图。</p><h3 id="图表视图控件和图表" tabindex="-1"><a class="header-anchor" href="#图表视图控件和图表" aria-hidden="true">#</a> 图表视图控件和图表</h3><p>图表由数据序列、坐标轴和图例构成,数据序列提供图表曲线上的数据。</p><p>要正确绘制出图表,首先需要创建出能容纳和管理图表的控件,图表可以放到 QGraphicsView 上也可以放到专门的图表视图控件 QChartView 上。</p><h4 id="图表视图控件qchartview" tabindex="-1"><a class="header-anchor" href="#图表视图控件qchartview" aria-hidden="true">#</a> 图表视图控件QChartView</h4><p>QChartView控件是图表QChart 的容器控件,需要将图表对象放到QChartView 控件中以显示图表。</p><p>图表视图控件 QChartView 继承自视图控件 QGraphicsView。</p><p>用QChartView类创建图表视图控件的方法如下所示其中parent 是继承自QWidget的对象,chart 是继承自QChart 的实例对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChartView

QChartView<span class="token punctuation">(</span>chart<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">.</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QChartView<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图表视图控件的方法比较少,</p><ul><li>用setChart(QChart)方法设置图表;</li><li>用chart()方法获取图表QChart;</li><li>用setRubberBand(rubberBands:QChartView.RubberBands)方法设置光标</li><li>在图表视图控件上拖动时选择框的类型，参数 rubberBands 是 QChartView.RubberBands枚举类型，可取: <ul><li>QChartView.NoRubberBand(无选择)</li><li>QChartView.VerticalRubberBand(竖向选择框)</li><li>QChartView.HorizontalRubberBand(水平选择框)</li><li>QChartView.RectangleRubberBand(矩形选择框);</li></ul></li><li>用setRubberBandSelectionMode(Qt.ItemSelectionMode)方法设置选择模式，参数Q.ItemSelectionMode 可以取: <ul><li>Qt.ContainsItemShape(完全包含形状时被选中)</li><li>Qt.IntersectsItemShape(与形状交叉时被选中)</li><li>Qt.ContainsItemBoundingRect(完全包含边界形时被选中)</li><li>Qt.IntersectsltemBoundingRect(与边界矩形交叉时被选中)</li></ul></li></ul><h4 id="图表qchart" tabindex="-1"><a class="header-anchor" href="#图表qchart" aria-hidden="true">#</a> 图表QChart</h4><p>QChart 是图表类,它继承自 QGraphicsWidget。</p><p>一个图表一般包含数据序列、坐标轴图表标题和图例。</p><p>用QChart 类创建图表的方法如下所示,其中</p><ul><li>parent 是继承自QGraphicsItem 的实例，</li><li>type 是 QChart;</li><li>ChartType 的举类型可以取 <ul><li>QChart.ChartTypeUndefined(类型未定义)</li><li>QChart.ChartTypeCartesian(直角坐标)</li><li>QChart.ChartTypePolar(极坐标)</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChart

QChart<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> wFlags<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>WindowType <span class="token operator">=</span> Default<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WindowFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QChart<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">.</span>ChartType<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> wFlags<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>WindowType<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="图表qchart的常用方法" tabindex="-1"><a class="header-anchor" href="#图表qchart的常用方法" aria-hidden="true">#</a> 图表QChart的常用方法</h5><p>图表的常用方法如表所示,主要是如何设置数据序列和坐标轴,主要方法介绍如下</p><ul><li><p>用addSeries(series;QAbstractSeries)方法添加数据序列,</p><ul><li>用removeAl1Series()方法移除所有数据序列,</li><li>用removeSeries(series;QAbstractSeries)方法移除指定的数据序列。</li></ul></li><li><p>分别用以下方法设置数据序列的X轴和Y轴，同时也起到坐标轴与数据序列关联的作用；也可用createDefaultAxes()方法创建默认的坐标轴。</p><ul><li>setAxisX(axis:QAbstractAxis,series: QAbstractSeries= None)</li><li>setAxisY(axis:QAbstractAxis,series: QAbstractSeries=None)</li><li>用removeAxis(axis:QAbstractAxis)方法移除指定的坐标轴。</li></ul></li><li><p>用setTheme(theme:QChart.ChartTheme)方法设置主题,主题是图表字体颜色画刷钢笔和坐标轴等的组合方案，参数可取以下值,值分别对应0~7。</p><ul><li>QChart.ChartThemeLight 浅色主题，这是默认主题。</li><li>QChart.ChartThemeBlueCerulean 蔚蓝主题。</li><li>QChart.ChartThemeDark 黑暗主题。</li><li>QChart.ThemeBrownSand 沙褐色主题。</li><li>QChart.ChartThemeBlueNcs 自然色系统(NCS) 蓝色主题。</li><li>QChart.ChartThemeHighContrast 高对比度主题。</li><li>QChart.ChartThemeBluelcy 冰蓝色主题。</li><li>QChart.ChartThemeQt Qt主题。</li></ul></li><li><p>用setAnimationOptions(QChart.AnimationOptions)方法可以设置坐标轴和数据序列的动画效果，参数可取:</p><ul><li>QChart.NoAnimation(没有动画效果)</li><li>QChart.GridAxisAnimations(坐标轴有动画效果)</li><li>QChart.SeriesAnimations(数据序列有动画效果)</li><li>QChart.AllAnimations(全部有动画效果);</li><li>用setAnimationDuration(msecs:int)方法设置动画的持续时间,单位是毫秒。</li></ul></li><li><p>用setTitle(title:str)方法设置图表的标题;</p><ul><li>用setTitleFont(font:Union[QFont,str,Sequence[str])方法设置标题的字体</li><li>用setTitleBrush(QBrush)方法设置标题的画刷。</li></ul></li></ul><table><thead><tr><th>QChart 的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>addSeries(series: QAbstractSeries)</td><td>添加数据序列</td></tr><tr><td>removeAllSeries()</td><td>移除所有的数据序列</td></tr><tr><td>removeSeries(series:QAbstractSeries)</td><td>移除指定的数据序列</td></tr><tr><td>setAxisX(axis:QAbstractAxis, series:QAbstractSeries = None)</td><td>设置X轴</td></tr><tr><td>axisX(series:QAbstractSeries=None)</td><td>获取X轴 QAbstractAxis</td></tr><tr><td>setAxisY(axis:QAbstractAxis,series:QAbstractSeries= None)</td><td>设置Y轴</td></tr><tr><td>axisY(series:QAbstractSeries=None)</td><td>获取Y轴QAbstractAxis</td></tr><tr><td>addAxis(axis: QAbstractAxis,alignment:Qt.Alignment)</td><td>添加坐标轴</td></tr><tr><td>createDefaultAxes()</td><td>创建默认的坐标轴</td></tr><tr><td>axes(orientation = Qt.Horizontal | Qt.Vertical, series = None)</td><td>获取坐标轴列表List[QAbstractAxis]</td></tr><tr><td>removeAxis(axis:QAbstractAxis)</td><td>移除指定的坐标轴</td></tr><tr><td>scroll(dx:float,dy: float)</td><td>沿着X和Y方向移动指定距离</td></tr><tr><td>setAnimationOptions(QChart.AnimationOptions)</td><td>设置动画选项</td></tr><tr><td>setAnimationDuration(msecs:int)</td><td>设置动画显示持续时间(毫秒)</td></tr><tr><td>setBackgroundBrush(brush:Union[QBrush,Qt.BrushStyle, Qt.GlobalColor,QColor,QGradient,QImage.QPixmap])</td><td>设置背景画刷</td></tr><tr><td>setBackgroundPen(pen:Union[QPen,Qt.PenStyle.QColor])</td><td>设置背景钢笔</td></tr><tr><td>setBackgroundRoundness(diameter: float)</td><td>设置背景4个角处的圆的直径</td></tr><tr><td>setBackgroundVisible(visible:bool=True)</td><td>设置背景是否可见</td></tr><tr><td>isBackgroundVisible()</td><td>获取背景是否可见</td></tr><tr><td>setDropShadowEnabled(enabled: bool=True)</td><td>设置背景阴影效果</td></tr><tr><td>isDropShadowEnabled()</td><td>获取是否有阴影效果</td></tr><tr><td>setMargins(margins:QMargins)</td><td>设置页边距</td></tr><tr><td>setPlotArea(rect:Union[QRectF:QRect])</td><td>设置绘图区域</td></tr><tr><td>setPlotAreaBackgroundBrush(QBrush)</td><td>设置绘图区域的背景画刷</td></tr><tr><td>setPlotAreaBackgroundPen(pen:Union[QPen,QColor])</td><td>设置绘图区域的背景钢笔</td></tr><tr><td>setPlotAreaBackgroundVisible(visible:bool=True)</td><td>设置绘图区域背景是否可见</td></tr><tr><td>isPlotAreaBackgroundVisible()</td><td>获取绘图区域背景是否可见</td></tr><tr><td>setTheme(theme: QChart. ChartTheme)</td><td>设置主题</td></tr><tr><td>theme()</td><td>获取主题</td></tr><tr><td>setTitle(title: str)</td><td>设置标题</td></tr><tr><td>title()</td><td>获取标题</td></tr><tr><td>setTitleBrush(QBrush)</td><td>设置标题的画刷</td></tr><tr><td>setTitleFont(font: Union[QFont, str.Sequence[str]])</td><td>设置标题的字体</td></tr><tr><td>legend()</td><td>获取图例QLegend</td></tr><tr><td>plotArea()</td><td>获取绘图区域QRectF</td></tr><tr><td>zoom(factor:float)</td><td>按照指定的缩放值进行缩放</td></tr><tr><td>zoomIn()</td><td>按照缩放值2进行缩小</td></tr><tr><td>zoomIn(rect: Union[QRectF,QRect])</td><td>缩放图表使指定区域可见</td></tr><tr><td>zoomOut()</td><td>按照缩放值2进行放大</td></tr><tr><td>isZoomed()</td><td>获取是否进行过缩放</td></tr><tr><td>zoomReset()</td><td>重置缩放</td></tr></tbody></table><h5 id="qchart-信号" tabindex="-1"><a class="header-anchor" href="#qchart-信号" aria-hidden="true">#</a> QChart 信号</h5><p>QChart 只有一个信号 plotAreaChanged(plotArea: QRectF),当绘图范围发生改变时发送信号。</p><h3 id="数据序列" tabindex="-1"><a class="header-anchor" href="#数据序列" aria-hidden="true">#</a> 数据序列</h3><p>图表QChart中显示的数据曲线的值和数据曲线的类型由数据序列来定义</p><p>QtCharts模块中的数据序列都继承自QAbstractSeries。QAbstractSeries 及其子类之间的继承关系如图所示。</p><figure><img src="`+p+`" alt="image-20230311203725514" tabindex="0" loading="lazy"><figcaption>image-20230311203725514</figcaption></figure><h4 id="数据序列抽象类qabstractseries" tabindex="-1"><a class="header-anchor" href="#数据序列抽象类qabstractseries" aria-hidden="true">#</a> 数据序列抽象类QAbstractSeries</h4><p>QAbstractSeries类是所有数据序列的基类它的方法和信号也会被其子类所继承</p><h5 id="qabstractseries-的常用方法" tabindex="-1"><a class="header-anchor" href="#qabstractseries-的常用方法" aria-hidden="true">#</a> QAbstractSeries 的常用方法</h5><ul><li>要正确显示数据序列曲线,需要将数据序列与坐标轴关联。将数据序列和坐标轴加入到图表中后,有两种方法可以实现数据序列与坐标轴的关联: <ul><li><mark>此方法新版已废弃</mark>一种方法是用QChart 的setAxisX(axis:QAbstractAxis，seriesQAbstractSeries = None)方法和 setAxisY(axis: QAbstractAxis, series:QAbstractSeries =None)方法;</li><li>另一种方法是用数据序列的 addAxis(axis: PySide6.QtCharts.QAbstractAxis, alignment: PySide6.QtCore.Qt.AlignmentFlag)方法将数据序列与坐标轴关联 <ul><li>用detachAxis(axis:QAbstractAxis)方法断开与坐标轴的关联。</li></ul></li></ul></li><li>另外用数据序列的 setName(str)方法设置数据序列在图例中的名称;</li><li>如果使用将把数据序列显示在透明的QOpenGLWidget 控件上用setUseOpenGL(enable=True)方法设置是否用OpenGL 加速显示。</li></ul><table><thead><tr><th>QAbstractSeries的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>attachAxis(axis:QAbstractAxis)</td><td>bool</td><td>关联坐标轴，成功则返回True</td></tr><tr><td>attachedAxes()</td><td>List[QAbstractAxis]</td><td>获取关联的坐标轴列表</td></tr><tr><td>detachAxis(axis; QAbstractAxis)</td><td>bool</td><td>断开与坐标轴的关联</td></tr><tr><td>setName(name:str)</td><td>None</td><td>设置数据序列在图列中的名称</td></tr><tr><td>name()</td><td>Str</td><td>获取数据序列在图列中的名称</td></tr><tr><td>setUseOpenGL(enable:bool=True)</td><td>None</td><td>设置是否使用OpenGL加速显示</td></tr><tr><td>useOpenGL()</td><td>bool</td><td>获取是否使用OpenGL加速显示</td></tr><tr><td>setOpacity(opacity:float)</td><td>None</td><td>设置不透明度；范围是0.0~1.0</td></tr><tr><td>opacity()</td><td>float</td><td>获取不透明度</td></tr><tr><td>setVisible(visible:bool=True)</td><td>None</td><td>设置是否可见</td></tr><tr><td>isVisible()</td><td>bool</td><td>获取数据序列是否可见</td></tr><tr><td>hide()</td><td>None</td><td>隐藏数据序列</td></tr><tr><td>show()</td><td>None</td><td>显示数据序列</td></tr><tr><td>chart()</td><td>QChart</td><td>获取数据序列所在的图表</td></tr></tbody></table><h5 id="qabstractseries-的信号" tabindex="-1"><a class="header-anchor" href="#qabstractseries-的信号" aria-hidden="true">#</a> QAbstractSeries 的信号</h5><p>QAbstractSeries 的信号有</p><ul><li>nameChanged()(当在图例中的名称改变时发送该信号)</li><li>opacityChanged()(当不透明度发生改变时发送该信号)</li><li>useOpenGLChanged()和visibleChanged()。</li></ul><h4 id="xy图" tabindex="-1"><a class="header-anchor" href="#xy图" aria-hidden="true">#</a> XY图</h4><p>XY 图由横坐标X 数据和纵坐标 Y 数据构成,包括折线图样条曲线图和散点图。XY所需的数据序列都继承自QXYSeries。</p><p>QXYSeries是QAbstractSeries 的派生类之一,主要实现以二维数据点作为数据源,坐标类型为二维坐标系的图表,包括折线图(QLineSeries)、样条曲线图(QSplineSeries)和散点图(QScatterSeries)。</p><p>QXYSeries 提供对数据源进行增替换操作的方法和信号，同时内部实现了控制数据点在坐标系上的显示形态(数据点标签的格式、颜色、是否显示等)的功能。</p><p>用QLineSeries、QSplineSeries 和 QScatterSeries 类创建数据序列的方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QLineSeries<span class="token punctuation">,</span> QSplineSeries<span class="token punctuation">,</span> QScatterSeries

QLineSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QSplineSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QScatterSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="qxyseries-数据序列" tabindex="-1"><a class="header-anchor" href="#qxyseries-数据序列" aria-hidden="true">#</a> QXYSeries 数据序列</h5><h6 id="qxyseries-数据序列的方法" tabindex="-1"><a class="header-anchor" href="#qxyseries-数据序列的方法" aria-hidden="true">#</a> QXYSeries 数据序列的方法</h6><p>QXYSeries 数据序列需要由其继承者来实现绘图。</p><p>QXYSeries 为 QLineSeries、QSplineSeries和 QScatterSeries 提供了一些的共同方法和信号,常用方法如表所示,主要方法介绍如下。</p><ul><li><p>用append(point: Union[QPointF,QPoint]),append(points: Sequence[QPointF])和append(x:float,y:float)方法可以添加数据点;</p><ul><li>用insert(index:int,point:Union[QPointF,QPoint])方法可以根据索引插人数据点;</li></ul></li><li><p>用remove(index:int)方法根据索引移除数据点;</p><ul><li>用remove(point:Union[QPointF,QPoint])或 remove(x:float;y: float)方法根据数据点的坐标移除数据点;</li><li>用removePoints(index:int,count:int)方法根据索引和数量移除多个数据点;用clear()方法可以清除所有数据点。</li></ul></li><li><p>用at(index:int)方法根据索引获取数据点 QPointF,用points()方法获取所有数据点构成的列表 List[QPointF]。</p></li><li><p>用setPointLabelsVisible(visible: bool=Tue)方法设置数据点的标签是否可见这里的标签是指数据点的X和Y的值;</p><ul><li>用setPointLabelsFormat(format:str)方法设置数据点标签的格式, <ul><li>格式中用<code>@xPoint</code> 和<code>@yPoint</code> 表示X和Y值的占位符, <ul><li>例如setPointLabelsFormat(&#39;(值: @xPoint, Y值: @yPoint)&#39;)</li></ul></li></ul></li><li>用setPointLabelsClipping(enabled;bool-True)方法设置数据点的标签超过绘图区域时被裁剪。</li></ul></li><li><p>根据数据序列上的数据点,可以用最小二乘法计算出一个逼近直线,该直线称为“best fit line”</p><ul><li>可以分别用以下方法设置该逼近直线是否可见直线的颜色和绘图钢笔</li><li>setBestFitLineVisible(visible: bool= True)</li><li>setBestFitLineColor(color: Union[QColor,str])</li><li>setBestFitLinePen(pen:Union[QPen,QColor])</li></ul></li></ul><table><thead><tr><th>QXYSeries的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>append(point:Union[QPointF,QPoint])</td><td>添加数据点</td></tr><tr><td>append(points:Sequence[QPointF])</td><td>添加数据点</td></tr><tr><td>append(x: float,y: float)</td><td>添加数据点</td></tr><tr><td>insert(index: int, point: Union[QPointF, QPoint])</td><td>根据索引插入数据点</td></tr><tr><td>at(index:int)</td><td>根据索引获取数据点QPointF</td></tr><tr><td>points()</td><td>获取数据点列表ListLQPointF]</td></tr><tr><td>remove(index: int)</td><td>根据索引移除数据点</td></tr><tr><td>remove(point: Union[QPointF,QPoint])</td><td>移除数据点</td></tr><tr><td>remove(x:float,y:float)</td><td>移除数据点</td></tr><tr><td>removePoints(index: int,count:int)</td><td>根据索引移除指定数量的数据点</td></tr><tr><td>clear()</td><td>清空所有数据点</td></tr><tr><td>replace(index: int,newPoint:Union[QPointF, .QPoint])</td><td>很据索引替换数据点</td></tr><tr><td>replace(index: int,newX:float,newY:float)</td><td>根据索引替换数据点</td></tr><tr><td>replace(oldPoint: Union[QPointF,QPoint], newPoint:Union[QPointF,QPoint])</td><td>用新数据点替换旧数据点 .</td></tr><tr><td>replace(oldX: float,oldY: float, newX: float, newY:float)</td><td>用新坐标点替换旧坐标点</td></tr><tr><td>replace(points: Sequence[QPointFJ)</td><td>用多个数据点替换当前点 .</td></tr><tr><td>count()</td><td>获取数据点的数量</td></tr><tr><td>setBrush(QBrush)</td><td>设置画刷</td></tr><tr><td>setColor(QColor)</td><td>设置颜色</td></tr><tr><td>setPen(QPen)</td><td>设置钢笔</td></tr><tr><td>setPointsVisible(visible:bool=True)</td><td>设置数据点是否可见</td></tr><tr><td>setPointLabelsVisible(visible; bool=True)</td><td>设置数据点标签是否可见</td></tr><tr><td>setPointLabelsFormat(format: str)</td><td>设置数据点标签的格式</td></tr><tr><td>setPointLabelsClipping(enabled: bool=True)</td><td>设置数据点标签超过绘图区域时被裁剪</td></tr><tr><td>setPointLabelsColor(QColor)</td><td>设置数据点标签的颜色</td></tr><tr><td>setPointLabelsFont(QFont)</td><td>设置数据点标签的字体</td></tr><tr><td>setPointSelected(index:int,selected:bool)</td><td>根据索引设置某个点是否被选中</td></tr><tr><td>setMarkerSize(size:float)</td><td>设置标志的尺寸，默认值是15.0</td></tr><tr><td>setLightMarker(lightMarker: Union[QImage, str])</td><td>设置灯光标志 动西己</td></tr><tr><td>selectAllPoints()</td><td>选择所有点</td></tr><tr><td>selectPoint(index:int)</td><td>根据索引选择一点</td></tr><tr><td>selectPoints(indexes: Sequence[int])</td><td>根据索引选择多个点</td></tr><tr><td>selectedPoints()</td><td>获取选中的点的索引列表 List[int]</td></tr><tr><td>setSelectedColor(Union[QColor,Qt.GlobalColor, str])</td><td>设置选中的点的颜色</td></tr><tr><td>toggleSelection(indexes:Sequence[int])</td><td>将索引列表中的点切换选中状态</td></tr><tr><td>sizeBy(sourceData: Sequence[float], minSize: float,maxSize:float)</td><td>根据sourceData值，设置点的尺寸，尺寸在最小值和 最大值之间映射</td></tr><tr><td>setBestFitLineVisible(visible: bool=True)</td><td>设置通近直线是否可见</td></tr><tr><td>setBestFitLineColor(color；Union[QColor,str])</td><td>设置通近直线的颜色</td></tr><tr><td>setBestFitLinePen(pen:Union[QPen,QColor])</td><td>设置逼近直线的绘图钢笔</td></tr></tbody></table><h6 id="qxyseries-数据序列的信号" tabindex="-1"><a class="header-anchor" href="#qxyseries-数据序列的信号" aria-hidden="true">#</a> QXYSeries 数据序列的信号</h6><p>QXYSeries 数据序列的信号如表所示:</p><table><thead><tr><th>QXYSeries的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>clicked(QPointF)</td><td>单击时发送信号</td></tr><tr><td>pressed(QPointF)</td><td>按下鼠标按时发送信号</td></tr><tr><td>released(QPointF)</td><td>释放鼠标按键时发送信号</td></tr><tr><td>doubleClicked(QPointF)</td><td>双击时发送信号</td></tr><tr><td>colorChanged(QColor)</td><td>颜色改变时发送信号</td></tr><tr><td>hovered(point: QPointF,state: bool)</td><td>光标悬停或移开时发送信号，悬停时 state是True，移开时 state 是 False</td></tr><tr><td>penChanged(QPen)</td><td>钢笔改变时发送信号</td></tr><tr><td>pointAdded(index:int)</td><td>添加点时发送信号</td></tr><tr><td>pointLabelsClippingChanged(bool)</td><td>数据点标签裁剪状态改变时发送信号</td></tr><tr><td>pointLabelsColorChanged(QColor)</td><td>数据点标签颜色改变时发送信号</td></tr><tr><td>pointLabelsFontChanged(QFontF)</td><td>数据点标签字体改变时发送信号</td></tr><tr><td>pointLabelsFormatChanged(QFormatF)</td><td>数据点标签格式改变时发送信号</td></tr><tr><td>pointLabelsVisibilityChanged(bool)</td><td>数据点标签可见性改变时发送信号</td></tr><tr><td>pointRemoved(index:int)</td><td>移除数据点时发送信号</td></tr><tr><td>pointReplaced(index:int)</td><td>替换数据点时发送信号</td></tr><tr><td>pointsRemoved(index:int,count:int)</td><td>移除指定数量的数据点时发送信号</td></tr><tr><td>pointsReplaced()</td><td>替换多个数据点时发送信号</td></tr><tr><td>lightMarkerChanged(QImage)</td><td>灯光标志发生改变时发送信号</td></tr><tr><td>markerSizeChanged(size:float)</td><td>标志的尺寸发生改变时发送信号</td></tr><tr><td>selectedColorChanged(QColor)</td><td>选中的点的颜色发生改变时发送信号</td></tr><tr><td>bestFitLineVisibilityChanged(bool)</td><td>逼近线的可见性发生改变时发送信号</td></tr><tr><td>bestFitLineColorChanged(QColor)</td><td>逼近线的颜色发生改变时发送信号</td></tr></tbody></table><h5 id="散点图qscatterseries-数据序列" tabindex="-1"><a class="header-anchor" href="#散点图qscatterseries-数据序列" aria-hidden="true">#</a> 散点图QScatterSeries 数据序列</h5><h6 id="散点图qscatterseries-数据序列的方法" tabindex="-1"><a class="header-anchor" href="#散点图qscatterseries-数据序列的方法" aria-hidden="true">#</a> 散点图QScatterSeries 数据序列的方法</h6><p>QLineSeries和 QSplineSeries 并没有自已特有的方法和信号，只有从QXYSeries 继承的方法和信号。</p><p>下面对QScatterSeries 的方法和信号进行介绍。</p><p>QScatterSeries 的常用方法中,</p><ul><li>用setMarkerShape(QScatterSeries.MarkerShape)方法设置散点标志的形状，其参数可取以下值,对应值分别是0~5: <ul><li>QScatterSeries.MarkerShapeCircle(默认值)</li><li>QScatterSeries.MarkerShapeRectangle</li><li>QScatterSeries.MarkerShapeRotatedRectangle</li><li>QScatterSeries.MarkerShapeTriangle</li><li>QScatterSeries.MarkerShapeStar</li><li>QScatterSeries.MarkerShapePentagon</li></ul></li><li>用setMarkerSize(float)方法设置散点标志的尺寸;</li><li>用setBorderColor(QColor)方法设置边界颜色。</li></ul><h6 id="散点图qscatterseries-数据序列的信号" tabindex="-1"><a class="header-anchor" href="#散点图qscatterseries-数据序列的信号" aria-hidden="true">#</a> 散点图QScatterSeries 数据序列的信号</h6><p>QLineSeries和 QSplineSeries 并没有自已特有的方法和信号，只有从QXYSeries 继承的方法和信号。</p><p>QScatterSeries 的信号有</p><ul><li>borderColorChanged(QColor)</li><li>colorChanged(QColor)</li><li>markerSizeChanged(float)</li><li>markerShapeChanged(QScatterSeries.MarkerShape shape)</li></ul><h5 id="qlineseries、qsplineseries-和-qscatterseries-的应用实例" tabindex="-1"><a class="header-anchor" href="#qlineseries、qsplineseries-和-qscatterseries-的应用实例" aria-hidden="true">#</a> QLineSeries、QSplineSeries 和 QScatterSeries 的应用实例</h5><p>下面的程序用“文件”菜单打开 test_data,txt 文件，显示读入的数据,并用折线图样条曲线图和散点图绘制数据曲线,其中折线图和样条曲线图使用相同的数据。程序运行结果如图8-2所示。</p><figure><img src="`+o+`" alt="image-20230311213805909" tabindex="0" loading="lazy"><figcaption>image-20230311213805909</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/11 21:02</span>
<span class="token comment"># File_name: 01-QLineSeries、QSplineSeries 和 QScatterSeries 的应用实例.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QMenuBar<span class="token punctuation">,</span> QFileDialog<span class="token punctuation">,</span> QPlainTextEdit
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QFile
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChartView<span class="token punctuation">,</span> QChart<span class="token punctuation">,</span> QLineSeries<span class="token punctuation">,</span> QSplineSeries<span class="token punctuation">,</span> QScatterSeries


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        menuBar <span class="token operator">=</span> QMenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fileMenu <span class="token operator">=</span> menuBar<span class="token punctuation">.</span>addMenu<span class="token punctuation">(</span><span class="token string">&quot;文件(E)&quot;</span><span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">&quot;打开(&amp;0)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action_open_triggered<span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">&quot;退出(E)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>close<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>plainText <span class="token operator">=</span> QPlainTextEdit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        chartView <span class="token operator">=</span> QChartView<span class="token punctuation">(</span><span class="token punctuation">)</span>

        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>menuBar<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plainText<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">action_open_triggered</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fileName<span class="token punctuation">,</span> fil <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;打开测试文件&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;文本文件(*.txt)&quot;</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> QFile<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token builtin">file</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>QFile<span class="token punctuation">.</span>OpenModeFlag<span class="token punctuation">.</span>ReadOnly <span class="token operator">|</span> QFile<span class="token punctuation">.</span>OpenModeFlag<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>

            self<span class="token punctuation">.</span>plainText<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">while</span> <span class="token keyword">not</span> <span class="token builtin">file</span><span class="token punctuation">.</span>atEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    string <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 按行读取</span>
                    string <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转成字符中</span>
                    self<span class="token punctuation">.</span>plainText<span class="token punctuation">.</span>appendPlainText<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
                    temp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token keyword">for</span> i <span class="token keyword">in</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>  <span class="token comment"># 转成浮点数, 并添加数据</span>
                self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>removeAllSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 移除现有曲线</span>
                self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment"># 调用函数,绘制曲线</span>

            <span class="token keyword">except</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>plainText<span class="token punctuation">.</span>appendPlainText<span class="token punctuation">(</span><span class="token string">&quot;打开文件出错&quot;</span><span class="token punctuation">)</span>

            <span class="token keyword">finally</span><span class="token punctuation">:</span>
                <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">plot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 绘制图表的函数</span>
        lineSeries <span class="token operator">=</span> QLineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建折线数据序列</span>
        splineSeries <span class="token operator">=</span> QSplineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建样条数据序列</span>
        scatterSeries <span class="token operator">=</span> QScatterSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建散点数据序列</span>
        lineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;折线图&quot;</span><span class="token punctuation">)</span>
        splineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;样条曲线图&quot;</span><span class="token punctuation">)</span>
        scatterSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;散点图&quot;</span><span class="token punctuation">)</span>

        scatterSeries<span class="token punctuation">.</span>setMarkerShape<span class="token punctuation">(</span>QScatterSeries<span class="token punctuation">.</span>MarkerShape<span class="token punctuation">.</span>MarkerShapeStar<span class="token punctuation">)</span>
        scatterSeries<span class="token punctuation">.</span>setBestFitLineVisible<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 逼近线</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
            splineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
            scatterSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>

        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>splineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>scatterSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>createDefaultAxes<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面积图" tabindex="-1"><a class="header-anchor" href="#面积图" aria-hidden="true">#</a> 面积图</h4><p>面积图QAreaSeries 一般由上下两个折线数据序列 QLineSeries 构成在上下两个折线之间填充颜色;</p><p>也可以只有上折线数据序列,把轴当成下折线数据序列。</p><p>面积图的数据序列是QAreaSeries,用QAreaSeries 类创建面积数据序列的方法如下所示,其中 parent是继承自 QObject 的实例对象,upperSeries 和 lowerSeries 分别是上下两个折线序列。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QAreaSeries

QAreaSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QAreaSeries<span class="token punctuation">(</span>upperSeries<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCharts<span class="token punctuation">.</span>QLineSeries<span class="token punctuation">,</span> lowerSeries<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCharts<span class="token punctuation">.</span>QLineSeries<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="面积图qareaseries-的方法" tabindex="-1"><a class="header-anchor" href="#面积图qareaseries-的方法" aria-hidden="true">#</a> 面积图QAreaSeries 的方法</h5><p>面积图 QAreaSeries 的常用方法如表所示</p><p>主要方法是用setUpperSeriesQLineSeries)方法和 setLowerSeries(QLineSeries)方法分别设置面积数据序列的上下两个数据序列</p><table><thead><tr><th>QAreaSeries的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setUpperSeries(QLineSeries)</td><td>设置上数据序列</td></tr><tr><td>upperSeries()</td><td>获取上数据序列</td></tr><tr><td>setLowerSeries(QLineSeries)</td><td>设置下数据序列</td></tr><tr><td>lowerSeries()</td><td>获取下数据序列</td></tr><tr><td>setBorderColor(QColor)</td><td>设置边框颜色</td></tr><tr><td>setBrush(QBrush)</td><td>设查画刷</td></tr><tr><td>setColor(QColor)</td><td>设置填充颜色</td></tr><tr><td>setPen(QPen)</td><td>设置钢笔</td></tr><tr><td>setPointLabelsClipping(enabled=True)</td><td>设置数据点的标签超过绘图区域时被裁剪</td></tr><tr><td>setPointLabelsColor(QColor)</td><td>设置标签颜色</td></tr><tr><td>setPointLLabelsFont(QFont)</td><td>设置标签字体</td></tr><tr><td>setPointLabelsFormat(str)</td><td>设置标签格式</td></tr><tr><td>setPointLabelsVisible(visible=True)</td><td>设置标签是否可见</td></tr><tr><td>pointLabelsVisible()</td><td>获取标签是否可见</td></tr><tr><td>setPointsVisible(visible=True)</td><td>设置数据点是否可见</td></tr></tbody></table><h5 id="面积图qareaseries-的信号" tabindex="-1"><a class="header-anchor" href="#面积图qareaseries-的信号" aria-hidden="true">#</a> 面积图QAreaSeries 的信号</h5><p>面积图QAreaSeries 的信号如表所示</p><table><thead><tr><th>QAreaSeries的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>clicked(QPointF)</td><td>单击时发送信号</td></tr><tr><td>pressed(QPointF)</td><td>按下鼠标按键时发送信号</td></tr><tr><td>released(QPointF)</td><td>释放鼠标按键时发送信号</td></tr><tr><td>doubleClickecl(QPointF)</td><td>双击时发送信号</td></tr><tr><td>hovered(point:QPointF,state:bool)</td><td>光标悬停或移开时发送信号，悬停时 state 是True，移开时 state 是False</td></tr><tr><td>colorChanged(QColor)</td><td>颜色发生改变时发送信号</td></tr><tr><td>borderColorChanged(QColor)</td><td>当边框颜色发生变化时发送信号</td></tr><tr><td>pointLabelsClippingChanged(bool)</td><td>数据点标签裁剪状态发生改变时发送信号</td></tr><tr><td>pointLLabelsColorChanged(QColor)</td><td>微据点标签颜色发生改变时发送信号</td></tr><tr><td>pointL.abelsFontChanged(QFont)</td><td>数据点标签字体发生改变时发送信号</td></tr><tr><td>pointLabelsFormatChanged(str)</td><td>数据点标签格式发生改变时发送信号</td></tr><tr><td>pointLabelsVisibilityChanged(bool)</td><td>数据点标签可见性发生改变时发送信号</td></tr></tbody></table><h4 id="饼图" tabindex="-1"><a class="header-anchor" href="#饼图" aria-hidden="true">#</a> 饼图</h4><p>饼图是把一个圆分成多个扇形,每个扇形是一个切片,每个切片赋予一个值,每个切片的大小与其值在所有切片总值中的百分比成正比；如果在圆中心添加圆孔,将会成为圆环图。</p><p>饼图的数据序列是QPieSeries,每个切片需要用QPieSlice 来定义。</p><p>用QPieSeries 和QPieSlice分别定义饼图数据序列和饼图切片的方法如下所示,其中 label是切片的标签文字,value 是切片的值,切片的大小由切片值之间的相对值决定。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QPieSeries<span class="token punctuation">,</span> QPieSlice

QPieSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
QPieSlice<span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QPieSlice<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="饼图数据序列-qpieseries-的方法" tabindex="-1"><a class="header-anchor" href="#饼图数据序列-qpieseries-的方法" aria-hidden="true">#</a> 饼图数据序列 QPieSeries 的方法</h5><p>QPieSeries 的常用方法如表所示,主要方法介绍如下</p><ul><li><p>用append(QPieSlice)方法添加切片;</p><ul><li>用append(Sequence[QPieSlice])添加多个切片;</li><li>用append(label:str,value: float)方法添加一个全新的切片，并返回该切片</li></ul></li><li><p>用insert(index:int,slice:QPieSlice)方法根据索引插入切片;</p></li><li><p>用count()方法获取切片的数量;</p><ul><li>用slices()方法获取切片列表;</li></ul></li><li><p>用remove(QPieSlice)方法移除并删除切片;</p><ul><li>用clear()方法删除所有切片。</li></ul></li><li><p>用setHoleSize(holeSize:float)方法设置饼图中心的圆,参数的取值范围是0~1,是相对于饼图所在的矩形尺寸,默认为0。</p><ul><li>参数如果不是0,则饼图成为圆环图</li></ul></li><li><p>用setPieSize(relativeSize: float)方法设置饼图相对于容纳饼图矩形的尺寸,参数取值为0~1;</p><ul><li>用setHorizontalPosition(relativePosition: float)方法设置饼图在矩形内的水平相对位置,参数取值为0~1,默认值是0.5,表示在水平中间位置,0表示左侧,1表示右侧;</li><li>同理用setVerticalPosition(relativePosition:float)方法设置饼图在矩形内的坚直相对位置,0 表示顶部,1表示底部</li></ul></li><li><p>用setLabelsVisible(visible: bool= True)方法设置切片标签是否可见;</p></li><li><p>用setLabelsPosition(QPieSlice,LabelPosition)方法设置切片标签的位置,枚举参数QPieSlice. LabelPosition 可取:</p><ul><li>QPieSlice.LabelOutside</li><li>QPieSlice.LabelInsideHorizontal</li><li>QPieSlice.LabelInsideTangential</li><li>QPieSlice.LabelInsideNormal。</li></ul></li><li><p>默认情况下,饼图是0°一360°全部填充,0在竖直方向,顺时针旋转为正,可以设置饼图只在指定角度范围内绘制。</p><ul><li>用setPieStartAngle(startAngle:float)方法设置饼图的起始角，</li><li>用setPieEndAngle(endAngle:float)方法设置终止角</li></ul></li></ul><table><thead><tr><th>QPieSeries的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>append(QPieSlice)</td><td>添加切片，成功则返回True</td></tr><tr><td>append(Sequence[QPieSlice])</td><td>添加多个切片，成功则返回True</td></tr><tr><td>append(label: str,value:float)</td><td>添加切片,并返回切片 QPieSlice</td></tr><tr><td>insert(index: int.slice: QPieSlice)</td><td>插人切片，成功则返回True</td></tr><tr><td>slices()</td><td>获取切片列表List[QPieSlice]</td></tr><tr><td>remove(QPieSlice)</td><td>移除并删除切片</td></tr><tr><td>take(QPieSlice)</td><td>移除但不删除切片</td></tr><tr><td>clear()</td><td>删除所有切片</td></tr><tr><td>count()</td><td>获取切片的数量</td></tr><tr><td>sum()</td><td>计算所有切片值的和</td></tr><tr><td>isEmpty()</td><td>获取是否含有切片</td></tr><tr><td>setPieSize(relativeSize: float)</td><td>设置饼图的相对尺寸，参数取值为0~1</td></tr><tr><td>setHoleSize(holeSize:float)</td><td>设置饼图内孔的相对尺寸，参数值为0~1</td></tr><tr><td>setHorizontalPosition(relativePosition:float)</td><td>设置饼图的水平相对位置，参数值为0~1</td></tr><tr><td>setVerticalPosition(relativePosition: float)</td><td>设置饼图的竖直相对位置，参数值为0~1</td></tr><tr><td>setLabelsVisible(visible:bool=True)</td><td>设置切片的标签是否可见</td></tr><tr><td>setLabelsPosition(QPieSlice. LabelPosition)</td><td>设置切片标签的位置</td></tr><tr><td>setPieStartAngle(startAngle:float)</td><td>设置饼图的起始角</td></tr><tr><td>setPieEndAngle(endAngle: float)</td><td>设置饼图的终止角</td></tr></tbody></table><h5 id="饼图数据序列qpieseries-的信号" tabindex="-1"><a class="header-anchor" href="#饼图数据序列qpieseries-的信号" aria-hidden="true">#</a> 饼图数据序列QPieSeries 的信号</h5><p>饼图数据序列QPieSeries 的信号如表所示</p><table><thead><tr><th>QPieSeries的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>added(slices: List[QPieSlice])</td><td>添加切片时发送信号，参数是添加的切片</td></tr><tr><td>clicked(slice: QPieSlice)</td><td>单击切片时发送信号</td></tr><tr><td>countChanged()</td><td>切片数量发生改变时发送信号</td></tr><tr><td>doubleClicked(slice:QPieSlice)</td><td>双击切片时发送信号</td></tr><tr><td>hovered(slice:QPieSlice,state:bool)</td><td>光标在切片上悬停时发送信号,光标在切片上移动时 state值 是True，光标离开切片时 state 值是False</td></tr><tr><td>pressed(slice:QPieSlice)</td><td>在切片上按下鼠标按键时发送信号</td></tr><tr><td>released(slice; QPieSlice)</td><td>在切片上释放鼠标按键时发送信号</td></tr><tr><td>removed(slices: List[QPieSlice])</td><td>移除切片时发送信号，参数是移除的切片列表</td></tr><tr><td>sumChanged()</td><td>所有切片的值的和发生改变时发送信号</td></tr></tbody></table><h5 id="饼图切片-qpicslice的方法" tabindex="-1"><a class="header-anchor" href="#饼图切片-qpicslice的方法" aria-hidden="true">#</a> 饼图切片 QPicSlice的方法</h5><p>饼图由切片 QPieSlice构成,通常需要为切片设标签和值。</p><p>切片 QPieSlice 的常用方法如表所示</p><ul><li>主要方法是用setLabel(label:str)方法设置标签文宇;</li><li>用setValue(value; float)方法设置切片的值;</li><li>用setExploded(exploded;bool=True)方法设置切片是否是爆炸切片;</li><li>用setExplodeDistanceFactor(factor: float)方法设置爆炸距离;</li><li>用setLabelPosition(position: QPieSlice.LabelPosition)方法设置标的位置，参数可取以下值,对应值分别是0~3。 <ul><li>QPieSlice.LabelOutside</li><li>QPieSlice.LabelInsideHorizontal</li><li>QPieSlice.LabelIngideTangential</li><li>QPieSlice.LabelInsideNormal</li></ul></li></ul><table><thead><tr><th>QPieSlice的方法及参数类型</th><th>悦明</th></tr></thead><tbody><tr><td>setLabel(lnbel; str)</td><td>设置切片的标签文字</td></tr><tr><td>label()</td><td>获取切片的标签文字</td></tr><tr><td>serValue(value:float)</td><td>设置切片的值</td></tr><tr><td>value()</td><td>获取切片的值</td></tr><tr><td>percentage()</td><td>获取切片的百分比值</td></tr><tr><td>setPen(pen:Union[QPen,Qt.PenStyle,QColor])</td><td>设置钢笔</td></tr><tr><td>setBorderColor(color:Union[QColor,Qt.GlobulColor,str])</td><td>设置边框的颜色</td></tr><tr><td>setBorderWidth(width:int)</td><td>设置边框的宽度</td></tr><tr><td>setBrush(brush:Union[QBrush, Qt.BrushStyle, Qt.GlobalColor, QColor,QGradient,QImage,QPixmap])</td><td>设置画刷</td></tr><tr><td>setColor(color:Union[QColor,Qt.GlobalColor,str])</td><td>设填充颜色</td></tr><tr><td>setExploded(exploded:bool=True)</td><td>设置切片是否处于爆炸状态</td></tr><tr><td>isExploded()</td><td>获取切片是否处于爆炸状态</td></tr><tr><td>setExplodeDistanceFactor(factor:float)</td><td>设置爆炸距离</td></tr><tr><td>explodeDistanceFactor()</td><td>获取爆炸距离</td></tr><tr><td>setLabelVisible(visible:bool=True)</td><td>设置切片标签是否可见</td></tr><tr><td>isLabelVisible()</td><td>获取切片标签是否可见</td></tr><tr><td>setLabelArmLengthFactor(factor: float)</td><td>设置切片标签的长度</td></tr><tr><td>setLabelBrush(brush: Union[QBrush, Qt.BrushStyle, Qt.GlobalColor,QColor,QGradient,QImage,QPixmap])</td><td>设置切片标签画刷</td></tr><tr><td>setLabelColor(color:Union[QColor,Qt.GlobalColor,str])</td><td>设置切片标签的颜色</td></tr><tr><td>setLabelFont(font: Union[QFont,str,Sequence[str]])</td><td>设置切片标签的字体</td></tr><tr><td>setLabelPosition(position: QPieSlice. LabelPosition)</td><td>设置切片标签的位置</td></tr><tr><td>labelPosition()</td><td>获取切片标签的位置</td></tr><tr><td>series()</td><td>获取切片所在的数据序列</td></tr><tr><td>startAngle()</td><td>获取切片的起始角</td></tr><tr><td>angleSpan()</td><td>获取切片的跨度角</td></tr></tbody></table><h5 id="饼图切片-qpieslice-的信号" tabindex="-1"><a class="header-anchor" href="#饼图切片-qpieslice-的信号" aria-hidden="true">#</a> 饼图切片 QPieSlice 的信号</h5><p>饼图切片 QPieSlice 的信号如表所示可以通过信号的名称获取其发送的时机</p><table><thead><tr><th>QPieSlice的信号</th><th>QPieSlice的信号</th><th>QPieSlice的信号</th><th>QPieSlice的信号</th></tr></thead><tbody><tr><td>angleSpanChanged()</td><td>colorChanged()</td><td>labelColorChanged()</td><td>pressed()</td></tr><tr><td>borderColorChanged()</td><td>doubleClicked()</td><td>labelFontChanged()</td><td>released()</td></tr><tr><td>borderWidthChanged()</td><td>hovered(state:bool)</td><td>labelVisibleChanged()</td><td>penChanged()</td></tr><tr><td>brushChanged()</td><td>labelBrushChanged()</td><td>startAngleChangedl()</td><td>clicked()</td></tr><tr><td>valueChanged()</td><td>labelChanged()</td><td>percentageChanged()</td><td></td></tr></tbody></table><h5 id="饼图的应用实例" tabindex="-1"><a class="header-anchor" href="#饼图的应用实例" aria-hidden="true">#</a> 饼图的应用实例</h5><p>下面的程序根据季度销售额绘制圆环图，程序运行结果如图所示</p><figure><img src="`+i+`" alt="image-20230311233852518" tabindex="0" loading="lazy"><figcaption>image-20230311233852518</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/11 23:31</span>
<span class="token comment"># File_name: 02- 饼图的应用实例.py</span>


<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChartView<span class="token punctuation">,</span> QChart<span class="token punctuation">,</span> QPieSeries<span class="token punctuation">,</span> QPieSlice


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        chartView <span class="token operator">=</span> QChartView<span class="token punctuation">(</span><span class="token punctuation">)</span>
        V <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        V<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>
        pieSeries <span class="token operator">=</span> QPieSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>
        pieSeries<span class="token punctuation">.</span>setLabelsPosition<span class="token punctuation">(</span>QPieSlice<span class="token punctuation">.</span>LabelPosition<span class="token punctuation">.</span>LabelOutside<span class="token punctuation">)</span>
        pieSeries<span class="token punctuation">.</span>setPieStartAngle<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>
        pieSeries<span class="token punctuation">.</span>setPieEndAngle<span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">270</span><span class="token punctuation">)</span>

        first <span class="token operator">=</span> QPieSlice<span class="token punctuation">(</span><span class="token string">&quot;第1季度销售额&quot;</span><span class="token punctuation">,</span> <span class="token number">32.3</span><span class="token punctuation">)</span>  <span class="token comment"># 创建切片</span>

        second <span class="token operator">=</span> QPieSlice<span class="token punctuation">(</span><span class="token string">&quot;第2季度销售额&quot;</span><span class="token punctuation">,</span> <span class="token number">22.5</span><span class="token punctuation">)</span>  <span class="token comment"># 创建切片</span>
        second<span class="token punctuation">.</span>setExploded<span class="token punctuation">(</span>exploded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 爆炸切片</span>

        pieSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>first<span class="token punctuation">)</span>  <span class="token comment"># 添加切片</span>

        pieSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;第3季度销售额&quot;</span><span class="token punctuation">,</span> <span class="token number">46.3</span><span class="token punctuation">)</span>  <span class="token comment"># 添加切片</span>
        pieSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;第4季度销售额&quot;</span><span class="token punctuation">,</span> <span class="token number">52.7</span><span class="token punctuation">)</span>  <span class="token comment"># 添加切片</span>

        pieSeries<span class="token punctuation">.</span>setLabelsVisible<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 标签可见</span>

        pieSeries<span class="token punctuation">.</span>setHoleSize<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment"># 孔的尺寸</span>

        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>pieSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>

        pieSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>second<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条形图" tabindex="-1"><a class="header-anchor" href="#条形图" aria-hidden="true">#</a> 条形图</h4><p>条形图以竖直条或水平条显示数据,它由数据项 QBarSet 构成,每个数据项包含多个数据</p><p>条形图的数据序列有多种类型，竖直数据序列有 QBarSeries、QStackedBarSeries、QPercentBarSeries</p><p>水平数据序列有 QHorizontalBarSeries、QHorizontalStackedBarSeries和QHorizontalPercentBarSeries</p><p>它们并没有特有的方法和信号它们的方法和信号继承自抽象类 QAbstractBarSeries。</p><p>用QBarSeries、QStackedBarSeries、 QPercentBarSeries、 QHorizontalBarSeries、QHorizontalStackedBarSeries、QHorizontalPercentBarSeries 、QBarSet 创建实例对象的方法如下所示，其中 label 是数据项在图例中的名称。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QBarSeries<span class="token punctuation">,</span> QStackedBarSeries<span class="token punctuation">,</span> QPercentBarSeries
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QHorizontalBarSeries<span class="token punctuation">,</span> QHorizontalStackedBarSeries<span class="token punctuation">,</span> QHorizontalPercentBarSeries<span class="token punctuation">,</span> QBarSet

QBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStackedBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QPercentBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QHorizontalBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QHorizontalStackedBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QHorizontalPercentBarSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QBarSet<span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="抽象类qabstractbarseries" tabindex="-1"><a class="header-anchor" href="#抽象类qabstractbarseries" aria-hidden="true">#</a> 抽象类QAbstractBarSeries</h5><h6 id="抽象类qabstractbarseries-的方法" tabindex="-1"><a class="header-anchor" href="#抽象类qabstractbarseries-的方法" aria-hidden="true">#</a> 抽象类QAbstractBarSeries 的方法</h6><p>QAbstractBarSeries 的常用方法如表所示，主要方法介绍如下</p><ul><li>用append(set:QBarSet)方法添加数据项; <ul><li>用append(sets: Sequence[QBarSet])方法添加多个数据项;</li><li>用insert(index;int,set;QBarSet)方法根据索引插入数据项;</li></ul></li><li>用barSets()方法获取数据项列表; <ul><li>用count()方法获取数据项的个数;QChartView</li></ul></li><li>用remove(QBarSet)方法州除指定的数据项; <ul><li>用clear()方法删除所有的数据项。</li></ul></li><li>用setLabelsVisible(visible; bool= True)方法设置条形的标签是否可见;</li><li>用setLabelsFormat(format:str)方法设置标签的个数格式符中用”@value”表示条形的值;</li><li>用setLabelsPosition(QAbstractBarSeries。LabelsPosition)方法设置标签的位置，参数可以取以下值,值分别对应0~3。 <ul><li>QAbstractBarSeries.LabelsCenter</li><li>QAbstractBarSeries.LabelsInsideEnd</li><li>QAbstractBarSeries.LabelsInsideBase</li><li>QAbstractBarSeries.LabelsOutsideEnd</li></ul></li></ul><table><thead><tr><th>QAbstractBarSeries的方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>append(set: QBarSet)</td><td>添加数据项，成功则返回True</td></tr><tr><td>append(sets:Sequence[QBarSet])</td><td>添加多个数据项，成功则返回True</td></tr><tr><td>insert(index: int,set: QBarSet)</td><td>根据索引插入数据项，成功则返回True</td></tr><tr><td>barSets()</td><td>获取数据项列表List[QBarSet]</td></tr><tr><td>remove(set: QBarSet)</td><td>删除数据项，成功则返回 True</td></tr><tr><td>take(set: QBarSet)</td><td>移除数据项，成功则返回True</td></tr><tr><td>clear()</td><td>除所有数据项</td></tr><tr><td>count()</td><td>获取数据项的个数</td></tr><tr><td>setBarWidtb(width；flont)</td><td>设置条形的宽度</td></tr><tr><td>barWidth()</td><td>获取条形的宽度</td></tr><tr><td>setLabelsAngle(angle； flont)</td><td>设置标签的旋转角度</td></tr><tr><td>setLabelsVisible(visible；bool=True)</td><td>设置标签是否可见</td></tr><tr><td>isLabelsVisible()</td><td>获取标签是否可见</td></tr><tr><td>setLabelsPosition(QAbstractBarSeries. LabelsPosition)</td><td>设置标签的位置</td></tr><tr><td>setLabclsFormat(format;str)</td><td>设置标签的格式</td></tr><tr><td>setLabelsPrecision(precision:int)</td><td>设置标签的最大小数位数</td></tr></tbody></table><h6 id="抽象类qabstractbarseries-的信号" tabindex="-1"><a class="header-anchor" href="#抽象类qabstractbarseries-的信号" aria-hidden="true">#</a> 抽象类QAbstractBarSeries 的信号</h6><p>抽象类QAbstractBarSeries 的信号如表所示</p><table><thead><tr><th>QAbstractBarSeries的信号</th><th>说明</th></tr></thead><tbody><tr><td>barsetsAdded(barsets: List[QBarSet])</td><td>添加数据项时发送信号</td></tr><tr><td>barsetsRemoved(barsets: List[QBarSet])</td><td>移除数据项时发送信号</td></tr><tr><td>clicked(index:int,barset:QBarSet)</td><td>单击数据项时发送信号</td></tr><tr><td>doubleClicked(index:int,barset:QBarSet)</td><td>双击数据项时发送信号</td></tr><tr><td>pressed(index:int,barset:QBarSet)</td><td>在标签上按下鼠标按键时发送信号</td></tr><tr><td>released(index:int,barset:QBarSet)</td><td>在标签上释放鼠标按键时发送信号</td></tr><tr><td>hovered(status: bool,index: index,barset:QBarSet)</td><td>光标在数据项上移动时发送信号</td></tr><tr><td>labelsAngleChanged(angle: float)</td><td>标签角度发生改变时发送信号</td></tr><tr><td>labelsFormatChanged(fromat: str)</td><td>标签格式发生改变时发送信号</td></tr><tr><td>labelsPositionChanged(QAbstractBarSeries. LabelsPosition)</td><td>标签位置发生改变时发送信号</td></tr><tr><td>labelsPrecisionChanged(precision:int)</td><td>标签精度发生改变时发送信号</td></tr><tr><td>labelsVisibleChanged()</td><td>标签的可见性发生改变时发送信号</td></tr><tr><td>countChanged()</td><td>数据项的个数发生改变时发送信号</td></tr></tbody></table><h5 id="数据项qbarset" tabindex="-1"><a class="header-anchor" href="#数据项qbarset" aria-hidden="true">#</a> 数据项QBarSet</h5><h6 id="数据项qbarset的方法" tabindex="-1"><a class="header-anchor" href="#数据项qbarset的方法" aria-hidden="true">#</a> 数据项QBarSet的方法</h6><p>数据项QBarSet 中定义不同条目的值。</p><p>数据项的常用方法如表所示主要方法是:</p><ul><li>用append(value:float)方法或 append(values:Sequence[float])方法添加条目的值;</li><li>用insert(index:int,value:float)方法插入值;</li><li>用at(index:int)方法根据索引获取值</li></ul><table><thead><tr><th>QBarSet的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>append(value: float)</td><td>添加条目的值</td></tr><tr><td>append(values: Sequence[float])</td><td>添加多个条目的值</td></tr><tr><td>insert(index:int,value:float)</td><td>根据索引插人条目的值</td></tr><tr><td>at(index: int)</td><td>根据索引获取条目的值</td></tr><tr><td>count()</td><td>获取条目值的个数</td></tr><tr><td>sum()</td><td>获取所有条目的值的和</td></tr><tr><td>remove(index: int,count:int=1)</td><td>根据索引，移除指定数量的值</td></tr><tr><td>replace(index:int,value: float)</td><td>根据索引替换值</td></tr><tr><td>setBorderColor(color: Union[QColor,Qt.GlobalColor,str])</td><td>设置边框颜色</td></tr><tr><td>setPen(pen: Union[QPen,Qt.PenStyle,QColor])</td><td>设置钢笔</td></tr><tr><td>setBrush(brush:Union[QBrush,Qt.BrushStyle,QColor,Qt.GlobalColor,QGradient,QImage,QPixmap])</td><td>设置画刷</td></tr><tr><td>setColor(color;Union[QColor,Qt.GlobalColor,str])</td><td>设置颜色</td></tr><tr><td>setLabel(label: str)</td><td>设置数据项在图例中的名称</td></tr><tr><td>label()</td><td>获取数据项在图例中的名称</td></tr><tr><td>setLabelBrush(brush:Union[QBrush, Qt.BrushStyle,Qt.GlobalColor,QColor,QGradient,QImage,QPixmap])</td><td>设置标签画刷</td></tr><tr><td>setLabelColor(color:Union[QColor,Qt.GlobalColor.str])</td><td>设置标签颜色</td></tr><tr><td>setLabelFont(font: Union[QFont,str,Sequence[str]])</td><td>设置标签字体</td></tr><tr><td>setBarSelected(index: int,selected: bool)</td><td>根据索引选中数据项</td></tr><tr><td>setSelectedColor(color:Union[QColor.Qt.GlobalColor,str])</td><td>设置选中的数据项的颜色</td></tr><tr><td>selectedColor()</td><td>获取选中的数据项的颜色</td></tr><tr><td>selectAllBars()</td><td>选中所有的数据项</td></tr><tr><td>selectBar(index:int)</td><td>根据索引选中指定的数据项</td></tr><tr><td>selectBars(indexes: Sequence[int])</td><td>根据索引选中多个数据项</td></tr><tr><td>selectedBars()</td><td>获取选中的数据项的索引列表</td></tr><tr><td>deselectBars(indexes:Sequence[int])</td><td>根据索引取消选择</td></tr><tr><td>isBarSelected(index:int)</td><td>根据索引获取指定的数据项是否被选中</td></tr><tr><td>toggleSelection(indexes: Sequence[int])</td><td>根据索引切换选中状态</td></tr><tr><td>deselectBar(index:int)</td><td>根据索引取消选中状态</td></tr><tr><td>deselectAIlBars()</td><td>取消所有的选中状态</td></tr></tbody></table><h6 id="数据项qbarset的信号" tabindex="-1"><a class="header-anchor" href="#数据项qbarset的信号" aria-hidden="true">#</a> 数据项QBarSet的信号</h6><p>数据项QBarSet 的信号如表所示</p><table><thead><tr><th>QBarSet 的信号</th><th>说 明</th></tr></thead><tbody><tr><td>valuesAdded(index:int,count:int)</td><td>添加值发送信号</td></tr><tr><td>valuesRemoved(index: int,count:int)</td><td>移除值时发送信号</td></tr><tr><td>valueChanged(index:int)</td><td>值发生改变时发送信号</td></tr><tr><td>borderColorChanged(color:QColor)</td><td>边框颜色发生改变时发送信号</td></tr><tr><td>brushChanged()</td><td>画刷发生改变时发送信号</td></tr><tr><td>clicked(index:int)</td><td>单击鼠标时发送信号</td></tr><tr><td>colorChanged(color:QColor)</td><td>颜色发生改变时发送信号</td></tr><tr><td>doubleClicked(index:int)</td><td>双击鼠标时发送信号</td></tr><tr><td>hovered(status: bool,index: int)</td><td>光标在数据项上移动或移出时发送信号</td></tr><tr><td>labelBrushChanged()</td><td>标签画刷发生改变时发送信号</td></tr><tr><td>labelChanged()</td><td>标签发生改变时发送信号</td></tr><tr><td>labelColorChanged(color: QColor)</td><td>标签颜色发生改变时发送信号</td></tr><tr><td>labelFontChanged()</td><td>标签字体发生改变时发送信号</td></tr><tr><td>penChanged()</td><td>钢笔发生改变时发送信号</td></tr><tr><td>pressed(index: int)</td><td>按下鼠标按键时发送信号</td></tr><tr><td>released(index:int)</td><td>释放鼠标按键时发送信号</td></tr></tbody></table><h5 id="条形图的应用实例" tabindex="-1"><a class="header-anchor" href="#条形图的应用实例" aria-hidden="true">#</a> 条形图的应用实例</h5><p>下面的程序用条形图显示某公司 3 个团队的季度销售额，程序运行结果如图所示</p><figure><img src="`+l+`" alt="image-20230312021158180" tabindex="0" loading="lazy"><figcaption>image-20230312021158180</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/11 23:56</span>
<span class="token comment"># File_name: 03-条形图的应用实例.py</span>
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QGraphicsLinearLayout
<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCharts
<span class="token keyword">import</span> sys


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        V <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        chartView <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>
        V<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>
        chart <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>chart<span class="token punctuation">)</span>
        linearGraphicsLayout <span class="token operator">=</span> QGraphicsLinearLayout<span class="token punctuation">(</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 创建显示图表的空间</span>

        <span class="token comment"># 创建图表并添加到组件显示</span>
        linearGraphicsLayout<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>chart1 <span class="token operator">:=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        linearGraphicsLayout<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>chart2 <span class="token operator">:=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        linearGraphicsLayout<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>chart3 <span class="token operator">:=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># 设置图表标题</span>
        chart1<span class="token punctuation">.</span>setTitle<span class="token punctuation">(</span><span class="token string">&quot;公司2020年季度销售业绩&quot;</span><span class="token punctuation">)</span>
        chart2<span class="token punctuation">.</span>setTitle<span class="token punctuation">(</span><span class="token string">&quot;公司2021年季度销售业绩&quot;</span><span class="token punctuation">)</span>
        chart3<span class="token punctuation">.</span>setTitle<span class="token punctuation">(</span><span class="token string">&quot;公司2022年季度销售业绩&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 创建数据项</span>
        set1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;1组&quot;</span><span class="token punctuation">)</span>
        set2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;2组&quot;</span><span class="token punctuation">)</span>
        set3 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;3组&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 添加数据</span>
        set1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        set2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        set3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>barSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#(并排)</span>
        self<span class="token punctuation">.</span>stackedBarSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QStackedBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 堆叠)</span>
        self<span class="token punctuation">.</span>percentBarSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QPercentBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#(堆叠百分比)</span>
        <span class="token comment"># 数据序列添加数据项</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">,</span> set3<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stackedBarSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">,</span> set3<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>percentBarSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">,</span> set3<span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment"># 图表中添加数据序列</span>
        chart1<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barSeries<span class="token punctuation">)</span>
        chart2<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stackedBarSeries<span class="token punctuation">)</span>
        chart3<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>percentBarSeries<span class="token punctuation">)</span>

        <span class="token comment"># 创建X坐标轴,并</span>
        self<span class="token punctuation">.</span>barCategoryAxis1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barCategoryAxis2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barCategoryAxis3 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barCategoryAxis1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;并排&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barCategoryAxis2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;堆叠&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barCategoryAxis3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;堆叠占满&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment"># 图表设置Y轴</span>
        <span class="token comment"># chart1.setAxisX(self.barCategoryAxis1, self.barSeries)  # 图表设置X轴</span>
        <span class="token comment"># chart2.setAxisX(self.barCategoryAxis1, self.stackedBarSeries)  # 图表设置X轴</span>
        <span class="token comment"># chart3.setAxisX(self.barCategoryAxis2, self.percentBarSeries)  # 图表设置X轴</span>
        chart1<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis1<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>
        chart2<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis2<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>
        chart3<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis3<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis1<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stackedBarSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis2<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>percentBarSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis3<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis1<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stackedBarSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis2<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>percentBarSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis3<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>valueAxis1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>valueAxis1<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数值范围</span>
        self<span class="token punctuation">.</span>valueAxis2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>valueAxis2<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数值范围</span>
        self<span class="token punctuation">.</span>valueAxis3 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>valueAxis3<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数值范围</span>

        <span class="token comment"># 图表设置Y轴</span>
        <span class="token comment"># chart1.setAxisY(self.valueAxis1, self.barSeries)  # 图表设置Y轴</span>
        <span class="token comment"># chart2.setAxisY(self.valueAxis2, self.stackedBarSeries)  # 图表设置Y轴</span>
        <span class="token comment"># chart3.setAxisY(self.valueAxis3, self.percentBarSeries)  # 图表设置Y轴</span>
        chart1<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis1<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>
        chart2<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis2<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>
        chart3<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis3<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>

        <span class="token comment"># 设置数据标签可见</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>setLabelsVisible<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token comment"># 设置标签格式</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>setLabelsFormat<span class="token punctuation">(</span><span class="token string">&quot;@value万&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 设置标签位置</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>setLabelsPosition<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>LabelsPosition<span class="token punctuation">.</span>LabelsInsideEnd<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="蜡烛图" tabindex="-1"><a class="header-anchor" href="#蜡烛图" aria-hidden="true">#</a> 蜡烛图</h4><p>蜡烛图类似于股票k线图,能反映一段时间内的初始值、期末值和这段时间内的最大值和最小值。</p><p>蜡烛图的数据序列是 QCandlestickSeries,蜡烛序列中的数据项用QCandlestickSet定义。</p><p>用QCandlestickSeries 和 QCandlestickSet 创建实例对象的方法如下所示,其中:</p><ul><li>open和close分别是初始值和期末值,</li><li>high 和low 是这段时间内的最大值和最小值</li><li>timestamp 是时间戳</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QCandlestickSeries<span class="token punctuation">,</span> QCandlestickSet

QCandlestickSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QCandlestickSet<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> close<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QCandlestickSet<span class="token punctuation">(</span>timestamp<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="蜡烛图数据序列qcandlestickseries-的方法" tabindex="-1"><a class="header-anchor" href="#蜡烛图数据序列qcandlestickseries-的方法" aria-hidden="true">#</a> 蜡烛图数据序列QCandlestickSeries 的方法</h5><p>蜡烛图数据序列QCandlestickSeries 的方法如表所示,主要方法介绍如下</p><ul><li><p>用append(set;QCandlestickSet)和 append(sets; Sequence[QCandlestickSet])方法可以添加蜡烛数据;</p></li><li><p>用insert(index:int,set:QCandlestickSet)方法根据索引插人蜡烛数据;</p></li><li><p>用remove(set; QCandlestickSet)方法和 remove(sets; Sequence[QCandlestickSet])方法可以删除蜡烛数据;</p></li><li><p>用clear()方法除所有蜡烛数据:用count()方法获取蜡烛数据的个数;</p></li><li><p>用set()方法获取蜡烛数据列表</p></li><li><p>用setIncreasingColor(increasingColor: QColor)方法和 setDecreasingColor(decreasingColor:QColor)方法分别设置上涨和下跌时的颜色。</p></li><li><p>用setCapsVisible(capsVisible:bool=False)方法设置最大值和最小值的帽线是否可见;</p></li><li><p>用setCapsWidth(capsWidth:float)方法设置帽线相对于蜡烛的宽度，参数取值范围是 0~1。</p></li></ul><table><thead><tr><th>QCandlestickSeries的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>append(set:QCandlestickSet)</td><td>bool</td><td>添加蜡烛数据</td></tr><tr><td>append(sets: Sequence[QCandlestickSet])</td><td>b001</td><td>添加多个蜡烛数据</td></tr><tr><td>insert(index:int,set: QCandlestickSet)</td><td>bo01</td><td>根据索引插人蜡烛数据项</td></tr><tr><td>sets()</td><td>List[QCandlestickSetJ</td><td>获取蜡烛数据项列表</td></tr><tr><td>clear()</td><td>None</td><td>删除所有蜡烛数据项</td></tr><tr><td>count()</td><td>int</td><td>获取蜡烛数据的数量</td></tr><tr><td>remove(set:QCandlestickSet)</td><td>bool</td><td>删除蜡烛数据</td></tr><tr><td>remove(sets:Sequence[QCandlestickSet])</td><td>bool</td><td>删除多个蜡烛数据</td></tr><tr><td>take(set:QCandlestickSet)</td><td>b.01</td><td>移除蜡烛数据</td></tr><tr><td>setBodyOutlineVisible(bodyOutlineVisible:bool)</td><td>None</td><td>设置蜡烛轮廓线是否可见</td></tr><tr><td>setBodyWidth(bodyWidth: float)</td><td>None</td><td>设置蜡烛相对宽度，取值范围是0～1</td></tr><tr><td>bodyWidth()</td><td>float</td><td>获取蜡烛宽度</td></tr><tr><td>setBrush(brush: Union[QBrush, QColor, Qt.GlobalColor, QGradient, QImage, QPixmap])</td><td>None</td><td>设置画刷</td></tr><tr><td>brush()</td><td>QBrush</td><td>获取画刷</td></tr><tr><td>setCapsVisible(capsVisible: bool = False)</td><td>None</td><td>设置最大值和最小值的帽线是否可见</td></tr><tr><td>capsVisible()</td><td>bool</td><td>获取帽线是否可见</td></tr><tr><td>setCapsWidth(capsWidth:float)</td><td>None</td><td>设置帽线相对于蜡烛的宽度，取值范 围是0～1</td></tr><tr><td>capsWidth()</td><td>float</td><td>获取帽线的相对宽度</td></tr><tr><td>setDecreasingColor(decreasingColor: QColor)</td><td>None</td><td>设置下跌时的颜色</td></tr><tr><td>decreasingColor()</td><td>QColor</td><td>获取下跌时的颜色</td></tr><tr><td>setIncreasingColor(increasingColor: QColor)</td><td>None</td><td>设置上涨时的颜色</td></tr><tr><td>increasingColor()</td><td>QColor</td><td>获取上涨时的颜色</td></tr><tr><td>setMaximumColumnWidth(float)</td><td>None</td><td>设置最大列宽(像素),设置负值没有 最大列宽限制</td></tr><tr><td>maximumColumnWidth()</td><td>float</td><td>获取最大宽度</td></tr><tr><td>setMinimumColumnWidth(float)</td><td>None</td><td>设置最小列宽(像素)，设置负值没有 最小列宽限制</td></tr><tr><td>minimumColumnWidth()</td><td>float</td><td>获取最小宽度</td></tr><tr><td>setPen(pen: Union[QPen, Qt.PenStyle,QColor])</td><td>None</td><td>设置钢笔</td></tr><tr><td>pen()</td><td>QPen</td><td>欢取钢笔</td></tr></tbody></table><h5 id="蜡烛图数据序列qcandlestickseries-的信号" tabindex="-1"><a class="header-anchor" href="#蜡烛图数据序列qcandlestickseries-的信号" aria-hidden="true">#</a> 蜡烛图数据序列QCandlestickSeries 的信号</h5><p>蜡烛图数据序列QCandlestickSeries 的信号如表所示</p><table><thead><tr><th>QCandlestickSeries的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>bodyOutlineVisibilityChanged()</td><td>轮廓发生改变时发送信号</td></tr><tr><td>bodyWidthChanged()</td><td>宽度发生改变时发送信号</td></tr><tr><td>brushChanged()</td><td>画刷发生改变时发送信号</td></tr><tr><td>candlestickSetsAdded(sets: List[QCandlestickSet])</td><td>添加蜡烛数据时发送信号</td></tr><tr><td>candlestickSetsRemoved(sets: List[QCandlestickSet])</td><td>删除蜡烛数据时发送信号</td></tr><tr><td>capsVisibilityChanged()</td><td>最大值和最小值可见性发生改变时发送信号</td></tr><tr><td>capsWidtbChanged()</td><td>最大值和最小值的宽度发生改变时发送信号</td></tr><tr><td>clicked(set: QCandlestickSet)</td><td>单击时发送信号</td></tr><tr><td>countChanged()</td><td>蜡烛数据发生改变时发送信号</td></tr><tr><td>decreasingColorChanged()</td><td>下跌时的颜色发生改变时发送信号</td></tr><tr><td>doubIeClicked(set: QCandlestickSet)</td><td>双击鼠标时发送信号</td></tr><tr><td>hovered(status; bool,set: QCandlestickSet)</td><td>光标在蜡烛数据上移动或移开蜡烛数据时发送 信号</td></tr><tr><td>increasingColorChanged()</td><td>上涨时的颜色发生改变时发送信号</td></tr><tr><td>maximumColumnWidthChanged()</td><td>列的最大宽度发生改变时发送信号</td></tr><tr><td>minimumColumnWidthChanged()</td><td>列的最小宽度发生改变时发送信号</td></tr><tr><td>penChanged()</td><td>钢笔发生改变时发送信号</td></tr><tr><td>pressed(set:QCandlestickSet)</td><td>在蜻烛数据上按下鼠标按键时发送信号</td></tr><tr><td>released(set: QCandlestickSet)</td><td>在蜡烛数据上释放鼠标按键时发送信号</td></tr></tbody></table><h5 id="蜡烛数据项-qcandlestickset-的方法" tabindex="-1"><a class="header-anchor" href="#蜡烛数据项-qcandlestickset-的方法" aria-hidden="true">#</a> 蜡烛数据项 QCandlestickSet 的方法</h5><p>蜡烛数据项 QCandlestickSet 的常用方法如表所示</p><ul><li>用setOpen(open:float)和 setClose(close:float)方法分别设置初始值和期末值;</li><li>用setHigh(high: float)和setLow(low;float)方法设置最高值和最低值;</li><li>用setTimestamp(timestamp: float)方法设置时间戳</li></ul><table><thead><tr><th>QCandlestickSet的方法及参数类型</th><th>返回值的类型</th><th>说 明</th></tr></thead><tbody><tr><td>setOpen(open:float)</td><td>None</td><td>设置初始值</td></tr><tr><td>open()</td><td>float</td><td>获取初始值</td></tr><tr><td>setClose(close:float)</td><td>None</td><td>设置期末值</td></tr><tr><td>close()</td><td>float</td><td>获取期末值</td></tr><tr><td>setHigh(high: float)</td><td>None</td><td>设置最高值</td></tr><tr><td>high()</td><td>float</td><td>获取最高值</td></tr><tr><td>setLow(low:float)</td><td>None</td><td>设置最低值</td></tr><tr><td>low()</td><td>float</td><td>获取最低值</td></tr><tr><td>setTimestamp(timestamp:float)</td><td>None</td><td>设置时间戳</td></tr><tr><td>timestamp()</td><td>float</td><td>获取时间截</td></tr><tr><td>setPen(pen:Union[QPen,Qt.PenStyle,QColor])</td><td>None</td><td>设置钢笔</td></tr><tr><td>pen()</td><td>QPen</td><td>获取钢笔</td></tr><tr><td>setBrush(brush:Union[QBrush,Qt.GlobalColor,Qt.BrushStyle,QColor,QGradient,QImage,QPixmap])</td><td>None</td><td>设置画刷</td></tr><tr><td>brush()</td><td>QBrush</td><td>获取画刷</td></tr></tbody></table><h5 id="蜡烛数据项qcandlestickset-的信号" tabindex="-1"><a class="header-anchor" href="#蜡烛数据项qcandlestickset-的信号" aria-hidden="true">#</a> 蜡烛数据项QCandlestickSet 的信号</h5><p>蜡烛数据项QCandlestickSet 的信号如表所示</p><table><thead><tr><th>QCandlestickSet 的信号</th><th>说明</th></tr></thead><tbody><tr><td>brushChanged()</td><td>画刷发生改变时发送信号</td></tr><tr><td>clicked()</td><td>在蜡烛数据上单击鼠标时发送信号</td></tr><tr><td>closeChanged()</td><td>期末值发生改变时发送信号</td></tr><tr><td>doubleClicked()</td><td>在蜡烛数据上双击鼠标时发送信号</td></tr><tr><td>highChanged()</td><td>最高值发生改变时发送信号</td></tr><tr><td>hovered(status: bool)</td><td>光标在蜡烛数据上移动或移开蜡烛数据时发送信号</td></tr><tr><td>lowChanged()</td><td>最低值发生改变时发送信号</td></tr><tr><td>openChanged()</td><td>初始值发生改变时发送信号</td></tr><tr><td>penChanged()</td><td>钢笔发生改变时发送信号</td></tr><tr><td>pressed()</td><td>在蜡烛数据上按下鼠标按键时发送信号</td></tr><tr><td>released()</td><td>在蜡烛数据上释放鼠标按键时发送信号</td></tr><tr><td>timestampChanged()</td><td>时间戳发生改变时发送信号</td></tr></tbody></table><h4 id="箱线图" tabindex="-1"><a class="header-anchor" href="#箱线图" aria-hidden="true">#</a> 箱线图</h4><p>箱线图是一种用来显示一组数据分散情况的统计图，因形状如箱子而得名。箱线图的示意图如图 所示。</p><p>箱线图的计算方法是,找出一组数据的 5 个特征值，特征值(从下到上)分别是</p><ul><li>最小值</li><li>Q1(下四分位数)</li><li>中位数</li><li>Q3(上四分位数)</li><li>最大值。</li></ul><p>将这5 个特征值描绘在一条竖直线上,将最小值和 Q1 连接起来,利用Q1中位数Q3 分别作平行等长的线段,然后连接两个四分位数构成箱子,再连接两个极值点与箱子,形成箱线图。</p><p>中位数、Q1 和 Q3 以及最大值、最小值的概念如下:</p><ul><li>中位数:将所有数值从小到大排列,如果数据的个数是奇数,则取中间一个值作为中位数,之后中间的值在计算 Q1 和 Q3时不再使用，如果数据的个数是偶数则取中间两个数的平均数作为中位数,这两个数在计算 Q1和 Q3 时继续使用</li><li>Q1:中位数将所有数据分成两部分,最小值到中位数的部分按取中位数的方法再取中位数作为 Q1。</li><li>Q3:同Q1 的取法取中位数到最大值的中位数</li><li>最大值和最小值:取四分位数间距 IQR=Q3-Q1,所有不在(Q1-whisker * IQR， Q3+whisker *IQR)区间内的数为异常值,其中whisker 值一般取15,剩下的值中最大的为最大值,最小的为最小值。</li></ul><p>箱线图的数据序列是QBoxPlotSeries，箱线图的数据项是QBoxSet。</p><p>用QBoxPlotSeries和QBoxSet创建实例对象的方法如下所示，其中</p><ul><li>label是数据项的标签，le(lowerextreme)是最小值</li><li>lq(lower quartile)是下四分位数</li><li>m(median)是中位数</li><li>uq(upper quartile)是上四分位数</li><li>ue(upper extreme)是最大值。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QBoxPlotSeries<span class="token punctuation">,</span> QBoxSet

QBoxPlotSeries<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QBoxSet<span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QBoxSet<span class="token punctuation">(</span>le<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> lq<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> uq<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> ue<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="箱线图数据序列-oboxplotseries-的方法" tabindex="-1"><a class="header-anchor" href="#箱线图数据序列-oboxplotseries-的方法" aria-hidden="true">#</a> 箱线图数据序列 OBoxPlotSeries 的方法</h5><p>箱线图数据序列QBoxPlotSeries 的常用方法如表所示，主要方法:</p><ul><li>用append(box:QBoxSet)或append(boxes: Sequence[QBoxSet])方法添加数据项;</li><li>用insert(index:int,box:QBoxSet)方法根据索引插人数据项。</li></ul><table><thead><tr><th>QBoxPlotSeries的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>append(box:QBoxSet)</td><td>bool</td><td>添加箱线图数据项</td></tr><tr><td>append(boxes:Sequence[QBoxSet])</td><td>bo01</td><td>添加多个箱线图数据项</td></tr><tr><td>insert(index; int,box:QBoxSet)</td><td>bool</td><td>根据索引插入数据项</td></tr><tr><td>boxSets()</td><td>List[QBoxSet]</td><td>获取箱线图数据项列表</td></tr><tr><td>clear()</td><td>None</td><td>清除所有箱线图数据项</td></tr><tr><td>count()</td><td>int</td><td>获取箱线图数据项的个数</td></tr><tr><td>setBoxOutlineVisible(visible:bool)</td><td>None</td><td>设置轮廓是否可见</td></tr><tr><td>boxOutlineVisible()</td><td>b001</td><td>获取轮廓是否可见</td></tr><tr><td>setBoxWidth(width:float)</td><td>None</td><td>设置箱形宽度</td></tr><tr><td>boxWidth()</td><td>float</td><td>获取箱形宽度</td></tr><tr><td>setBrush(brush:Union[QBrush,Qt.BrushStyle, Qt.GlobalColor, QColor, QGradient, QImage, QPixmap])</td><td>None</td><td>设置画刷</td></tr><tr><td>brush()</td><td>QBrush</td><td>获取画刷</td></tr><tr><td>setPen(pen: Union[QPen,Qt.PenStyle,QColor])</td><td>None</td><td>设置钢笔</td></tr><tr><td>pen()</td><td>QPen</td><td>获取钢笔</td></tr><tr><td>remove(box:QBoxSet)</td><td>bo01</td><td>删除箱线图数据项</td></tr><tr><td>take(box: QBoxSet)</td><td>bo0l</td><td>移除箱线图数据项</td></tr></tbody></table><h5 id="箱线图数据序列qboxplotseries的信号" tabindex="-1"><a class="header-anchor" href="#箱线图数据序列qboxplotseries的信号" aria-hidden="true">#</a> 箱线图数据序列QBoxPlotSeries的信号</h5><p>箱线图数据序列 QBoxPlotSeries 的信号如表所示，发送时机可参考前面的内容。</p><table><thead><tr><th>QBoxPlotSeries的信号</th><th>说明</th></tr></thead><tbody><tr><td>countChanged()</td><td>当系列中的盒须物品数量发生变化时，会发出此信号。</td></tr><tr><td>boxWidthChanged()</td><td>当盒须物品的宽度发生变化时，会发出此信号。</td></tr><tr><td>brushChanged()</td><td>当用于填充长方体和胡须项的长方体的笔刷发生变化时，会发出此信号。</td></tr><tr><td>clicked(QBoxSet)</td><td>当用户单击图表中框集指定的框和胡须项时，会发出此信号。</td></tr><tr><td>penChanged()</td><td>当用于绘制长方体线条和胡须项目的笔发生变化时，会发出此信号。</td></tr><tr><td>doubleClicked(QBoxSet)</td><td>当用户双击图表中框集指定的框和胡须项时，会发出此信号。</td></tr><tr><td>boxsetsAdded(sets: List[QBoxSet])</td><td>当将集合指定的长方体和胡须项列表添加到系列中时，会发出此信号。</td></tr><tr><td>boxsetsRemoved(List[QBoxSet])</td><td>当将集合指定的长方体和胡须项列表添加到系列中时，会发出此信号。</td></tr><tr><td>hovered(status:bool,QBoxSet)</td><td>当鼠标悬停在图表中框集指定的框和胡须项目上时，会发出此信号。当鼠标移动到项目上时，状态变为真，而当鼠标再次移开时，状态则变为假。</td></tr><tr><td>pressed(boxset:QBoxSet)</td><td>当用户单击图表中框集指定的框和胡须项目并按住鼠标按钮时，会发出此信号。</td></tr><tr><td>released(boxset:QBoxSet)</td><td>当用户在图表中的框集指定的框和胡须项目上释放鼠标时，会发出此信号。</td></tr><tr><td>boxOutlineVisibilityChanged()</td><td>当框轮廓可见性更改时，会发出此信号。</td></tr></tbody></table><h5 id="箱线图数据项qboxset的方法" tabindex="-1"><a class="header-anchor" href="#箱线图数据项qboxset的方法" aria-hidden="true">#</a> 箱线图数据项QBoxSet的方法</h5><p>箱线图数据项QBoxSet 的常用方法如表所示,主要方法:</p><ul><li>用append(value:float)方法或 append(values: Sequence[float])方法添加数据;</li><li>用setValue(index; int,value:float)方法根据索引设置数据</li></ul><table><thead><tr><th>QBoxSet的方法及参数类型</th><th>返回值的类型</th><th>说:明</th></tr></thead><tbody><tr><td>append(value:float)</td><td>None</td><td>添加数据</td></tr><tr><td>append(values:Sequence[float])</td><td>None</td><td>添加多个数据</td></tr><tr><td>setValue(index: int,value:float)</td><td>None</td><td>根据索引设置数据的值</td></tr><tr><td>at(index:int)</td><td>float</td><td>根据索引获取数据的值</td></tr><tr><td>clear()</td><td>None</td><td>清除所有数据</td></tr><tr><td>count()</td><td>int</td><td>获取数据的个数</td></tr><tr><td>setLabel(label: str)</td><td>None</td><td>设置标签</td></tr><tr><td>label()</td><td>Str</td><td>获取标签</td></tr><tr><td>setBrush(brush: Union[QBrush, Qt.GlobalColor, Qt.BrushStyle,QColor,QGradient,QImage,QPixmap])</td><td>None</td><td>设置画刷</td></tr><tr><td>brush()</td><td>QBrush</td><td>获取画刷</td></tr><tr><td>setPen(pen: Union[QPen,Qt.PenStyle,QColor])</td><td>None</td><td>设置钢笔</td></tr><tr><td>pen()</td><td>QPen</td><td>获取钢笔</td></tr></tbody></table><h5 id="箱线图数据项qboxset-的信号" tabindex="-1"><a class="header-anchor" href="#箱线图数据项qboxset-的信号" aria-hidden="true">#</a> 箱线图数据项QBoxSet 的信号</h5><p>和箱线图数据项 QBoxSet 的信号如表所示，发送时机可参考前面的内容。</p><table><thead><tr><th>QBoxSet的信号</th><th>说明</th></tr></thead><tbody><tr><td>brushChanged()</td><td>当长方体和胡须项的笔刷更改时，会发出此信号。</td></tr><tr><td>doubleClicked()</td><td>当用户双击框和胡须项目时，会发出此信号。</td></tr><tr><td>hovered(status:bool)</td><td>当鼠标悬停在图表中的框和胡须项目上时，会发出此信号。当鼠标移动到项目上时，状态变为真，而当鼠标再次移开时，状态则变为假。</td></tr><tr><td>penChanged()</td><td>当方框和胡须项目的笔发生变化时，会发出此信号。</td></tr><tr><td>valueChanged(index)</td><td>当修改索引指定的框和胡须项的值时，会发出此信号。</td></tr><tr><td>valuesChanged()</td><td>当长方体和胡须项的多个值发生变化时，会发出此信号。</td></tr><tr><td>pressed()</td><td>当用户单击图表中的框和胡须项目并按住鼠标按钮时，会发出此信号。</td></tr><tr><td>released()</td><td>当用户释放对框和胡须项目的鼠标按压时，会发出此信号。</td></tr><tr><td>cleared()</td><td>当长方体和胡须项的所有值都设置为0时，将发出此信号。</td></tr><tr><td>clicked()</td><td>当用户单击图表中的框和胡须项时，会发出此信号。</td></tr></tbody></table><h4 id="极坐标图" tabindex="-1"><a class="header-anchor" href="#极坐标图" aria-hidden="true">#</a> 极坐标图</h4><p>绘制极坐标图需要用QPolarChart;它是从QChart 继承而来的。</p><p>用QPolarChart 创建极坐标图实例的方法如下,其中parent 是继承自QGraphicsItem 的实例对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QPolarChart

QPolarChart<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> wFlags<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>WindowType <span class="token operator">=</span> Default<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WindowFlags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在QPloarChart中可以添加QLineSeries、QSplineSeries、QScatterSeries和QAreaSeries 数据序列，不过添加坐标轴的方法有所不同 <ul><li>用addAxis(axisQAbstractAxis，polarOrientation: PolarOrientation)方法添加标轴，其中参数polarOrientation 确定坐标轴的方法可以取: <ul><li>QPolarChart.PolarOrientationRadial(半径方向)</li><li>QPolarChart.PolarOrientationAngular(角度方向);</li></ul></li></ul></li><li>用静态方法axisPolarOrientation(axis:QAbstractAxis)可以获取指定的坐标轴的方向。极坐标的0方法是在图表的正上面,顺时针方向为正。</li></ul><p>下面的程序用极坐标绘制一个渐开线图表，分别用折线图和散点图添加两条渐开线,渐开线的方程是<code>r=(r0** 2+(pi* rO*angle/180)** 2)**05</code>其中r是基圆半径。</p><figure><img src="`+c+`" alt="image-20230312172958181" tabindex="0" loading="lazy"><figcaption>image-20230312172958181</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 17:18</span>
<span class="token comment"># File_name: 05-极坐标图与实例.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChartView<span class="token punctuation">,</span> QPolarChart<span class="token punctuation">,</span> QLineSeries<span class="token punctuation">,</span> QScatterSeries<span class="token punctuation">,</span> QValueAxis
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token keyword">import</span> sys<span class="token punctuation">,</span> math


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        V <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        chartView <span class="token operator">=</span> QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        V<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>

        chart <span class="token operator">=</span> QPolarChart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建极坐标图表</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 图表控件中设置图表</span>
        chart<span class="token punctuation">.</span>setTitle<span class="token punctuation">(</span><span class="token string">&quot;极坐标图表&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置图表的标题</span>
        lineSeries <span class="token operator">=</span> QLineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建折线数据序列</span>
        lineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;折线&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置数据序列的名称</span>
        scatterSeries <span class="token operator">=</span> QScatterSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建散点数据序列</span>
        scatterSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;散点&quot;</span><span class="token punctuation">)</span>

        r0 <span class="token operator">=</span> <span class="token number">10</span>
        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span><span class="token punctuation">(</span>r0 <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">*</span> r0 <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>angle<span class="token punctuation">,</span> r<span class="token punctuation">)</span>  <span class="token comment"># 数据序列中添加数据</span>

        r0 <span class="token operator">=</span> <span class="token number">12</span>
        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span><span class="token punctuation">(</span>r0 <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">*</span> r0 <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>angle<span class="token punctuation">,</span> r<span class="token punctuation">)</span>  <span class="token comment"># 数据序列中添加数据</span>

        chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>scatterSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>

        axis_angle <span class="token operator">=</span> QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>
        axis_angle<span class="token punctuation">.</span>setTitleText<span class="token punctuation">(</span><span class="token string">&quot;Angle&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的标题</span>
        axis_angle<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span>
        axis_angle<span class="token punctuation">.</span>setLinePenColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>black<span class="token punctuation">)</span>
        axis_radius <span class="token operator">=</span> QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>
        axis_radius<span class="token punctuation">.</span>setTitleText<span class="token punctuation">(</span><span class="token string">&quot;Distance&quot;</span><span class="token punctuation">)</span>
        axis_radius<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>
        axis_radius<span class="token punctuation">.</span>setGridLineColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>

        chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>axis_angle<span class="token punctuation">,</span> QPolarChart<span class="token punctuation">.</span>PolarOrientation<span class="token punctuation">.</span>PolarOrientationAngular<span class="token punctuation">)</span>  <span class="token comment"># 添加坐标轴</span>
        chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>axis_radius<span class="token punctuation">,</span> QPolarChart<span class="token punctuation">.</span>PolarOrientation<span class="token punctuation">.</span>PolarOrientationRadial<span class="token punctuation">)</span>  <span class="token comment"># 添加坐标轴</span>

        lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>axis_angle<span class="token punctuation">)</span>
        lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>axis_radius<span class="token punctuation">)</span>
        scatterSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>axis_angle<span class="token punctuation">)</span>
        scatterSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>axis_radius<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图表的坐标轴" tabindex="-1"><a class="header-anchor" href="#图表的坐标轴" aria-hidden="true">#</a> 图表的坐标轴</h3><p>要正确显示数据序列所表示的图表,需要给数据序列关联坐标轴,根据数据序列的类型关联对应类型的坐标轴。</p><p>图表的坐标轴类型和继承关系如图 所示,坐标轴的类型有:</p><ul><li>QValueAxis</li><li>QLogValueAxis</li><li>QBarCategoryAxis</li><li>QCategoryAxis</li><li>QDataTimeAxis</li></ul><p>它们都是从QAbstractAxis 继承而来的.</p><figure><img src="`+d+`" alt="image-20230312173321607" tabindex="0" loading="lazy"><figcaption>image-20230312173321607</figcaption></figure><h4 id="qabstractaxis" tabindex="-1"><a class="header-anchor" href="#qabstractaxis" aria-hidden="true">#</a> QAbstractAxis</h4><p>QAbstractAxis是抽象类,不能直接使用，需要用其子类定义坐标轴。</p><h5 id="qabstractaxis方法" tabindex="-1"><a class="header-anchor" href="#qabstractaxis方法" aria-hidden="true">#</a> QAbstractAxis方法</h5><p>QAbstractAxis定义子类的公共属性和信号,其常用方法如表所示。</p><table><thead><tr><th>QAbstractAxis的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>show()、hide()</td><td>显示坐标轴、隐藏坐标轴</td></tr><tr><td>setVisible(visible: bool=True)</td><td>设置坐标轴是否可见</td></tr><tr><td>isVisible()</td><td>获取坐标轴是否可见</td></tr><tr><td>setMin(Any)、setMax(Any)、setRange(Any.Any)</td><td>设置坐标轴的最小和最大值</td></tr><tr><td>setReverse(reverse:bool=True)</td><td>设置坐标轴的方向颠倒</td></tr><tr><td>isReverse()</td><td>获取是否颠倒</td></tr><tr><td>setTitleText(str)</td><td>设置坐标轴标题的名称</td></tr><tr><td>setTitleVisible(visible=True)</td><td>设置坐标轴标题的可见性</td></tr><tr><td>isTitleVisible()</td><td>获取标题是否可见</td></tr><tr><td>setTitleBrush(brush: Union[QBrush, Qt.BrushStyle,Qt.GlobalColor,QColor,QGradient,QImage,QPixmap]) ..</td><td>设置标题的画刷</td></tr><tr><td>setTitleFont(font:Union[QFont,str,Sequence[str]])</td><td>设置标题的字体</td></tr><tr><td>setGridLineColor(color:Union[QColor,QL.GlobalColor.str])</td><td>设置主网格线的颜色</td></tr><tr><td>setGridLinePen(pen: Union[QPen,Qt.PenStyle.QColor])</td><td>设置主网格线的钢笔</td></tr><tr><td>setGridLineVisible(visible:bool=True)</td><td>设置主网格线是否可见</td></tr><tr><td>isGridLineVisible()</td><td>获取主网格线是否可见</td></tr><tr><td>setMinorGridlLineColor(color:Union[QColor，Qt.GlobalColor， str])</td><td>设置次网格线的颜色</td></tr><tr><td>setMinorGridLinePen(QPen)</td><td>设置次网格线的颜色</td></tr><tr><td>setMinorGridLineVisible(visible:bool=True)</td><td>设置次网格线是否可见</td></tr><tr><td>isMinorGridLineVisible()</td><td>获取次网格线是否可见</td></tr><tr><td>setLabelsAngle(int)</td><td>设置刻度标签的旋转角度</td></tr><tr><td>setLabelsBrush(Union[QBrush,QColor,Qt.GlobalColor, QGradient])</td><td>设置刻度标签的画刷</td></tr><tr><td>setLabelsColor(color:Union[QColor,Qt.GlobalColor,strJ)</td><td>设置刻度标签的颜色</td></tr><tr><td>setLabelsEditable(editable;bool=True)</td><td>设置标签是否可编辑</td></tr><tr><td>setLabelsFont(font;Union[QFont,str,Sequence[str]])</td><td>设置标签的字体</td></tr><tr><td>setLabelsVisible(visible;bool=True)</td><td>设置标签是否可见</td></tr><tr><td>setTruncateLabels(truncateLabels:bool=True)</td><td>当无法全部显示标签时，设置是否可 截断显示</td></tr><tr><td>setLinePen(pen:Union[QPen,Qt.PenStyle,QColor])</td><td>设置坐标轴的线条的钢笔</td></tr><tr><td>setLinePenColor(color:Union[QColor,Qt.GlobalColor,str])</td><td>设置坐标轴的线条的钢笔颜色</td></tr><tr><td>setLineVisible(visible:bool=True)</td><td>设置坐标轴的线条是否可见</td></tr><tr><td>isLineVisible()</td><td>获取坐标轴的线条是否可见</td></tr><tr><td>setShadesBorderColor(color: Union[QColor, Qt.GlobalColor, str])</td><td>设置阴影边框的颜色</td></tr><tr><td>setShadesBrush(Union[QBrush, QColor, Qt.GlobalColor, QGradient])</td><td>设置阴影的画刷</td></tr><tr><td>setShadesColor(color:Union[QColor,Qt.GlobalColor,str])</td><td>设置阴影的颜色</td></tr><tr><td>setShadesPen(pen:Union[QPen,Qt.PenStyle,QColor])</td><td>设置阴影的钢笔</td></tr><tr><td>setShadesVisible(visible:bool=True)</td><td>设置阴影是否可见</td></tr><tr><td>alignment()</td><td>获取对齐方式 Qt.Alignment</td></tr></tbody></table><h5 id="qabstractaxis-的信号" tabindex="-1"><a class="header-anchor" href="#qabstractaxis-的信号" aria-hidden="true">#</a> QAbstractAxis 的信号</h5><p>QAbstractAxis 的信号如表所示通过名称可知其表达的含义和信号发送的时机。</p><table><thead><tr><th>QAbstractAxis的信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>colorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当轴的颜色变为颜色时，会发出此信号。</td></tr><tr><td><code>gridLineColorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当用于绘制网格线的笔的颜色变为颜色时，会发出此信号。</td></tr><tr><td><code>gridLinePenChanged(pen)</code></td><td>pen – PySide6.QtGui.QPen</td><td>当用于绘制网格线的笔变为笔时，会发出此信号。</td></tr><tr><td><code>gridVisibleChanged(visible)</code></td><td>visible – bool</td><td>当轴的网格线的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>labelsAngleChanged(angle)</code></td><td>angle – int</td><td>当轴标签的角度更改为角度时，会发出此信号。</td></tr><tr><td><code>labelsBrushChanged(brush)</code></td><td>brush – PySide6.QtGui.QBrush</td><td>当用于绘制轴标签的画笔更改为画笔时，会发出此信号。</td></tr><tr><td><code>labelsColorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当轴标签的颜色更改为颜色时，会发出此信号。</td></tr><tr><td><code>labelsEditableChanged(editable)</code></td><td>editable – bool</td><td>当标签的可编辑状态发生变化时，会发出此信号。</td></tr><tr><td><code>labelsFontChanged(pen)</code></td><td>pen – PySide6.QtGui.QFont</td><td>当轴标签的字体更改为字体时，会发出此信号。</td></tr><tr><td><code>labelsTruncatedChanged(labelsTruncated)</code></td><td><strong>labelsTruncated</strong> – bool</td><td>该信号在两种情况下发出；<br>当轴从具有一个或多个截断标签改变为没有截断标签时<br>以及当轴从没有截断标签改变成具有一个或者多个截断的标签时。当前状态由标签Truncated标识。</td></tr><tr><td><code>labelsVisibleChanged(visible)</code></td><td>visible – bool</td><td>当轴标签的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>linePenChanged(pen)</code></td><td>pen – PySide6.QtGui.QPen</td><td>当用于绘制轴线的笔变为笔时，会发出此信号。</td></tr><tr><td><code>lineVisibleChanged(visible)</code></td><td>visible – bool</td><td>当轴线的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>minorGridLineColorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当用于绘制次要网格线的笔的颜色变为颜色时，会发出此信号。</td></tr><tr><td><code>minorGridLinePenChanged(pen)</code></td><td>pen – PySide6.QtGui.QPen</td><td>当用于绘制次要网格线的笔变为笔时，会发出此信号。</td></tr><tr><td><code>minorGridVisibleChanged(visible)</code></td><td>visible – bool</td><td>当轴的次网格线的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>reverseChanged(reverse)</code></td><td>reverse – bool</td><td>当颠倒轴改变状态是发送此信号</td></tr><tr><td><code>shadesBorderColorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当轴的边框颜色变为颜色时，会发出此信号。</td></tr><tr><td><code>shadesBrushChanged(brush)</code></td><td>brush – PySide6.QtGui.QBrush</td><td>当用于绘制轴阴影的笔刷更改为笔刷时，会发出此信号。</td></tr><tr><td><code>shadesColorChanged(color)</code></td><td>color – PySide6.QtGui.QColor</td><td>当轴的颜色变为颜色时，会发出此信号。</td></tr><tr><td><code>shadesPenChanged(pen)</code></td><td>pen – PySide6.QtGui.QPen</td><td>当用于绘制轴阴影的笔更改为笔时，会发出此信号。</td></tr><tr><td><code>shadesVisibleChanged(visible)</code></td><td>visible – bool</td><td>当轴阴影的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>titleBrushChanged(brush)</code></td><td>brush – PySide6.QtGui.QBrush</td><td>当用于绘制轴标题的画笔更改为画笔时，会发出此信号。</td></tr><tr><td><code>titleFontChanged(font)</code></td><td>font – PySide6.QtGui.QFont</td><td>当轴标题的字体更改为字体时，会发出此信号。</td></tr><tr><td><code>titleTextChanged(title)</code></td><td>title – str</td><td>当轴标题的文本更改为文本时，会发出此信号。</td></tr><tr><td><code>titleVisibleChanged(visible)</code></td><td><strong>visible</strong> – bool</td><td>当轴的标题文本的可见性更改为可见时，会发出此信号。</td></tr><tr><td><code>truncateLabelsChanged(truncateLabels)</code></td><td><strong>truncateLabels</strong> – bool</td><td>当标签的截断变为truncateLabels时，会发出此信号。</td></tr><tr><td><code>visibleChanged(visible)</code></td><td><strong>visible</strong> – bool</td><td>当轴的可见性更改为可见时，会发出此信号。</td></tr></tbody></table><h4 id="qvalueaxis" tabindex="-1"><a class="header-anchor" href="#qvalueaxis" aria-hidden="true">#</a> QValueAxis</h4><p>数值轴QValueAxis 适用于具有连续数据坐标的图表，它在继承 QAbstractAxis 的属性、方法和信号的同时,根据数值轴的特点又增添了一些设置坐标轴刻度的方法。</p><p>用QValueAxis 创建实例对象的方法是</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QValueAxis

QValueAxis<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数值轴的常用方法" tabindex="-1"><a class="header-anchor" href="#数值轴的常用方法" aria-hidden="true">#</a> 数值轴的常用方法</h5><p>数值轴QValueAxis的常用方法如表所示主要方法介绍如下。</p><ul><li>用setTickAnchor(float)方法设置刻度错点(参考点);</li><li>用setTickInterval(float)方法设置刻度之间的间隔值;</li><li>用setTickCount(int)方法设置刻度数量,刻度线平均分布在最小值和最大值之间;</li><li>用setTickType(type:QValueAxis.TickType)方法设置刻度类型，参数可取: <ul><li>QValueAxis.TicksDynamic</li><li>QValueAxis.TicksFixed.</li></ul></li><li>用setLabelFormat(str)方法设置刻度标签的格式符可以使用字符串的“%”格式符,例如“%3d”表示输出3 位整数，“%7.2”表示输出宽度为7位的浮点数，其中小数位为2,整数位为 4,小数点占1位， <ul><li>用applyNiceNumbers()智能方法设置刻度的标签。</li></ul></li></ul><table><thead><tr><th>QValueAxis的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setTickCount(int)</td><td>设置刻度线的数量</td></tr><tr><td>setTickAnchor(float)</td><td>设置刻度锚点</td></tr><tr><td>setTickInterval(float)</td><td>设置刻度线的间隔值</td></tr><tr><td>setMinorTickCount(int)</td><td>设置次刻度的数量</td></tr><tr><td>setTickType(type: QValueAxis.TickType)</td><td>设置刻度类型</td></tr><tr><td>setMax(float)</td><td>设置最大值</td></tr><tr><td>setMin(float)</td><td>设置最小值</td></tr><tr><td>setRange(float,float)</td><td>设置坐标轴的最小值和最大值</td></tr><tr><td>setLabelFormat(str)</td><td>设置标签的格式</td></tr><tr><td>[slot]applyNiceNumbers()</td><td>使用智能方法设置刻度的标签</td></tr></tbody></table><h5 id="数值轴qvalueaxis的信号" tabindex="-1"><a class="header-anchor" href="#数值轴qvalueaxis的信号" aria-hidden="true">#</a> 数值轴QValueAxis的信号</h5><table><thead><tr><th>信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>labelFormatChanged(format)</code></td><td><strong>format</strong> – str</td><td>当轴标签的格式更改时，会发出此信号。</td></tr><tr><td><code>maxChanged(max)</code></td><td><strong>max</strong> – float</td><td>当轴的最大值(由max指定)发生变化时，会发出此信号。</td></tr><tr><td><code>minChanged(min)</code></td><td>min – float</td><td>当轴的最小值(由min指定)发生变化时，会发出此信号。</td></tr><tr><td><code>minorTickCountChanged(tickCount)</code></td><td>tickCount – int</td><td>当minorTickCount指定的轴上的次要刻度线数量发生变化时，会发出此信号。</td></tr><tr><td><code>rangeChanged(min, max)</code></td><td>min – float<br>max – float</td><td>当轴的最小值或最大值(由最小值和最大值指定)发生变化时，会发出此信号。</td></tr><tr><td><code>tickAnchorChanged(anchor)</code></td><td><strong>anchor</strong> – float</td><td>刻度线布局发生变化时，会发出此信号。</td></tr><tr><td><code>tickCountChanged(tickCount)</code></td><td><strong>tickCount</strong> – int</td><td>当tickCount指定的轴上的刻度线数量发生变化时，会发出此信号。</td></tr><tr><td><code>tickIntervalChanged(interval)</code></td><td><strong>interval</strong> – float</td><td>刻度线数发生变化时，会发出此信号。</td></tr><tr><td><code>tickTypeChanged(type)</code></td><td>type – TickType</td><td>刻度发生变化时，会发出此信号。</td></tr></tbody></table><h4 id="qlogvalueaxis" tabindex="-1"><a class="header-anchor" href="#qlogvalueaxis" aria-hidden="true">#</a> QLogValueAxis</h4><p>对数轴 QLogValueAxis 是一个非线性值变化坐标轴它是基于数量级的非线性标尺轴上的每一个刻度线都是由前一个刻度线的值乘以一个固定的值而得到的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QLogValueAxis

QLogValueAxis<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果QLogValueAxis 连接的数据序列中含有 0或负数，则该数据序列不会被绘制。 QLogValueAxis 的方法不多，主要是:</p><ul><li>用setBase(float)方法设置对数的基;</li><li>用setLabelFormat(str)方法设置标签格式;</li><li>用setMin(float)方法、setMax(float)方法或setRange(float,float)方法设置幅度范围，</li><li>用setMinorTickCount(int)方法设置次网格的数量;</li><li>用tickCount()方法和 minorTickCount()方法分别获取网格和次网格的数量。</li></ul><p>QLogValueAxis 的信号有</p><table><thead><tr><th>信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>baseChanged(base)</td><td><strong>base</strong> – float</td><td>当轴的对数基数改变时，发出该信号。</td></tr><tr><td>labelFormatChanged(format)</td><td><strong>format</strong> – str</td><td>当轴标签的格式更改时，会发出此信号。</td></tr><tr><td>maxChanged(max)</td><td><strong>max</strong> – float</td><td>当轴的最大值(由max指定)发生变化时，会发出此信号。</td></tr><tr><td>minChanged(min)</td><td><strong>min</strong> – float</td><td>当轴的最小值(由min指定)发生变化时，会发出此信号。</td></tr><tr><td>minorTickCountChanged(minorTickCount)</td><td>minorTickCount – int</td><td>当minorTickCount指定的轴上的次要刻度线数量发生变化时，会发出此信号。</td></tr><tr><td>rangeChanged(min, max)</td><td>min – float<br>max – float</td><td>当轴的最小值或最大值(由最小值和最大值指定)发生变化时，会发出此信号。</td></tr><tr><td>tickCountChanged(tickCount)</td><td>tickCount – int</td><td>当tickCount指定的轴上的刻度线数量发生变化时，会发出此信号。</td></tr></tbody></table><p>下面的程序,横坐标用数值坐标、纵坐标用对数坐标绘制图表,并对横坐标和纵坐标的显示进行设置,程序运行结果如图所示</p><figure><img src="`+u+`" alt="image-20230312182102327" tabindex="0" loading="lazy"><figcaption>image-20230312182102327</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 18:07</span>
<span class="token comment"># File_name: 06-对数轴 QLogValueAxis.py</span>


<span class="token keyword">import</span> sys<span class="token punctuation">,</span> random
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCharts
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        chartView <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>
        chart <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建图表</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 图表控件中设置图表</span>
        chart<span class="token punctuation">.</span>setTitle<span class="token punctuation">(</span><span class="token string">&quot;随机数据&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置图表的标题</span>
        lineSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QLineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建折线数据序列</span>
        lineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;随机序列&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置数据序列的名称</span>
        random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">100000</span> <span class="token operator">*</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数据序列中添加数据</span>

        chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        axis_x <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>
        axis_x<span class="token punctuation">.</span>setTitleText<span class="token punctuation">(</span><span class="token string">&quot;Numbers&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的标题</span>
        axis_x<span class="token punctuation">.</span>setTitleBrush<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>black<span class="token punctuation">)</span>
        axis_x<span class="token punctuation">.</span>setLabelsColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>black<span class="token punctuation">)</span>
        axis_x<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的范围</span>
        axis_x<span class="token punctuation">.</span>setTickCount<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 设置刻度的数量</span>
        axis_x<span class="token punctuation">.</span>applyNiceNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 应用智能刻度标签</span>
        axis_x<span class="token punctuation">.</span>setLinePenColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>black<span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的颜色</span>

        pen <span class="token operator">=</span> axis_x<span class="token punctuation">.</span>linePen<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取坐标轴的钢笔</span>
        pen<span class="token punctuation">.</span>setWidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 设置钢笔的宽度</span>
        axis_x<span class="token punctuation">.</span>setLinePen<span class="token punctuation">(</span>pen<span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的钢笔</span>
        axis_x<span class="token punctuation">.</span>setGridLineColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>  <span class="token comment"># 设置网格线的颜色</span>
        pen <span class="token operator">=</span> axis_x<span class="token punctuation">.</span>gridLinePen<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取网格线的钢笔</span>
        pen<span class="token punctuation">.</span>setWidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 设置钢笔的宽度</span>
        axis_x<span class="token punctuation">.</span>setGridLinePen<span class="token punctuation">(</span>pen<span class="token punctuation">)</span>  <span class="token comment"># 设置网格线的宽度</span>
        axis_x<span class="token punctuation">.</span>setMinorTickCount<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 设置次刻度的数量</span>
        axis_x<span class="token punctuation">.</span>setLabelFormat<span class="token punctuation">(</span><span class="token string">&quot;% 5,1f&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置标签的格式</span>

        axis_y <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QLogValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 建立对数坐标轴</span>
        axis_y<span class="token punctuation">.</span>setBase<span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span>  <span class="token comment"># 定义对数基</span>
        axis_y<span class="token punctuation">.</span>setMax<span class="token punctuation">(</span><span class="token number">100000.0</span><span class="token punctuation">)</span>  <span class="token comment"># 设置最大值</span>
        axis_y<span class="token punctuation">.</span>setMin<span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">)</span>  <span class="token comment"># 设置最小值</span>
        axis_y<span class="token punctuation">.</span>setTitleText<span class="token punctuation">(</span><span class="token string">&quot;随机数据&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置标题</span>
        axis_y<span class="token punctuation">.</span>setMinorTickCount<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment"># 设置次网格线的数量</span>
        axis_y<span class="token punctuation">.</span>setLabelFormat<span class="token punctuation">(</span><span class="token string">&quot;%6d&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置格式</span>

        chart<span class="token punctuation">.</span>setAxisX<span class="token punctuation">(</span>axis_x<span class="token punctuation">,</span> lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数据</span>
        chart<span class="token punctuation">.</span>setAxisY<span class="token punctuation">(</span>axis_y<span class="token punctuation">,</span> lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数据</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="qbarcategoryaxis" tabindex="-1"><a class="header-anchor" href="#qbarcategoryaxis" aria-hidden="true">#</a> QBarCategoryAxis</h4><p>QBarCategoryAxis 主要用于定义条形图的坐标轴，添加条目也可用于定义折线图的坐标轴。</p><p>QBarCategoryAxis 的常用方法如表所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QBarCategoryAxis

QBarCategoryAxis<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QBarCategoryAxis 的信号有</p><table><thead><tr><th>信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>categoriesChanged()</td><td></td><td>当轴的类别发生变化时，会发出此信号。</td></tr><tr><td>countChanged()</td><td></td><td>当轴的类别数发生变化时，会发出此信号。</td></tr><tr><td>maxChanged(max)</td><td>max – str</td><td>当轴的最大值发生变化时，会发出此信号。</td></tr><tr><td>minChanged(min)</td><td><strong>min</strong> – str</td><td>当轴的最小值发生变化时，会发出该信号。</td></tr><tr><td>rangeChanged(min, max)</td><td>min – str<br>max – str</td><td>当轴的最小值或最大值发生变化时，会发出该信号。</td></tr></tbody></table><p>下面的程序,在一个图表中添加条形图和折线图,条形图和折线图使用相同的坐标轴程序运行结果如图所示。</p><figure><img src="`+r+`" alt="image-20230312184409176" tabindex="0" loading="lazy"><figcaption>image-20230312184409176</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 18:32</span>
<span class="token comment"># File_name: 07-条形图的坐标轴QBarCategoryAxis.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCharts


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chartView <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chartView<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建图表</span>
        self<span class="token punctuation">.</span>chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 将图表加人到图表视图控件中</span>

        set1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;一组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        set2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;二组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        set3 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;三组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>

        self<span class="token punctuation">.</span>barSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">,</span> set3<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据项</span>
        self<span class="token punctuation">.</span>lineSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QLineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;去年季度总额&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>

        <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>barCategoryAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加坐标轴</span>
        self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;第一季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第二季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第四季度&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>valueAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignRight<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加坐标轴</span>
        self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数值范围</span>

        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="qcategoryaxis" tabindex="-1"><a class="header-anchor" href="#qcategoryaxis" aria-hidden="true">#</a> QCategoryAxis</h4><p>与QBarCategoryAxis 不同的是,QCategoryAxis 坐标轴可以定义每个条目的宽度，常用来放在竖直轴上,实现坐标轴不等分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QCategoryAxis

QCategoryAxis<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="qcategoryaxis-的常用方法" tabindex="-1"><a class="header-anchor" href="#qcategoryaxis-的常用方法" aria-hidden="true">#</a> QCategoryAxis 的常用方法</h5><ul><li>用append(label:str,categoryEndValue:float)方法添加条目,其中 label是条目名称,categoryEndValue 是条目的终止值,一个条目的宽度是两个相邻条目的终止值的差,因此后加人的条目的终止值一定要大于先加入的条目的终止值;</li><li>用setStartValue(min: loat)方法设置坐标轴的起始值;</li><li>用startValue(categoryLabel=)方法获取条目的起始值;</li><li>用endValue(str)方法获取条目的终止值，</li><li>用setLabelsPosition(QCategoryAxis.AxisLabelsPosition)方法设置条目标签的位置,参数可取: <ul><li>QCategoryAxis.AxisLabelsPositionCenter(标签在条目中间位置)</li><li>QCategoryAxis.AxisLabelsPositionOnValue(标签在条目的最大值处)</li></ul></li></ul><table><thead><tr><th>QCategoryAxis的方法与参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>append(label: str,categoryEndValue: float)</td><td>None</td><td>添加条目</td></tr><tr><td>categoriesLabels()</td><td>ListCstr]</td><td>获取条目列表</td></tr><tr><td>count()</td><td>int</td><td>获取条目的数量</td></tr><tr><td>endValue(categoryLabel:str)</td><td>float</td><td>获取指定条目的终止值</td></tr><tr><td>remove(label:str)</td><td>None</td><td>移除指定的条目</td></tr><tr><td>replaceLabel(oldLabel: str,newLabel: str)</td><td>None</td><td>用新条目替换旧条目</td></tr><tr><td>setLabelsPosition(QCategoryAxis. AxisLabelsPosition)</td><td>None</td><td>设置标签的位置</td></tr><tr><td>setStartValue(min:float)</td><td>None</td><td>设置条目的最小值</td></tr><tr><td>stariValue(categoryLabel:str=&#39;)</td><td>float</td><td>获取指定条目的起始值</td></tr></tbody></table><h5 id="qcategoryaxis的信号" tabindex="-1"><a class="header-anchor" href="#qcategoryaxis的信号" aria-hidden="true">#</a> QCategoryAxis的信号</h5><table><thead><tr><th>信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>categoriesChanged()</td><td></td><td>当轴的类别发生变化时，会发出此信号。</td></tr><tr><td>labelsPositionChanged(position)</td><td>position – AxisLabelsPosition</td><td>标签位置更改，会发出此信号。</td></tr></tbody></table><h5 id="qcategoryaxis例子" tabindex="-1"><a class="header-anchor" href="#qcategoryaxis例子" aria-hidden="true">#</a> QCategoryAxis例子</h5><p>下面的程序是将 QCategoryAxis 轴放在左侧，QCategoryAxis 轴的条目是销售等级分为“不及格”“及格”“良好”“优秀”和“超出预期”每个等级的宽度并不相等。程序运行结果如图所示。</p><figure><img src="`+k+`" alt="image-20230312192018568" tabindex="0" loading="lazy"><figcaption>image-20230312192018568</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 18:51</span>
<span class="token comment"># File_name: 08-QCategoryAxis例子.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCharts
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chartView <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chartView<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建图表</span>
        self<span class="token punctuation">.</span>chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 将图表加入到图表视图控件中</span>

        set1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;一组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        set2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;二组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        set3 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;三组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>

        self<span class="token punctuation">.</span>barSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">,</span> set3<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据项</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>

        self<span class="token punctuation">.</span>barCategoryAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加坐标轴</span>
        self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;第一季度&quot;</span><span class="token string">&quot;第二季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第四季度&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>categoryAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>
        self<span class="token punctuation">.</span>categorvAxis <span class="token operator">=</span> self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加坐标轴</span>

        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment"># 设置坐标轴的数值范围</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;良好&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;超出预期&quot;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>
        self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">.</span>setStartValue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 指定起始值</span>

        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>categoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="qdatetimeaxis" tabindex="-1"><a class="header-anchor" href="#qdatetimeaxis" aria-hidden="true">#</a> QDateTimeAxis</h4><p>QDateTimeAxis 轴用于设置时间坐标轴可用于XY图。</p><h5 id="qdatetimeaxis-的常用方法" tabindex="-1"><a class="header-anchor" href="#qdatetimeaxis-的常用方法" aria-hidden="true">#</a> QDateTimeAxis 的常用方法</h5><p>QDateTimeAxis 的常用方法如表所示，主要方法:</p><ul><li>用setFormat(format:str)方法设置显示格式，显示格式可参考QDateTime 的格式;</li><li>用setMin(min:QDateTime)和 setMax(max:QDateTime)方法设置坐标轴显示的最小时间和最大时间;</li><li>用setTickCount(count;int)方法设置坐标轴的刻度数量。</li></ul><p>在定义数据序列的值时,例如 QLineSeries 数据序列需要把X值转换成毫秒可以用QDateTime的 toMSecsSinceEpoch()方法转换否则数据序列与时间坐标轴的关联会出问题，时间坐标轴显示的时间不准确,可参考下面的实例</p><table><thead><tr><th>QDateTimeAxis的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setFormat(format:str)</td><td>None</td><td>设置显示时间的格式</td></tr><tr><td>format()</td><td>Str</td><td>获取格式</td></tr><tr><td>setMax(max: QDateTime)</td><td>None</td><td>设置坐标轴的最大时间</td></tr><tr><td>max()</td><td>QDateTime</td><td>获取最大时间</td></tr><tr><td>setMin(min:QDateTime)</td><td>None</td><td>设置坐标轴的最小时间</td></tr><tr><td>min()</td><td>QDateTime</td><td>获取最小时间</td></tr><tr><td>setRange(min: QDateTime,max: QDateTime)</td><td>None</td><td>设置范围</td></tr><tr><td>setTickCount(count:int)</td><td>None</td><td>设置刻度数量</td></tr><tr><td>tickCount()</td><td>int</td><td>获取刻度数量</td></tr></tbody></table><h5 id="qdatetimeaxis的信号" tabindex="-1"><a class="header-anchor" href="#qdatetimeaxis的信号" aria-hidden="true">#</a> QDateTimeAxis的信号</h5><table><thead><tr><th>信号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>formatChanged(format)</td><td><strong>format</strong> – str</td><td>当轴的格式改变时，会发出此信号。</td></tr><tr><td>maxChanged(max)</td><td>max – PySide6.QtCore.QDateTime</td><td>当轴的最大值(由max指定)发生变化时，会发出此信号。</td></tr><tr><td>minChanged(min)</td><td>min – PySide6.QtCore.QDateTime</td><td>当轴的最小值(由min指定)发生变化时，会发出此信号。</td></tr><tr><td>rangeChanged(min, max)</td><td>min – PySide6.QtCore.QDateTime<br>max – PySide6.QtCore.QDateTime</td><td>当轴的最小值或最大值(由最小值和最大值指定)发生变化时，会发出此信号。</td></tr><tr><td>tickCountChanged(tick)</td><td>tick – int</td><td>当tickCount指定的轴上的刻度线数量发生变化时，会发出此信号。</td></tr></tbody></table><h5 id="qdatetimeaxis的实例" tabindex="-1"><a class="header-anchor" href="#qdatetimeaxis的实例" aria-hidden="true">#</a> QDateTimeAxis的实例</h5><p>下面的程序用菜单打开 Excel 文件 price.xlsx,读取数据并绘制价格走势图,pricexlsx文件中第1列是时间,第2列和第 3列是价格。程序运行结果如图8-12所示。</p><figure><img src="`+b+`" alt="image-20230312195258054" tabindex="0" loading="lazy"><figcaption>image-20230312195258054</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 19:26</span>
<span class="token comment"># File_name: 09-QDateTimeAxis的实例.py</span>


<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QMenuBar<span class="token punctuation">,</span> QFileDialog
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCharts <span class="token keyword">import</span> QChartView<span class="token punctuation">,</span> QChart<span class="token punctuation">,</span> QLineSeries<span class="token punctuation">,</span> QValueAxis<span class="token punctuation">,</span> QDateTimeAxis
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QDateTime
<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        menuBar <span class="token operator">=</span> QMenuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fileMenu <span class="token operator">=</span> menuBar<span class="token punctuation">.</span>addMenu<span class="token punctuation">(</span><span class="token string">&quot;文件(&amp;E)&quot;</span><span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">&quot;打开(&amp;O)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action_open_triggered<span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addSeparator<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">&quot;退出(&amp;Q)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>triggered<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>close<span class="token punctuation">)</span>
        chartView <span class="token operator">=</span> QChartView<span class="token punctuation">(</span><span class="token punctuation">)</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>menuBar<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>chartView<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>
        chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">action_open_triggered</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 打开 Excel文档，读取数据</span>
        fileName<span class="token punctuation">,</span> fil <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;打开测试文件&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Excel(*.xlsx)&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> fileName <span class="token keyword">and</span> fil <span class="token operator">==</span> <span class="token string">&quot;Excel(*.xlsx)&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;进来了&quot;</span><span class="token punctuation">)</span>
            dateTimeList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 时间列表</span>
            valueList_1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 数值列表</span>
            valueList_2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 数值列表</span>

            wb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
            ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active
            <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>rows<span class="token punctuation">:</span>
                valueList_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 添加数值数据</span>
                valueList_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 添加数值数据</span>
                dateTimeList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>QDateTime<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 添加时间数据</span>

            self<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>dateTimeList<span class="token punctuation">,</span> valueList_1<span class="token punctuation">,</span> valueList_2<span class="token punctuation">)</span>  <span class="token comment"># 调用绘制图表函数</span>

    <span class="token keyword">def</span> <span class="token function">plot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dateTimeList<span class="token punctuation">,</span> valueList_1<span class="token punctuation">,</span> valueList_2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 绘制图表的函数</span>
        lineSeries_1 <span class="token operator">=</span> QLineSeries<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 第1个数据序列</span>
        lineSeries_1<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;价格1&quot;</span><span class="token punctuation">)</span>
        lineSeries_2 <span class="token operator">=</span> QLineSeries<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 第2个数据序列</span>
        lineSeries_2<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;价格2&quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dateTimeList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            msec <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>dateTimeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>toMSecsSinceEpoch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 换算成毫秒</span>
            lineSeries_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>msec<span class="token punctuation">,</span> valueList_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 第1个数据序列添加数据</span>
            lineSeries_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>msec<span class="token punctuation">,</span> valueList_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 第2个数据序列添加数据</span>

        dateTimeAxis <span class="token operator">=</span> QDateTimeAxis<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建时间坐标轴</span>
        dateTimeAxis<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span>dateTimeList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dateTimeList<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>dateTimeList<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        dateTimeAxis<span class="token punctuation">.</span>setFormat<span class="token punctuation">(</span><span class="token string">&#39;yyyy - MM -.dd HH:mm&#39;</span><span class="token punctuation">)</span>
        dateTimeAxis<span class="token punctuation">.</span>setTickCount<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
        valueAxis <span class="token operator">=</span> QValueAxis<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建数值坐标轴</span>

        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>removeAllSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>removeAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>axisX<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>removeAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>axisY<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>lineSeries_1<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>lineSeries_2<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>setAxisX<span class="token punctuation">(</span>dateTimeAxis<span class="token punctuation">,</span> lineSeries_1<span class="token punctuation">)</span>  <span class="token comment"># 图表设置 X轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>setAxisY<span class="token punctuation">(</span>valueAxis<span class="token punctuation">,</span> lineSeries_1<span class="token punctuation">)</span>  <span class="token comment"># 图表设置Y轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>setAxisX<span class="token punctuation">(</span>dateTimeAxis<span class="token punctuation">,</span> lineSeries_2<span class="token punctuation">)</span>  <span class="token comment"># 图表设置 X轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>setAxisY<span class="token punctuation">(</span>valueAxis<span class="token punctuation">,</span> lineSeries_2<span class="token punctuation">)</span>  <span class="token comment"># 图表设置Y轴</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图例与图例上的标志" tabindex="-1"><a class="header-anchor" href="#图例与图例上的标志" aria-hidden="true">#</a> 图例与图例上的标志</h3><h4 id="图例qlegend" tabindex="-1"><a class="header-anchor" href="#图例qlegend" aria-hidden="true">#</a> 图例QLegend</h4><figure><img src="`+m+'" alt="examples_percentbarchart_legend.png" tabindex="0" loading="lazy"><figcaption>examples_percentbarchart_legend.png</figcaption></figure><p>如图图例 QLegend用于定义图表中图例的位置颜色可见性和序列的标志形状等。</p><p>图例QLegend继承自 QGraphicsWidget,用图表 QChart 的 legend()方法获取图表上的图例对象;然后用图例 QLegend 提供的方法对图例进行设置。不能单独创建图例对象</p><h5 id="图例qlegend的方法" tabindex="-1"><a class="header-anchor" href="#图例qlegend的方法" aria-hidden="true">#</a> 图例QLegend的方法</h5><p>图例QLegend 的常用方法如表所示,主要方法介绍如下</p><ul><li><p>用setAlignment(alignment;Qt.Alignment)方法可以设置图例在图表的位置,如参数取:</p><ul><li>Qt.AlignTop 把图例放在图表的上位置。</li><li>Qt.AlignBottom 把图例放在图表的下位置。</li><li>Qt.AlignLeft 把图例放在图表的左位置。</li><li>Qt.AlignRight 把图例放在图表的右位置。</li></ul></li><li><p>用setMarkerShape(shape: QLegend.MarkerShape)方法设置数据序列标志的形状，参数可取:</p><ul><li>QLegend.MarkerShapeDefault(使用默认形状) 由 QLegend 确定的默认形状用于标记。此值仅支持单个 QLegendMarker 项。</li><li>QLegend.MarkerShapeRectangle 使用矩形标记。标记大小由字体大小决定。</li><li>QLegend.MarkerShapeCircle 使用圆形标记。标记大小由字体大小决定。</li><li>QLegend.MarkerShapeFromSeries(根据数据序列的类型确定形状)标记形状由序列确定。对于散点序列，图例标记看起来像散点，并且与点的大小相同。对于直线或样条线系列，图例标记看起来像直线的一小部分。对于其他系列类型，将显示矩形标记。如果为序列指定了 a，则将显示 ，其大小将由系列标记大小确定。lightMarkerlightMarker</li><li>QLegend.MarkerShapeRotatedRectangle 使用旋转的矩形标记。标记大小由字体大小决定。</li><li>QLegend.MarkerShapeTriangle 使用三角形标记。标记大小由字体大小决定。</li><li>QLegend.MarkerShapeStar 使用星形标记。标记大小由字体大小决定。</li><li>QLegend.MarkerShapePentagon 使用五边形标记。标记大小由字体大小决定。</li><li>对应值分别是0~7当使用矩形或圆形时,矩形或圆形的尺寸由字体的尺寸决定;当选择数据序列的类型时,如果数据序列是折线或样条曲线,则形状是线段,如果是散列图,则形状是散列图上的点的形状,其他情况时形状是矩形。</li></ul></li><li><p>用setInteractive(interactive:bool)方法可以将图例设置成交互模式</p><ul><li>用detachFromChart()方法使图例与图表失去关联,则可以用鼠标移动图例和调整图例的尺寸。</li></ul></li><li><p>用markers(series;QAbstractSeries=None)方法可以获取图例上数据序列的标志对象列表,可以对每个标志对象进行更详细的设置</p></li></ul><table><thead><tr><th>QLegend 的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setAlignment(alignment: Qt.Alignment)</td><td>设置图例在QChart中的位置</td></tr><tr><td>setBackgroundVisible(visible:bool=True)</td><td>设置图例的背景是否可见</td></tr><tr><td>setBorderColor(color:Union[QColor,Qt.GlobalColor, str])</td><td>在背景可见时，设置边框的颜色</td></tr><tr><td>setBrush(brush: Union[QBrush, Qt.BrushStyle, Qt.GlobalColor,QColor,QGradient,QImage,QPixmap])</td><td>设置画刷</td></tr><tr><td>setColor(color:Union[QColor,Qt.GlobalColor,str])</td><td>设置填充色</td></tr><tr><td>setFont(font:Union[QFont,str,Sequence[str]])</td><td>设置字体</td></tr><tr><td>setLabelBrush(brush: Union[QBrush, QColor, QGradient])</td><td>设置标签画刷</td></tr><tr><td>setLabelColor(color: Union[QColor, Qt.GlobalColor, str])</td><td>设置标签颜色</td></tr><tr><td>setMarkerShape(shape:QLegend. MarkerShape)</td><td>设置数据序列标志的形状</td></tr><tr><td>markerShape()</td><td>获取标志的形状 QLegend. MarkerShape</td></tr><tr><td>setPen(pen:Union[QPen,Qt.PenStyle,QColor])</td><td>设置边框的钢笔</td></tr><tr><td>setReverseMarkers(reverseMarkers:bool=True)</td><td>设置数据序列的标志是否反向</td></tr><tr><td>setToolTip(str)</td><td>设置提示信息</td></tr><tr><td>setShowToolTips(show:bool)</td><td>设置是否显示提示信息</td></tr><tr><td>detachFromChart()</td><td>使图例与图表失去关联</td></tr><tr><td>attachToChart()</td><td>使图例与图表建立关联</td></tr><tr><td>isAttachedToChart()</td><td>获取图例</td></tr><tr><td>setInteractive(interactive: bool)</td><td>设置图例是否是交互模式</td></tr><tr><td>markers(series:QAbstractSeries=None)</td><td>获取图例中标志列表 list[QLegendMarker]</td></tr></tbody></table><h5 id="图例qlegend-的信号" tabindex="-1"><a class="header-anchor" href="#图例qlegend-的信号" aria-hidden="true">#</a> 图例QLegend 的信号</h5><p>图例QLegend的信号如表所示</p><table><thead><tr><th>QLegend的信号及参数类型</th><th>说 .明</th></tr></thead><tbody><tr><td>attachedToChartChanged(attached:bool)</td><td>图例与图表的关联状态发生改变时发送信号</td></tr><tr><td>backgroundVisibleChanged(visible:bool)</td><td>背景可见性发生改变时发送信号</td></tr><tr><td>borderColorChanged(color:QColor)</td><td>背景颜色发生改变时发送信号</td></tr><tr><td>colorChanged(color:QColor)</td><td>颜色发生改变时发送信号</td></tr><tr><td>fontChanged(font:QFont)</td><td>字体发生改变时发送信号</td></tr><tr><td>labelColorChanged(color:QColor)</td><td>标签颜色发生改变时发送信号</td></tr><tr><td>markerShapeChanged(QLegend.MarkerShape)</td><td>标志形状发生改变时发送信号</td></tr><tr><td>reverseMarkersChanged(reverseMarkers:bool)</td><td>标志反转状态发生改变时发送信号</td></tr><tr><td>showToolTipsChanged(showToolTips:bool)</td><td>提示信息显示状态发生改变时发送信号</td></tr></tbody></table><h4 id="图例的标志qlegendmarker" tabindex="-1"><a class="header-anchor" href="#图例的标志qlegendmarker" aria-hidden="true">#</a> 图例的标志QLegendMarker</h4><p>用图例的 markers(series:QAbstractSeries=None)方法可以获取图例上的数据序列标志对象列表 list[QLegendMarker]可以对每个标志对象进行详细的设置。</p><p>QLegendMarker 继承自QObject,继承自 QLegendMarker 的类有</p><ul><li>QXYLegendMarker</li><li>QAreaLegendMarker</li><li>QBarLegendMarker</li><li>QBoxPlotLegendMarker</li><li>QCandlestickLegendMarker</li><li>QPieLegendMarker</li></ul><p>除 QBarLegendMarker和QPieLegendMarker 外,这些派生类没有自己特有的方法和信号，都是继承QLegendMarker 的方法和信号</p><h5 id="图例标志-qlegendmarker-的方法" tabindex="-1"><a class="header-anchor" href="#图例标志-qlegendmarker-的方法" aria-hidden="true">#</a> 图例标志 QLegendMarker 的方法</h5><p>图例标志 QLegendMarker 的常用方法如所示,主要方法是</p><ul><li><p>用setShape(shape:QLegend.MarkerShape)方法设置形状;</p></li><li><p>用type()方法获取标志类型返回值是QLegendMarker.LegendMarkerType 的枚举值,可取以下值,分别对应值0~5,根据类型可以给标志设置不同的形状</p><table><thead><tr><th>标记</th><th>说明</th></tr></thead><tbody><tr><td>QLegendMarker.LegendMarkerTypeArea</td><td>区域系列的图例标记。</td></tr><tr><td>QLegendMarker.LegendMarkerTypeBar</td><td>条形图集的图例标记。</td></tr><tr><td>QLegendMarker.LegendMarkerTypePie</td><td>饼图扇区的图例标记。</td></tr><tr><td>QLegendMarker.LegendMarkerTypeXY</td><td>直线、样条或散点序列的图例标记。</td></tr><tr><td>QLegendMarker.LegendMarkerTypeBoxPlot</td><td>箱形图系列的图例标记。</td></tr><tr><td>QLegendMarker.LegendMarkerTypeCandlestick</td><td>烛台系列的图例标记。</td></tr></tbody></table></li></ul><table><thead><tr><th>QLegendMarker的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>brush()</td><td>QBrush</td><td>获取画刷</td></tr><tr><td>font()</td><td>QFont</td><td>获取字体</td></tr><tr><td>isVisible()</td><td>bool</td><td>获取是否可见</td></tr><tr><td>label()</td><td>str</td><td>获取标签</td></tr><tr><td>labelBrush()</td><td>QBrush</td><td>获取标签画刷</td></tr><tr><td>pen()</td><td>QPen</td><td>获取钢笔</td></tr><tr><td>series()</td><td>QAbstractSeries</td><td>获取关联的数据序列</td></tr><tr><td>setBrush(brush: Union[QBrush, QColor,QGradient,QPixmap])</td><td>None</td><td>设置画刷</td></tr><tr><td>setFont(font:Union[QFont,str])</td><td>None</td><td>设置字体</td></tr><tr><td>setLabel(label: str)</td><td>None</td><td>设置标签</td></tr><tr><td>setLabelBrush(brush:Union[QBrush, QColor,QGradient,QPixmap])</td><td>None</td><td>设置标签的画刷</td></tr><tr><td>setPen(pen: Union[QPen,QColor])</td><td>None</td><td>设置钢笔</td></tr><tr><td>setShape(shape: QLegend. MarkerShape)</td><td>None</td><td>设置形状</td></tr><tr><td>setVisible(visible:bool)</td><td>None</td><td>设置可见性</td></tr><tr><td>shape()</td><td>QLegend. MarkerShape</td><td>获取形状</td></tr><tr><td>type()</td><td>QLegendMarker. LegendMarker1ype</td><td>获取类型·</td></tr></tbody></table><h5 id="图例标志-qlegendmarker-的信号" tabindex="-1"><a class="header-anchor" href="#图例标志-qlegendmarker-的信号" aria-hidden="true">#</a> 图例标志 QLegendMarker 的信号</h5><table><thead><tr><th>信号</th><th>说明</th></tr></thead><tbody><tr><td><code>brushChanged()</code></td><td>当图例标记的画笔发生变化时，会发出此信号。</td></tr><tr><td><code>clicked()</code></td><td>单击图例标记时会发出此信号。</td></tr><tr><td><code>fontChanged()</code></td><td>当图例标记的(标签)字体更改时，会发出此信号。</td></tr><tr><td><code>hovered(status)</code></td><td><strong>status</strong> – bool<br>当鼠标悬停在图例标记上时，会发出此信号。当鼠标在标记上移动时，状态变为真，当鼠标再次移开时，状态将变为假。</td></tr><tr><td><code>labelBrushChanged()</code></td><td>当图例标记的标签画笔发生变化时，会发出此信号。</td></tr><tr><td><code>labelChanged()</code></td><td>当图例标记的标签发生更改时，会发出此信号。</td></tr><tr><td><code>penChanged()</code></td><td>当图例标记的笔发生变化时，会发出此信号。</td></tr><tr><td><code>shapeChanged()</code></td><td>当图例标记的形状发生变化时，会发出此信号。</td></tr><tr><td><code>visibleChanged()</code></td><td>当图例标记的可见性发生变化时，会发出此信号。</td></tr></tbody></table><h3 id="图例qlegend-和图例标志olegendmarker的应用实例" tabindex="-1"><a class="header-anchor" href="#图例qlegend-和图例标志olegendmarker的应用实例" aria-hidden="true">#</a> 图例QLegend 和图例标志OLegendMarker的应用实例</h3><p>下面的代码生成折线图和条形图,对图表中的图例进行设置。程序运行结果如图所示。</p><figure><img src="'+v+`" alt="image-20230312203821921" tabindex="0" loading="lazy"><figcaption>image-20230312203821921</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/12 20:21</span>
<span class="token comment"># File_name: 10-图例QLegend 和图例标志OLegendMarker的应用实例.py</span>


<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">.</span>QPointF
<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCharts


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chartView <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChartView<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 创建图表视图控件</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chartView<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QChart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建图表</span>
        self<span class="token punctuation">.</span>chartView<span class="token punctuation">.</span>setChart<span class="token punctuation">(</span>self<span class="token punctuation">.</span>chart<span class="token punctuation">)</span>  <span class="token comment"># 将图表加入到图表视图控件中</span>

        set1 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;一组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>
        set2 <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSet<span class="token punctuation">(</span><span class="token string">&quot;二组销售额&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据项</span>
        set2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据</span>

        self<span class="token punctuation">.</span>barSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>set1<span class="token punctuation">,</span> set2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加数据项</span>
        self<span class="token punctuation">.</span>lineSeries <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QLineSeries<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数据序列</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">&quot;去年季度总额&quot;</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>QPointF<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QPointF<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QPointF<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QPointF<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addSeries<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加数据序列</span>

        self<span class="token punctuation">.</span>barCategoryAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QBarCategoryAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建坐标轴</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>  <span class="token comment"># 图表中添加坐标轴</span>
        self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;第一乘度&quot;</span><span class="token string">&quot;第二季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第三季度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;第四季度&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加条目</span>

        self<span class="token punctuation">.</span>valueAxis <span class="token operator">=</span> QtCharts<span class="token punctuation">.</span>QValueAxis<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>addAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignLeft<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>barSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>valueAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>
        self<span class="token punctuation">.</span>lineSeries<span class="token punctuation">.</span>attachAxis<span class="token punctuation">(</span>self<span class="token punctuation">.</span>barCategoryAxis<span class="token punctuation">)</span>  <span class="token comment"># 数据项与坐标轴关联</span>

        <span class="token comment"># 以下是对图例的设置</span>
        legend <span class="token operator">=</span> self<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignBottom<span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setBackgroundVisible<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setBorderColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>red<span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>
        pen <span class="token operator">=</span> legend<span class="token punctuation">.</span>pen<span class="token punctuation">(</span><span class="token punctuation">)</span>
        pen<span class="token punctuation">.</span>setWidth<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setPen<span class="token punctuation">(</span>pen<span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setToolTip<span class="token punctuation">(</span><span class="token string">&quot;销售团队的销售额对比&quot;</span><span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setShowToolTips<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        legend<span class="token punctuation">.</span>setMarkerShape<span class="token punctuation">(</span>legend<span class="token punctuation">.</span>MarkerShape<span class="token punctuation">.</span>MarkerShapeFromSeries<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> legend<span class="token punctuation">.</span>markers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            font <span class="token operator">=</span> i<span class="token punctuation">.</span>font<span class="token punctuation">(</span><span class="token punctuation">)</span>
            font<span class="token punctuation">.</span>setPointSize<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
            i<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>font<span class="token punctuation">)</span>

            <span class="token keyword">if</span> i<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QtCharts<span class="token punctuation">.</span>QLegendMarker<span class="token punctuation">.</span>LegendMarkerType<span class="token punctuation">.</span>LegendMarkerTypeBar<span class="token punctuation">:</span>
                i<span class="token punctuation">.</span>setShape<span class="token punctuation">(</span>QtCharts<span class="token punctuation">.</span>QLegend<span class="token punctuation">.</span>MarkerShape<span class="token punctuation">.</span>MarkerShapeRotatedRectangle<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                i<span class="token punctuation">.</span>setShape<span class="token punctuation">(</span>QtCharts<span class="token punctuation">.</span>QLegend<span class="token punctuation">.</span>MarkerShape<span class="token punctuation">.</span>MarkerShapeFromSeries<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,278)]))}const x=s(h,[["render",Q],["__file","17绘制二维图表.html.vue"]]);export{x as default};
