import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,a as t}from"./app-DBc2jY3V.js";const p="/wf-site/assets/image-20240615202116085-CzWv1h3w.png",o="/wf-site/assets/image-20240711112615475-BthVho40.png",l="/wf-site/assets/image-20240711131337172-BKNuim0f.png",i="/wf-site/assets/image-20240711131600727-DIF_2ESe.png",c="/wf-site/assets/image-20240711135020709-ClKGAoXV.png",r="/wf-site/assets/image-20240711135153596-BF2ZotWg.png",d="/wf-site/assets/image-20240711135557169-DXAwyz7m.png",u={};function k(m,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="入门程序" tabindex="-1"><a class="header-anchor" href="#入门程序" aria-hidden="true">#</a> 入门程序</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token operator">*</span>点动<span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token comment">//点动</span>
IF START <span class="token operator">=</span> <span class="token number">1</span> THEN
	OUTPUT <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
ELSE
	OUTPUT <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
IF START <span class="token operator">=</span> <span class="token number">1</span> THEN
	OUTPUT <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
ELSE
	OUTPUT <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="image-20240615202116085" tabindex="0" loading="lazy"><figcaption>image-20240615202116085</figcaption></figure><h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h1><figure><img src="'+o+`" alt="image-20240711112615475" tabindex="0" loading="lazy"><figcaption>image-20240711112615475</figcaption></figure><table><thead><tr><th><strong>数据类型</strong></th><th><strong>下限</strong></th><th><strong>上限</strong></th><th><strong>内存空间</strong></th></tr></thead><tbody><tr><td><strong>BYTE</strong></td><td>0</td><td>255</td><td>8 Bit</td></tr><tr><td><strong>WORD</strong></td><td>0</td><td>65535</td><td>16 Bit</td></tr><tr><td><strong>DWORD</strong></td><td>0</td><td>4294967295</td><td>32 Bit</td></tr><tr><td><strong>LWORD</strong></td><td>0</td><td>264-1</td><td>64 Bit</td></tr><tr><td><strong>SINT</strong></td><td>-128</td><td>127</td><td>8 Bit</td></tr><tr><td><strong>USINT</strong></td><td>0</td><td>255</td><td>8 Bit</td></tr><tr><td><strong>INT</strong></td><td>-32768</td><td>32767</td><td>16 Bit</td></tr><tr><td><strong>UINT</strong></td><td>0</td><td>65535</td><td>16 Bit</td></tr><tr><td><strong>DINT</strong></td><td>-2147483648</td><td>2147483647</td><td>32 Bit</td></tr><tr><td><strong>UDINT</strong></td><td>0</td><td>4294967295</td><td>32 Bit</td></tr><tr><td><strong>LINT</strong></td><td>-263</td><td>263-1</td><td>64 Bit</td></tr><tr><td><strong>ULINT</strong></td><td>0</td><td>264-1</td><td>64 Bit</td></tr></tbody></table><p><strong>浮点数：</strong></p><p><strong>REAL</strong> 和<strong>LREAL</strong> 就是所说的浮点类型。它们用来表示有理数。REAL占用32位内存，LREAL占用64位。</p><p><strong>REAL</strong>的范围值: 1.401e-45 to 3.403e+38。</p><p><strong>LREAL</strong>的范围值: 2.2250738585072014e-308 to 1.7976931348623158e+308。</p><p>**注：**数据类型 LREAL的支持取决于目标设备。请查看相应的文档，看在编译过程中，是否64位的类型 LREAL 转换成了 REAL。 (可能会丢失一些信息) 。</p><p><strong>字符串</strong></p><p>字符串数字类型变量可以包含任何字符串特性。在声明部分中的大小决定为其保留的内存空间。指的是字符串中字符的序号，可以放在圆括号和方括号中。如果没有大小规范，默认尺寸是80个字符。 字符串程度没有限制，但是字符串功能只能实现1 - 255 字符! 便如变量用一个很长的字符串初始化器变量数字类型，字符串将从右往左相应地截断。</p><p><strong>时间数据类型</strong></p><p>数据类型TIME, TIME_OF_DAY (简写为 TOD), DATE, 和 DATE_AND_TIME (简写为 DT) 的处理方式如DWORD。 TIME 和 TOD的时间以毫秒计算。 TOD时间 从 12:00 A.M开始， DATE 和DT 的时间以秒计算，1970年1月1号 12:00 A.M.开始。</p><p>**注意以下：**数据类型, 一般</p><p>LTIME: IEC 61131-3 标准扩展可用于 64-位时间数据类型</p><p>TIME 常量</p><p>DATE 常量</p><p>DATE_AND_TIME 常量</p><p>TIME_OF_DAY 常量 。</p><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h2><p>变量有多种类型 1.局部变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>VAR
<span class="token operator">/</span>这里设置相关变量
END VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.输入变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VAR INPUT
//这里设置输入变量
END VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.输出变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VAR OUTPUT
//这里设置输出变量
END VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.输入输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VAR IN OUT
//这里写输入输出变量
END VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.设置常量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VAR CONSTANT
/这里设置常量
END VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量地址定义" tabindex="-1"><a class="header-anchor" href="#变量地址定义" aria-hidden="true">#</a> 变量地址定义</h2><figure><img src="`+l+`" alt="image-20240711131337172" tabindex="0" loading="lazy"><figcaption>image-20240711131337172</figcaption></figure><p>语法：%&lt;存储器区前缀&gt;&lt;大小前缀&gt;&lt;数字&gt;.&lt;数字&gt;</p><p>编程系统支持以下3种存储区前缀</p><ol><li>I:输入，物理输入，，“传感器”</li><li>Q:输出，物理输出，“执行器”</li><li>M:存储位置</li></ol><p>编程系统支持以下大小前缀： 1)X:Bit,一位。 2)B:Byte,-个字节 3)W:Word,一个字 4)D:Double Word,两个字节（双字节）</p><p>第一个数字是变量对应内存前缀的偏移地址，“”后的数字是变量为BOOL类型时，偏移地址后的第几位。</p><p>%QX7.5输出区域偏移7个字节，第六位(bit5)。 %QX17输出区域偏移17个字节 %lW215输入区域偏移215个字 %MD48内存区域偏移48个双字 iVar AT%lW1):WORD; iVar变量是字类型，映射到输入区域偏移10字的位置</p><h3 id="定义语法" tabindex="-1"><a class="header-anchor" href="#定义语法" aria-hidden="true">#</a> 定义语法：</h3><p>&lt;标识&gt;{AT&lt;地址&gt;}：&lt;数据类型&gt;{：=&lt;初始值&gt;} }中是可选部分 g_bStartButton AT %IX100:BOOL := FALSE;</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>VAR
	ton1 <span class="token operator">:</span>TON<span class="token punctuation">;</span>
	in_byte <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">16</span>#<span class="token number">1</span><span class="token punctuation">;</span>
	n <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	TON_0<span class="token operator">:</span> TON<span class="token punctuation">;</span>
	btn AT <span class="token operator">%</span>IX0<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">:</span>BOOL <span class="token operator">:</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>
END_VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="赋值与运算类型" tabindex="-1"><a class="header-anchor" href="#赋值与运算类型" aria-hidden="true">#</a> 赋值与运算类型</h1><figure><img src="`+i+`" alt="image-20240711131600727" tabindex="0" loading="lazy"><figcaption>image-20240711131600727</figcaption></figure><p>还有S=和R=。置位赋值与复位赋值</p><h1 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h1><p>在结构化文本中有两种写注释的方法。 用“(”开始，“)”结束。这允许注释跨行注释。例如：“(This is a comment.)” 单行注释，用“/”作为注释的开始直到本行结束。例如：“/∥This is a comment..” 注释可以在ST编辑器声明或实现部分的任意地方。 注释的嵌套：注释可以放置在其他注释中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 注释</span>
<span class="token punctuation">(</span><span class="token operator">*</span>
IF nnnn <span class="token operator">=</span> <span class="token number">0</span> THEN
	in_out_byte <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_IF
<span class="token operator">*</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="常用语句" tabindex="-1"><a class="header-anchor" href="#常用语句" aria-hidden="true">#</a> 常用语句</h1><h2 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h2><h3 id="_1-if语句" tabindex="-1"><a class="header-anchor" href="#_1-if语句" aria-hidden="true">#</a> 1 IF语句</h3><p>IF语句用来判断某种条件是否满足。如果满足的话，则执行其内部的代码。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">IF</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    boolsc <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    c <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">IF</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span>
        boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        c <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    END_IF<span class="token punctuation">;</span>
    
ELSIF a <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span>
    boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    b <span class="token operator">:=</span> <span class="token number">11</span><span class="token punctuation">;</span>

<span class="token keyword">ELSE</span>
    boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IF条件成立执行if的内容，否则有elsIF执行有else执行else的语句。二者都没有就执行end_if之后的语句。</p><h3 id="_2-case语句" tabindex="-1"><a class="header-anchor" href="#_2-case语句" aria-hidden="true">#</a> 2 CASE语句</h3><p>CASE语句用来完成多分枝的选择判断，比如下面的代码：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">CASE</span> a <span class="token keyword">OF</span>
    <span class="token number">1</span><span class="token punctuation">:</span>
        b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token number">2</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">:</span>
        b <span class="token operator">:=</span> <span class="token number">111</span><span class="token punctuation">;</span>
        boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token number">5</span><span class="token punctuation">:</span>
        b <span class="token operator">:=</span> <span class="token number">111</span><span class="token punctuation">;</span>
        boolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        b <span class="token operator">:=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        c <span class="token operator">:=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
END_CASE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当case后的值与下面的值相等时，如a=1时就会执行b=1，boolsc=0语句。如果与下列所有结果都不相等就会执行else中的语句。后执行end_case后的语句。</p><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h2><p>循环结构可以在某种条件下反复执行某段代码，包括FOR语句、WHILE语句和REPEAT语句。</p><h3 id="_1-for语句" tabindex="-1"><a class="header-anchor" href="#_1-for语句" aria-hidden="true">#</a> 1 FOR语句</h3><p>FOR语句用于以次数确定的方式来执行某段代码。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">FOR</span> count <span class="token operator">:=</span> <span class="token number">1</span> <span class="token keyword">TO</span> <span class="token number">100</span> <span class="token keyword">DO</span>
    c <span class="token operator">:=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不写参数时，count会自增1.</p><p>如果想要自定义count的步数可以使用带by的语句</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">FOR</span> count <span class="token operator">:=</span> <span class="token number">1</span> <span class="token keyword">TO</span> <span class="token number">100</span> BY <span class="token number">2</span> <span class="token keyword">DO</span>
    c <span class="token operator">:=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>

<span class="token keyword">FOR</span> count <span class="token operator">:=</span> <span class="token number">1000</span> <span class="token keyword">TO</span> <span class="token number">1</span> BY <span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">DO</span>
    c <span class="token operator">:=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以每次count加2以2为步数自增或自减。但是当自减时，count的值需要大于等于to后面的值，不然会发生错误</p><h3 id="_2-while语句" tabindex="-1"><a class="header-anchor" href="#_2-while语句" aria-hidden="true">#</a> 2 WHILE语句</h3><p>WHILE语句适用于次数不确定的循环。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">WHILE</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DO</span>
    b <span class="token operator">:=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
END_WHILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要a=1条件成立就会一直执行程序。这样会发送死循环，所以while要配合条件退出指令使用</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">WHILE</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DO</span>
    b <span class="token operator">:=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    
    <span class="token keyword">IF</span> b <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">THEN</span>
        <span class="token keyword">EXIT</span><span class="token punctuation">;</span>
    END_IF<span class="token punctuation">;</span>
END_WHILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="特色数据类型" tabindex="-1"><a class="header-anchor" href="#特色数据类型" aria-hidden="true">#</a> 特色数据类型</h1><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">&lt;</span>Array_Namex<span class="token operator">:</span>ARRAY <span class="token punctuation">[</span><span class="token operator">&lt;</span>ll1<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>ul1<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>ll2<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>ul2<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>ll3<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>ul3<span class="token operator">&gt;</span><span class="token punctuation">]</span>OF <span class="token operator">&lt;</span>elem<span class="token punctuation">.</span>Type<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ll1,ll2,ll3定义区域的下限，ul1,ul2,ul3定义上限，数值必须为整数，elem.Type为每个数组元素数据类型</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	arr1 <span class="token operator">:</span>ARRAY <span class="token punctuation">[</span><span class="token number">1.</span><span class="token number">.10</span><span class="token punctuation">,</span><span class="token number">1.</span><span class="token number">.2</span><span class="token punctuation">]</span> OF INT<span class="token punctuation">;</span>
	arr2 <span class="token operator">:</span>ARRAY <span class="token punctuation">[</span><span class="token number">1.</span><span class="token number">.10</span><span class="token punctuation">,</span><span class="token number">1.</span><span class="token number">.2</span><span class="token punctuation">]</span> OF INT <span class="token operator">:</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>数组值为<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>
	arr3 <span class="token operator">:</span>ARRAY <span class="token punctuation">[</span><span class="token number">1.</span><span class="token number">.10</span><span class="token punctuation">]</span> OF INT <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>数组值为<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>部分初始化<span class="token operator">*</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h2><p>文件结构及数据类型</p><figure><img src="`+c+'" alt="image-20240711135020709" tabindex="0" loading="lazy"><figcaption>image-20240711135020709</figcaption></figure><figure><img src="'+r+`" alt="image-20240711135153596" tabindex="0" loading="lazy"><figcaption>image-20240711135153596</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>TYPE struct1 <span class="token operator">:</span>
STRUCT
	p1<span class="token operator">:</span> INT<span class="token punctuation">;</span>
	p2<span class="token operator">:</span> REAL<span class="token punctuation">;</span>
END_STRUCT
END_TYPE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>枚举类型是由若干串常量组成的，这些常量被称为枚举类型值。 语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>TYpE<span class="token operator">&lt;</span>identifier<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>enm_0<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>enm_1<span class="token operator">&gt;</span><span class="token punctuation">,</span>·<span class="token punctuation">.</span>·<span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token keyword">enum</span> <span class="token class-name">n</span><span class="token operator">&gt;</span>）<span class="token operator">|</span><span class="token operator">&lt;</span>base data type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
END TYPE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>identifier::自定义的枚举类型；enum_n:枚举类型对应的常量值，每个常量可以声明其对应值，如果不声明使用默认值；base data type枚举常量对应数据类型，可以不用声明，默认为整数。</p><figure><img src="`+d+`" alt="image-20240711135557169" tabindex="0" loading="lazy"><figcaption>image-20240711135557169</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>TYPE enum_1 <span class="token operator">:</span>
<span class="token punctuation">(</span>
	enum_member <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	acc <span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
END_TYPE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果枚举添加时没有赋值，则会参数给一个默认值。从0开始依次自增。</p>`,91)]))}const g=s(u,[["render",k],["__file","04st语言.html.vue"]]);export{g as default};
