import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-DBc2jY3V.js";const i="/wf-site/assets/202303082140652-B_Uc75xk.png",p="/wf-site/assets/202303082308673-D71uxG3l.png",o={};function c(l,t){return s(),a("div",null,t[0]||(t[0]=[e(`<h1 id="_15-qpainter和graphics-view绘图2" tabindex="-1"><a class="header-anchor" href="#_15-qpainter和graphics-view绘图2" aria-hidden="true">#</a> 15.QPainter和Graphics/View绘图2</h1><h3 id="graphics-view绘图" tabindex="-1"><a class="header-anchor" href="#graphics-view绘图" aria-hidden="true">#</a> Graphics/View绘图</h3><h4 id="graphics-view绘图框架介绍" tabindex="-1"><a class="header-anchor" href="#graphics-view绘图框架介绍" aria-hidden="true">#</a> Graphics/View绘图框架介绍</h4><p>Graphics/View 绘图框架类似于前面介绍的Model/View 机制。Graphics 指QGraphicsScene(场景)类,它是不可见的,相当于一个容器,在它里面放置各种图项(QGraphicsItem)并对放置的图项进行管理;View 指QGraphicsView 控件,QGraphicsScene 中的绘图项通过 QGraphicsView 控件显示出来,同一个 QGraphicsScene可以用多个QGraphicsView 显示</p><p>Graphics/View 框架结构主要包含三个主要的类:QGraphicsScene QGraphicsView和各种QGraphicsItem。QGraphicsScene(场景)本身不可见,但又是存储和管理2D图项的容器,场景没有自己的视觉外观,只负责管理图项,必须通过与之相连的 QGraphicsView 控件来显示图项及与外界进行交互操作。QGraphicsScene主要提供图项的操作接口,传递事件和管理各个图项的状态,提供无变换的绘制功能(如打印)。QGraphicsView 提供一个可视的窗口,用于显示场景中的图项。QGraphicsItem是场景中图项的基类图项有自定义的图项(继承自QGraphicsItem 的子类),还有标准的图项,例如矩形(QGraphicsRectItem)多边形(QGraphicsPolygonItem)、椭圆(QGraphicsEllipseItem)、路径(QGraphicsPathItem)线条(GraphicsLineltem)和文本(QGraphicsTextItem)等。读者可以把 QGraphicsScene理解成电影胶卷,把QGraphicsView 理解成电影放映机,而把图项理解成电影胶卷中的人物、树木、建筑物等。</p><p>QPainter采用面向过程的描述方式绘图,而 Graphics/View 采用面向对象的描述方式绘图。Graphics/View 框架中的每一个图项都是一个独立的元素,可以对图项进行操作,图项支持鼠标操作,可以对图项进行按下、移动、释放、双击、滚轮滚动和右键菜单操作,还支持键盘输人和拖放操作。Grphics/View 绘图时首先创建一个场景,然后创建图项对象(如直线对象、矩形对象),再使用场景的 add()丽数,将图项对象添加到场景中,最后通过视图控件进行显示。对于复杂的图像来说,如果其中包含大量的直线、曲线、多边形等对象,管理图项对象比管理 QPainter 的绘制过程语句要容易,并且图项对象更符合面向对象的思想,图形的重复使用性更好。</p><h4 id="graphics-view坐标系" tabindex="-1"><a class="header-anchor" href="#graphics-view坐标系" aria-hidden="true">#</a> Graphics/View坐标系</h4><p>Graphics/View 坐标系基于笛卡儿坐标系,图项在场景中的位置和几何形状通过 x坐标和y坐标表示。当使用没有变换的视图观察场景时,场景中的一个单位对应屏幕上的一个像素。 Graphics/View 架构中有三种坐标系统,分别是图项坐标、场景坐标和视图坐标。场景坐标类似于 QPainter 的逻辑坐标,一般以场景的中心为原点;视图标是窗口界面的物理坐标,其左上角为坐标原点,图项坐标是局部逻辑坐标,通常以图项的中心为原点。Graphics/View 提供了三个坐标系统之间的转换函数。</p><h5 id="图项坐标、场景坐标和视图坐标" tabindex="-1"><a class="header-anchor" href="#图项坐标、场景坐标和视图坐标" aria-hidden="true">#</a> 图项坐标、场景坐标和视图坐标</h5><p>图项存在于自己的本地坐标上,图项的坐标系通常以图项中心为原点,图项中心也是所有坐标变换的原点,图项坐标方向是 x轴正方向向右,y 轴正方向向下。</p><p>创建自定义图项时,需要注意图项的坐标,QGraphicsScene 和 QGraphicsView 会完成所有的变换。</p><ul><li>例如,如果接收到一个鼠标按下或拖人事件,所给的事件位置是基于图项坐标系的。如果某个点位于图项内部,使用图项上的点作为 QGraphicsItem.contains()虚函数的参数,函数会返回True。类似地,图项的边界矩形和形状也基于图项坐标系。</li><li>图项的位置是图项的中心点在其父图项坐标系统的坐标,场景可以理解成顶层图项,子图项的坐标与父图项的坐标相关,如果子图项无变换,则子图项坐标和父图项坐标之间的区别与它们的父图项的坐标相同。例如,如果一个无变换的子图项精确地位于父图项的中心点,则父子图项的坐标系统是相同的。</li><li>如果子图项的位置是(100,0),子图项上的点(0,100)就是父图项上的点(100,100)。即使图项的位置和变换与父图项相关,子图项的坐标也不会被父图项的变换影响,虽然父图项的变换会隐式地变换子图项。例如,即使父图项被翻转和缩放,子图项上的点(0,100)仍旧是父图项上的点(100,100)。</li><li>如果调用QGraphicsItem类的 paint()函数重绘图项,应以图项坐标系为基准场景坐标是所有图项的基础坐标系统。场景坐标系统描述了顶层图项的位置,并且构成从视图到场景的所有场景事件的基础。每个图项在场景上都有场景坐标和边界矩形。场景坐标的原点在场景中心,坐标方向是x轴正方向向右,轴正方向向下。视图坐标是窗口控件的坐标,视图坐标的单位是像素,QGraphicsView 的左上角是(00)。所有鼠标事件、拖拽事件最开始都使用视图坐标,为了和图项交瓦,需要转换为场景坐标。</li></ul><h5 id="坐标变换函数" tabindex="-1"><a class="header-anchor" href="#坐标变换函数" aria-hidden="true">#</a> 坐标变换函数</h5><p>在Graphics/View框架中,经常需要在不同种坐标间进行变换:从视图到场景,从场景到图项,从图项到图项。Graphics/View 框架中的坐标变换函数如下</p><ul><li>QGraphicsView.mapToScene()视图到场景</li><li>QGraphicsView.mapFromScene()场景到视图</li><li>QGraphicsItemmapFromScene()场景到图项</li><li>QGraphicsItem.mapToScene()图项到场景</li><li>QGraphicsItem.mapToParent()子图项到父图项</li><li>QGraphicsItem.mapFromParent()父图项到子图项</li><li>QGraphicsItem.mapToItem()本图项到其他图项</li><li>QGraphicsItem,mapFromItem()其他图项到本图项</li></ul><p>在场景中处理图项时,经常需要在场景到图项、图项到图项、视图到场景间进行坐标和图形转换。</p><ul><li>当在 QGraphicsView 的视口中单击鼠标时,应该通过调用QGraphicsView.mapToScence()与 QGraphicsScene,itemAt()函数来获知光标下是场景中的哪个图项;</li><li>如果想获知一个图项在视口中的位置,应该先在图项上调用QGraphicsItemmapToScene()函数,然后调用QGraphicsView,mapFromScene()函数;</li><li>如果想获知在一个视图中有哪些图项,应该把 QPainterPath 传递到 mapToScene()函数,然后再把映射后的路径传递到QGraphicsScene, items()函数。</li><li>可以调用QGraphicsItem,mapToScene()函数与QGraphicsItem,mapFromScene()函数在图项与场景之间进行坐标与形状的映射,也可以在子图项与其父图项之间通过QGraphicsItem,mapToParent()与QGraphicsItem.mapFromItem()函数进行映射。</li><li>所有映射函数可以包括点、矩形、多边形路径。视图与场景之间的映射也与此类似。对于视图与图项之间的映射,应该先从视图映射到场景,然后再从场景映射到图项。</li></ul><h4 id="视图控件qgraphicsvicw" tabindex="-1"><a class="header-anchor" href="#视图控件qgraphicsvicw" aria-hidden="true">#</a> 视图控件QGraphicsVicw</h4><p>视图控件QGraphicsView 用于显示场景中的图项,当场景超过视图区域时,视图会提供滚动条。</p><p>视图控件QGraphicsView 继承自 QAbstractScrollArea,视图控件根据场景的尺寸提供滚动区,当视图尺寸小于场景尺寸时会提供滚动条。</p><p>用QGraphicsView 类创建视图控件对象的方法如下所示其中parent是继承自QWidget 的窗口或控件;QGraphicsScene是场景实例对象,用于设置视图控件中的场景。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsView

QGraphicsView<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsView<span class="token punctuation">(</span>scene<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsScene<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="视图控件qgraphicsview的常用方法" tabindex="-1"><a class="header-anchor" href="#视图控件qgraphicsview的常用方法" aria-hidden="true">#</a> 视图控件QGraphicsView的常用方法</h5><p>视图控件的方法较多,一些常用方法如表所示</p><table><thead><tr><th>QGraphicsView的常用方法及参数类型</th><th>说:明</th></tr></thead><tbody><tr><td>setScene(scene:QGraphicsScene)</td><td>设置场景</td></tr><tr><td>scene()</td><td>获取场景QGraphicsScene</td></tr><tr><td>setSceneRect(rect:Union[QRectF,QRect])</td><td>设置场景在视图中的范围</td></tr><tr><td>setSceneRect(x: float,y: float,w: float,h: float)</td><td>设置场景在视图中的范围</td></tr><tr><td>sceneRect()</td><td>获取场景在视图中的范围 QRectF</td></tr><tr><td>setAlignment(alignment: Qt.Alignment)</td><td>设置场景全部可见时的对齐方式</td></tr><tr><td>setBackgroundBrush(brush:Union[QBrush,Qt.BrushStyle, Qt.GlobalColor, QColor, QGradient, QImage,QPixmap])</td><td>设置视图背景画刷</td></tr><tr><td>setForegroundBrush(brush: Union[QBrusb, Qt.BrushStyle, Qt.GlobalColor, QColor, QGradient, QImage,QPixmap])</td><td>设置视图前景画刷</td></tr><tr><td>drawBackground(painter:QPainter,rect:Union[QRectF,QRect])</td><td>重写该函数,在显示前景和图项前绘制背景</td></tr><tr><td>drawForeground(painter: QPainter,rect: Union[QRectF,QRect])</td><td>重写该函数,在显示背景和图项后绘制前景</td></tr><tr><td>centerOn(pos: :Union[QPointF, QPoint.QPainterPath.Element])</td><td>使某个点位于视图控件中心</td></tr><tr><td>centerOn(x:float,y: float)</td><td>使某个点位于视图控件中心</td></tr><tr><td>centerOn(item: QGraphicsItem)</td><td>使某个图项位于视图控件中心</td></tr><tr><td>ensureVisible(rect: Union[QRectF,QRectJ.xmargin:int=50,ymargin: int=50)</td><td>确保指定的矩形区域可见,可见时按指定的边距显 示；如不可见,滚动到最近的点</td></tr><tr><td>ensureVisible(x: float.y:float,w: float,h: float.xmargin:int=50,ymargin: int=50)</td><td>确保指定的矩形区域可见,可见时按指定的边距显 示；如不可见,滚动到最近的点</td></tr><tr><td>ensureVisible(QGraphicsItem,xmargin:int=50, ymargin: int=50)</td><td>确保指定的图项可见</td></tr><tr><td>fitInView(rect: Union[QRectF, QRect], aspectRadioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio)</td><td>以适合方式使矩形区域可见</td></tr><tr><td>fitInView(x:float,y: float,w: float,h: float, aspectRadioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio)</td><td>以适合方式使矩形区域可见</td></tr><tr><td>fitInView(item: QGraphicsItem,aspectRadioMode: Qt.AspectRatioMode=Qt.IgnoreAspectRatio)</td><td>以适合方式使图项可见</td></tr><tr><td>render(painter: QPainter,target: Union[QRectF, QRect], source: QRect, aspectRatioMode = Qt.KeepAspectRatio)</td><td>从source(视图)把图像复制到target(其他设备如 QImage)上</td></tr><tr><td>resetCachedContent()</td><td>重置缓存</td></tr><tr><td>rubberBandRect()</td><td>获取用鼠标框选的范围 QRect</td></tr><tr><td>setCacheMode(mode: QGraphicsView.CacheMode)</td><td>设置缓存模式 .</td></tr><tr><td>setDragMode(mode; QGraphicsView.DragMode)</td><td>设置鼠标拖拽模式</td></tr><tr><td>setInteractive(allowed:bool)</td><td>设置是否是交互模式</td></tr><tr><td>isInteractive()</td><td>获取是否是交互模式</td></tr><tr><td>setOptimizationFlag(flag: QGraphicsView.OptimizationFlag,enabled: bool=True)</td><td>设置优化显示标识</td></tr><tr><td>setOptimizationFlags(flags: QGraphicsView.OptimizationFlags)</td><td>设置优化显示标识</td></tr><tr><td>setRenderHint(hint: QPainter.RenderHint, enabled: bool=True) 恋雯豆济</td><td>设置提高绘图质量标识</td></tr><tr><td>setRenderHints(hints:QPainter.RenderHints)</td><td>设置提高绘图质量标识</td></tr><tr><td>setResizeAnchor(QGraphicsView.ViewportAnchor)</td><td>设置视图控件改变尺寸时的锚点</td></tr><tr><td>resizeAnchor()</td><td>获取锚点</td></tr><tr><td>setRubberBandSelectionMode(Qt.ItemSelectionMode)</td><td>设置用鼠标框选模式</td></tr><tr><td>setTransform(matrix: QTransform,combine: bool=False)</td><td>用变换矩阵变换视图</td></tr><tr><td>transform()</td><td>获取变换矩阵 QTransform</td></tr><tr><td>isTransformed()</td><td>获取是否进行过变换</td></tr><tr><td>resetTransform()</td><td>重置变换</td></tr><tr><td>setTransformationAnchor(QGraphicsView.ViewportAnchor)</td><td>设置变换时的锚点</td></tr><tr><td>setViewportUpdateMode(QGraphicsView.ViewportUpdateMode)</td><td>设置刷新模式</td></tr><tr><td>[slot]updateScene(rects: Sequence[QRectF])</td><td>更新场景</td></tr><tr><td>[slot]updateSceneRect(rect: Union[QRectF, QRect])</td><td>更新场景</td></tr><tr><td>[slot]invalidateScene(rect: Union[QRectF, QRect], layers: QGraphicsScene.SceneLayers= QGraphicsScene.AllLayers)</td><td>使指定的场景区域进行更新和重新绘制,相当于对 指定区域进行 update()操作</td></tr><tr><td>setupViewport(QWidget)</td><td>重写该函数,设置视口控件</td></tr><tr><td>scale(sx: float, sy: float)</td><td>缩放</td></tr><tr><td>rotate(angle: float)</td><td>旋转角度,瞬时针方向为正</td></tr><tr><td>shear(sh: float,sv:float)</td><td>错切</td></tr><tr><td>translate(dx: float,dy:float)</td><td>平移</td></tr></tbody></table><p>视图控件获取图项的方法如表所示</p><table><thead><tr><th>QGraphicsView 获取图项的方法</th><th>返回值的类型</th></tr></thead><tbody><tr><td>itemAt(pos:QPoint)</td><td>QGraphicsItem</td></tr><tr><td>itemAt(x:int,y:int)</td><td>QGraphicsItem</td></tr><tr><td>items()</td><td>List[QGraphicsItem]</td></tr><tr><td>items(pos: QPoint)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(x:int,y:int)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(x: int, y: int, w: int,h: int, mode = Qt.IntersectsItemShape)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(rect: QRect, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(polygon: Union[QPolygon,Sequence[QPoint],QRect], mode: Qt.ItemSelectionMode=Qt.IntersectsItemShape)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape)</td><td>List[QGraphicsItem]887:590</td></tr></tbody></table><p>视图控件中点的坐标与场景坐标互相转换的方法如表所示</p><table><thead><tr><th>场景到视图的坐标变换方法</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapFromScene(Union[QPointF, QPoint])</td><td>QPoint</td></tr><tr><td>mapFromScene(QRectF)</td><td>QPolygon</td></tr><tr><td>mapFromScene(polygon: Union[QPolygonF,Sequence[QPointF], QPolygon,QRectF])</td><td>QPolygon</td></tr><tr><td>mapFromScene(path:QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapFromScene(x: float.y: float)</td><td>QPoint</td></tr><tr><td>mapFromScene(x: float,y: float, w:float,h: float)</td><td>QPolygon</td></tr><tr><td>mapToScene(point:QPoint)</td><td>QPointF</td></tr><tr><td>mapToScene(rect: QRect)</td><td>QPolygonF</td></tr><tr><td>mapToScene(Union[QPolygon, Sequence[QPoint],QRect])</td><td>QPolygonF</td></tr><tr><td>mapToScene(QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapToScene(x:int,y: int)</td><td>QPointF</td></tr><tr><td>mapToScene(int,int,int,int)</td><td>QPolygonF</td></tr></tbody></table><p>主要方法介绍如下。</p><ul><li>给视图控件设置场景,可以在创建视图对象时设置,也可以用setScene(QGraphicsScene)方法设置;用scene()方法获取场景。</li><li>用setSceneRect(rect; Union[QRectF,QRect])方法或 setSceneRect(x: float,y:float,w;float,h;float)方法设置场景在视图中的范围,用sceneRect()方法获取场景在视图中的范围,当场景的面积超过视图所显示的范围时,可用滚动条来移动场景。</li><li>用setAlignment(Qt.Alignment)方法设置场景在视图控件全部可见时的对齐方式Qt.Alignment 可以取以下值,默认是 Qt.AlignCenter <ul><li>Qt.AlignLeft</li><li>Qt.AlignRight</li><li>Qt.AlignHCenter</li><li>Qt.AlignJustify</li><li>Qt.AlignTop,</li><li>Qt.AlignBottom</li><li>Qt.AlignVCenter</li><li>Qt.AlignBaseline</li><li>Qt.AlignCenter</li></ul></li><li>创建视图控件的子类,并重写 drawBackground(QPainter,QRectF)函数可以在显示前景和图项之前绘制背景; <ul><li>重写 drawForeground(QPainter;QRectF)函数,可以在显示背景和图项之后绘制前景。</li><li>场景分为背景层、图项层和前景层三层,前面的层会挡住后面的层。</li></ul></li><li>用setCacheMode(mode:QGraphicsView.CacheMode)方法可以设置缓存模式,参数 mode可取: <ul><li>QGraphicsView.CacheNone(没有缓存)</li><li>QGraphicsView.CacheBackground(缓存背景)</li></ul></li><li>用setInteractive(bool)方法设置视图控件是否是交互模式在交互模式下可以接受鼠标键盘事件;</li><li>用isInteractive()方法可以获取是否是交互模式用setDragMode(mode:QGraphicsViewDragMode)方法设置在视图控件中按住鼠标左键选择图项时的拖拽模式,参数 mode 可取: <ul><li>QGraphicsView.NoDrag(忽略鼠标事件)</li><li>QGraphicsView.ScrollHandDrag(在交互或非交互模式下,光标变成手的形状,拖动鼠标会移动整个场景)</li><li>QGraphicsView.RubberBandDrag(在交互模式下可以框选图项)。</li></ul></li><li>用setRubberBandSelectionMode(QtItemSelectionMode)方法设置框选图项时,图项是否能被选中,其中参数 Qt ItemSelectionMode可以取: <ul><li>QtContainsItemShapeQt.IntersectsItemShape</li><li>Qt.ContainsItemBoundingRect</li><li>Qt.IntersectsItemBoundingRect</li></ul></li><li>用setOptimizationFlag(flag;QGraphicsView.OptimizationFlag,enabled: bool=True)方法设置视图控件优化显示标识,参数 lag可以取: <ul><li>QGraphicsView.DontSavePainterState(不保存绘图状态)</li><li>QGraphicsView.DontAdjustForAntialiasing(不调整反锯齿)</li><li>QGraphicsView.IndirectPainting(间接绘制)。</li></ul></li><li>用scale(sx; float,sy:float)方法、rotate(angle; float)方法、shear(sh; float;sv:float)方法和translate(dx:floatdy: flat)方法可以对场景进行缩放、旋转、错切和平移,</li><li>用setTransform(matrix;QTransform;combine:bool=False)方法可以用变换矩阵对场景进行变换。</li><li>用setResizeAnchor(QGraphicsViewViewportAnchor)方法设置视图尺寸发生改变时的错点;</li><li>用setTransformationAnchor(QGraphicsViewViewportAnchor)方法设置对视图进行坐标变换时的锚点,锚点的作用是定位场景在视图控件中的位置。其中QGraphicsView.ViewportAnchor可取: <ul><li>QGraphicsView.NoAnchor(没有锚点,场景位置不变)</li><li>QGraphicsView.AnchorViewCenter(场景在视图控件的中心点作为锚点)</li><li>QGraphicsView.AnchorUnderMouse(光标所在的位置作为错点)。</li><li>如果场景在视图控件中全部可见将使用对齐设置 setAlignment(alignment:QtAlignment)的参数</li></ul></li><li>用setViewportUpdateMode(QGraphicsView.ViewportUpdateMode)方法设置视图刷新模式,参数 QGraphicsView,ViewportUpdateMode 可以取: <ul><li>QGraphicsView.FullViewportUpdate</li><li>QGraphicsView.MinimalViewportUpdate</li><li>QGraphicsView.SmartViewportUpdate</li><li>QGraphicsView.BoundingRectViewportUpdate</li><li>QGraphicsView.NoViewportUpdate;</li></ul></li><li>可用槽函数 updateScene(rects; Sequence[QRectF])updateSceneRect(rect;Union[QRectF,QRect])或 invalidateScene(rect; UnionQGraphicsScene.SceneLayers = QGraphicsScene.[QRectF,QRect],layers:AllLayers)方法只刷新指定的区域,参数 layers 可以取: <ul><li>QGraphicsScene.ItemLayer</li><li>QGraphicsScene.BackgroundLayer</li><li>QGraphicsScene.ForegroundLayer</li><li>QGraphicsScene.AllLayers</li></ul></li><li>用itemAt()方法可以获得光标位置处的一个图项,如果有多个图项,则获得最上面的图项; <ul><li>用items()方法可以获得多个图项列表,图项列表中的图项按照z值从顶到底的顺序排列。</li><li>可以用矩形、多边形或路径获取其内部的图项,例如 items(QRect,mode=Qt、IntersectsItemShape)方法,参数 mode可取: <ul><li>Qt.ContainsItemShape(图项完全在选择框内部)</li><li>Qt.IntersectsItemShape(图项在选择框内部和与选择框相交)</li><li>Qt.ContainsItemBoundingRect(图项的边界矩形完全在选择框内部)</li><li>Qt.IntersectsItemBoundingRect(图项的边界矩形完全在选择框内部和与选择框交叉)</li></ul></li></ul></li><li>用mapFromScene()方法可以把场景中的一个点坐标转换成视图控件的坐标 <ul><li>mapToScene()方法可以把视图控件的一个点转换成场景中的坐标。</li></ul></li><li>由于QGraphicsView 继承自QWidget,因此 QGraphicsView 提供了拖拽功能Graphics/View框架也为场景图项提供拖拽支持。 <ul><li>当视图控件接收到拖拽事件GraphicsView框架会将拖拽事件翻译成 QGraphicsSceneDragDropEvent 事件时再发送到场景,场景接管事件,再把事件发送到光标下接受拖拽的第一个图项。为了开启图项拖拽功能,需要在图项上创建一个 QDrag 对象。</li></ul></li><li>用setViewport(QWidget)方法可以设置视口的控件,如果不设置,会使用默认的控件。如果要使用OpenGL渲染,则需设置 setViewport(QOpenGLWidget)。</li></ul><h5 id="视图控件qgraphicsview信号" tabindex="-1"><a class="header-anchor" href="#视图控件qgraphicsview信号" aria-hidden="true">#</a> 视图控件QGraphicsView信号</h5><p>视图控件QGraphicsView只有一个信号 rubberBandChanged(viewportRect:QRect,fromScenePoint:QPointF,toScenePoint:QPointF),当框选的范围发生改变时发送信号。</p><h5 id="视图控件qgraphicsview的应用实例" tabindex="-1"><a class="header-anchor" href="#视图控件qgraphicsview的应用实例" aria-hidden="true">#</a> 视图控件QGraphicsView的应用实例</h5><p>下面的程序首先建立视图控件的子类,创建自定义信号,信号的参数是单击鼠标或移动鼠标时光标在视图控件的位置,并重写了鼠标单击、移动事件和背景函数,然后在场景中建立一个矩形和一个圆用鼠标可以拖动矩形和圆,并在状态栏上显示鼠标拖动点的视图坐标、场景坐标和图项坐标。</p><figure><img src="`+i+`" alt="image-20230308212554836" tabindex="0" loading="lazy"><figcaption>image-20230308212554836</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/6 23:23</span>
<span class="token comment"># File_name: 01- 视图控件QGraphicsView的应用实例.py</span>


<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QGraphicsScene<span class="token punctuation">,</span> QGraphicsView<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QStatusBar<span class="token punctuation">,</span> QGraphicsRectItem<span class="token punctuation">,</span> QGraphicsItem<span class="token punctuation">,</span> QGraphicsEllipseItem
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> QPoint<span class="token punctuation">,</span> QRectF


<span class="token keyword">class</span> <span class="token class-name">myGraphicsView</span><span class="token punctuation">(</span>QGraphicsView<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 视图控件的子类</span>
    point_position <span class="token operator">=</span> Signal<span class="token punctuation">(</span>QPoint<span class="token punctuation">)</span>  <span class="token comment"># 自定义信号,参数是光标在视图中的位置</span>

    <span class="token keyword">def</span> <span class="token function">__init_</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 鼠标单击事件</span>
        self<span class="token punctuation">.</span>point_position<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>event<span class="token punctuation">.</span>position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送信号,参数是光标位置</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mousePressEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">mouseMoveEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 鼠标移动事件</span>
        self<span class="token punctuation">.</span>point_position<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>event<span class="token punctuation">.</span>position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mouseMoveEvent<span class="token punctuation">(</span>event<span class="token punctuation">)</span>  <span class="token comment"># 发送信号,参数是光标位置</span>

    <span class="token keyword">def</span> <span class="token function">drawBackground</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> painter<span class="token punctuation">,</span> rectF<span class="token punctuation">)</span><span class="token punctuation">:</span>
        painter<span class="token punctuation">.</span>fillRect<span class="token punctuation">(</span>rectF<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>  <span class="token comment"># 重写背景函数,设置背景颜色</span>


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setupUI<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setupUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>graphicsView <span class="token operator">=</span> myGraphicsView<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 视图窗口</span>
        self<span class="token punctuation">.</span>statusbar <span class="token operator">=</span> QStatusBar<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 状态栏</span>
        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>graphicsView<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>statusbar<span class="token punctuation">)</span>
        rectF <span class="token operator">=</span> QRectF<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>graphicsScene <span class="token operator">=</span> QGraphicsScene<span class="token punctuation">(</span>rectF<span class="token punctuation">)</span>  <span class="token comment"># 创建场景</span>

        self<span class="token punctuation">.</span>graphicsView<span class="token punctuation">.</span>setScene<span class="token punctuation">(</span>self<span class="token punctuation">.</span>graphicsScene<span class="token punctuation">)</span>  <span class="token comment"># 视图窗口设置场景</span>
        rect_item <span class="token operator">=</span> QGraphicsRectItem<span class="token punctuation">(</span>rectF<span class="token punctuation">)</span>  <span class="token comment"># 以场景为坐标创建矩形</span>

        rect_item<span class="token punctuation">.</span>setFlags<span class="token punctuation">(</span>QGraphicsItem<span class="token punctuation">.</span>ItemIsSelectable <span class="token operator">|</span> QGraphicsItem<span class="token punctuation">.</span>ItemIsMovable<span class="token punctuation">)</span>  <span class="token comment"># 标识</span>
        self<span class="token punctuation">.</span>graphicsScene<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>rect_item<span class="token punctuation">)</span>  <span class="token comment"># 在场景中添加图项</span>
        rectF <span class="token operator">=</span> QRectF<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>
        ellipse_item <span class="token operator">=</span> QGraphicsEllipseItem<span class="token punctuation">(</span>rectF<span class="token punctuation">)</span>  <span class="token comment"># 以场景为坐标创建椭圆</span>
        ellipse_item<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>green<span class="token punctuation">)</span>  <span class="token comment"># 设置画刷</span>

        ellipse_item<span class="token punctuation">.</span>setFlags<span class="token punctuation">(</span>QGraphicsItem<span class="token punctuation">.</span>ItemIsSelectable <span class="token operator">|</span> QGraphicsItem<span class="token punctuation">.</span>ItemIsMovable<span class="token punctuation">)</span>  <span class="token comment"># 标识</span>
        self<span class="token punctuation">.</span>graphicsScene<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>ellipse_item<span class="token punctuation">)</span>  <span class="token comment"># 在场景中添加图项</span>
        self<span class="token punctuation">.</span>graphicsView<span class="token punctuation">.</span>point_position<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mousePosition<span class="token punctuation">)</span>  <span class="token comment"># 信号与槽的连接</span>

    <span class="token keyword">def</span> <span class="token function">mousePosition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 槽函数</span>
        template <span class="token operator">=</span> <span class="token string">&quot;view坐标:{},{}   scene坐标:{},{}   item坐标:{},{}&quot;</span>
        point_scene <span class="token operator">=</span> self<span class="token punctuation">.</span>graphicsView<span class="token punctuation">.</span>mapToScene<span class="token punctuation">(</span>point<span class="token punctuation">)</span>  <span class="token comment"># 视图中的点映射到场景中</span>
        item <span class="token operator">=</span> self<span class="token punctuation">.</span>graphicsView<span class="token punctuation">.</span>itemAt<span class="token punctuation">(</span>point<span class="token punctuation">)</span>  <span class="token comment"># 获取视图控件中的图项</span>

        <span class="token comment"># item = self.graphicsScene.itemAt(point_scene, self.graphicsView.transform()) # 场景中图项</span>

        <span class="token keyword">if</span> item<span class="token punctuation">:</span>
            point_item <span class="token operator">=</span> item<span class="token punctuation">.</span>mapFromScene<span class="token punctuation">(</span>point_scene<span class="token punctuation">)</span>  <span class="token comment"># 把场景坐标转换为图项坐标</span>
            string <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_scene<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_scene<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_item<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_item<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">else</span><span class="token punctuation">:</span>
            string <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_scene<span class="token punctuation">.</span>x<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point_scene<span class="token punctuation">.</span>y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;None&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>statusbar<span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span>string<span class="token punctuation">)</span>  <span class="token comment"># 在状态栏中显示坐标信息</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景qgraphicsscene" tabindex="-1"><a class="header-anchor" href="#场景qgraphicsscene" aria-hidden="true">#</a> 场景QGraphicsScene</h4><p>场景 QGraphicsScene是图项的容器,用于存放和管理图项。</p><p>QGraphicsScene 继承自QObject,用QGraphicsScene 类创建场景实例对象的方法如下,其中parent 是继承自QObiect 的实例对象,QRetQRectF 定义场景的范围。</p><p>用场景范围来确定视图的默认可滚动区域,场景主要使用它来管理图形项索引。如果未设置或者设置为无效的矩形则sceneRect()方法将返回自创建场景以来场景中所有图形项的最大边界矩形即当在场景中添加或移动图形项时范围会增大,但不会减小。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsScene

QGraphicsScene<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsScene<span class="token punctuation">(</span>sceneRect<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QRectF<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsScene<span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="场景-qgraphicsscene-的常用方法" tabindex="-1"><a class="header-anchor" href="#场景-qgraphicsscene-的常用方法" aria-hidden="true">#</a> 场景 QGraphicsScene 的常用方法</h5><h6 id="场景中添加和删除图项的方法如表所示" tabindex="-1"><a class="header-anchor" href="#场景中添加和删除图项的方法如表所示" aria-hidden="true">#</a> 场景中添加和删除图项的方法如表所示</h6><table><thead><tr><th>QGraphicsScene 中添加和移除图项的方法</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>addItem(QGraphicsItem)</td><td>None</td><td>添加图项</td></tr><tr><td>addEllipse(rect:Union[QRectF,QRect],pen:Union[QPen,Qt.PenStyle,QColor],brush: Union[QBrush, Qt.BrushStyle, Qt.GlobalColor,QColor, QGradient, QImage,QPixmap])</td><td>QGraphicsEllipseItem</td><td>添加椭圆</td></tr><tr><td>addEllipse(x: float,y: float,w: float,h: float,pen, brush)</td><td>QGraphicsEllipseItem</td><td>添加椭圆</td></tr><tr><td>addLine(line: Union[QLineF,QLine],pen)</td><td>QGraphicsLineItem</td><td>添加线</td></tr><tr><td>addLine(xl: float,yl:float,x2: float,y2: float,pen)</td><td>QGraphicsLineItem</td><td>添加线</td></tr><tr><td>addPath(path:QPainterPath,pen,brusb)</td><td>QGraphicsPathItem</td><td>添加绘图路径</td></tr><tr><td>addPixmap(pixmap:Union[QPixmap,QImage,str])</td><td>QGraphicsPixmapItem</td><td>添加图像</td></tr><tr><td>addPolygon(polygon:Union[QPolygonF, Sequence[QPointF],QPolygon,QRectF],pen,brush)</td><td>QGraphicsPolygonItem</td><td>添加多边形</td></tr><tr><td>addRect(rect: Union[QRectF,QRect],pen,brush)</td><td>QGraphicsRectItem</td><td>添加矩形</td></tr><tr><td>addRect(x: float, y: float,w: float, h: float, pen, brush) .</td><td>QGraphicsRectItem</td><td>添加矩形</td></tr><tr><td>addSimpleText(text: str,font; Union[QFont,str])</td><td>QGraphicsSimpleTextItem</td><td>添加简单文字</td></tr><tr><td>addText(text: str,font:Union[QFont,str])</td><td>QGraphicsTextItem</td><td>添加文字</td></tr><tr><td>addWidget(QWidget,wFlags:Qt.WindowFlags)</td><td>QGraphicsProxyWidget</td><td>添加图形控件</td></tr><tr><td>removeItem(QGraphicsItem)</td><td>None</td><td>移除图项</td></tr><tr><td>[slot]clear()</td><td>None</td><td>清空所有图项</td></tr></tbody></table><h6 id="场景获取图项的方法如表所示" tabindex="-1"><a class="header-anchor" href="#场景获取图项的方法如表所示" aria-hidden="true">#</a> 场景获取图项的方法如表所示</h6><table><thead><tr><th>QGraphicsScene 获取图项的方法及参数类型</th><th>返回值的类型</th></tr></thead><tbody><tr><td>itemAt(pos: Union[QPointF, QPoint, QPainterPath.Element].deviceTransform: QTransform)</td><td>QGraphiesItem</td></tr><tr><td>itemAt(x: float,y: float.deviceTransform: QTransform)</td><td>QGraphicsItem</td></tr><tr><td>jtems(order:Qt.SortOrder=Qt.DescendingOrder)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(path: QPainterPath, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape,order,deviceTransform)</td><td>List[QGraphiesItemJ .</td></tr><tr><td>items(polygon: Union[QPolygonF,Sequence[QPointF],QPolygon,QRectF], mode.order,deviceTransform)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(pos: Union[QPointF, QPoint, QPainterPath.Element],mode, order, deviceTransform)</td><td>List[QGraphiesItem]</td></tr><tr><td>items(rect: Union[QRectF,QRect],mode,order,deviceTransform)</td><td>List[QGraphicsItem]</td></tr><tr><td>items(x: float,y: float,w: float,h: float, mode,order,deviceTransform)</td><td>List[QGraphicsItem]</td></tr></tbody></table><h6 id="场景的其他常用方法如表所示" tabindex="-1"><a class="header-anchor" href="#场景的其他常用方法如表所示" aria-hidden="true">#</a> 场景的其他常用方法如表所示</h6><table><thead><tr><th>QGraphicsScene的其他常用方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setSceneRect(rect:Union[QRectF,QRect])</td><td>设置场景范围</td></tr><tr><td>setSceneRect(x:float,y:float,w: float,h: float)</td><td>设置场景范围</td></tr><tr><td>sceneRect()</td><td>获取场景范围 QRectF</td></tr><tr><td>width()、height()</td><td>获取场景的宽度和高度</td></tr><tr><td>collidingItems(QGraphicsItem,mode=Qt.IntersectsItemShape)</td><td>获取碰撞的图项列表 List[QGraphicsltem]</td></tr><tr><td>createItemGroup(Sequence[QGraphicsItem])</td><td>创建组,返回QGraphicsItemGroup</td></tr><tr><td>destroyItemGroup(QGraphicsItemGroup)</td><td>打散图项组</td></tr><tr><td>hasFocus()</td><td>获取场景是否有焦点,有焦点时可以接受键盘 事件</td></tr><tr><td>clearFocus()</td><td>使场景失去焦点</td></tr><tr><td>[slot]invalidate(rect: Union[QRectF, QRect], layers =QGraphicsScene.AllLayers)</td><td>刷新指定的区域</td></tr><tr><td>invalidate(x:float,y: float,w: float,h: float, layers=QGraphicsScene.AllLayers)</td><td>刷新指定的区域</td></tr><tr><td>[slot]update(rect:Union[QRectF,QRect])</td><td>更新区域</td></tr><tr><td>update(x:float,y: float,w: float.h: float)</td><td>更新区域</td></tr><tr><td>isActive()</td><td>场景用视图显示且视图活跃时返回True</td></tr><tr><td>itemsBoundingRect()</td><td>获取图项的矩形区域 QRectF</td></tr><tr><td>mouseGrabberItem()</td><td>获取光标抓取的图项 QGraphicsltem</td></tr><tr><td>render(QPainter, target=QRectF(),source=QRectF(),mode=Qt.KeepAspectRatio)</td><td>将指定区域的图形复制到其他设备的指定区 域上</td></tr><tr><td>selectedItems()</td><td>获取选中的图项列表 List[QGraphicsltem]</td></tr><tr><td>setActivePanel(item; QGraphicsItem)</td><td>将场景中的图项设置成活跃图项</td></tr><tr><td>activePanel()</td><td>获取活跃的图项</td></tr><tr><td>setActiveWindow(widget:QGraphicsWidget)</td><td>将场景的视图控件设置成活跃控件</td></tr><tr><td>setBackgroundBrush(Union[QBrush, QColor, Qt.GlobalColor,QGradient])</td><td>设置背景画刷</td></tr><tr><td>setForegroundBrush(Union[QBrush,QColor,Qt.GlobalColor,QGradient])</td><td>设置前景画刷</td></tr><tr><td>drawBackground(QPainter,QRectF)</td><td>重写该函数,绘制背景</td></tr><tr><td>drawForeground(QPainter,QRectF)</td><td>重写该函数,绘制前景</td></tr><tr><td>backgroundBrush()、foregroundBrush()</td><td>获取背景画刷、获取前景画刷QBrush</td></tr><tr><td>setFocus(focusReason=Qt.OtherFocusReason)</td><td>使场景获得焦点</td></tr><tr><td>setFocusItem(QGraphicsltem,focusReason: Qt.FocusReason=Qt.OtherFocusReason)</td><td>使某个图项获得焦点</td></tr><tr><td>focusItem()</td><td>获取有焦点的图项</td></tr><tr><td>setFocusOnTouch(bool)</td><td>在平板电脑上通过手触碰获得焦点</td></tr><tr><td>focusNextPrevChild(next:bool)</td><td>查找一个新的图形控件,以使键盘焦点对准 Tab 键和Shift+ Tab键,如果可以找到则返回 true；否则返回false。如果next为true则此函 数向前搜索,否则向后搜索</td></tr><tr><td>setItemIndexMethod(QGraphicsScene.ItemIndexMethod)</td><td>设置图项搜索方法</td></tr><tr><td>setBspTreeDepth(int)</td><td>设置 BSP 树的搜索深度</td></tr><tr><td>setMinimumRenderSize(float)</td><td>图项变换后,尺寸小于设置的尺寸时不渲染</td></tr><tr><td>setSelectionArea(path: QPainterPath,deviceTransform)</td><td>将绘图路径内的图项选中,外部的图项取消选 中。对于需要选中的图项,必须标记为 QGraphicsItem.ItemIsSelectable</td></tr><tr><td>setSelectionArea(path: QPainterPath, selectionOperation: Qt.ItemSelectionOperation = Qt.ReplaceSelection, mode: Qt.ItemSelectionMode = Qt.IntersectsItemShape, deviceTransform: QTransform =Default(QTransform))</td><td>将绘图路径内的图项选中,外部的图项取消选 中。对于需要选中的图项,必须标记为 QGraphicsItem.ItemIsSelectable</td></tr><tr><td>selectionArea()</td><td>获取选中区域内的绘图路径QPainterPath</td></tr><tr><td>[slot]clearSelection()</td><td>取消选择</td></tr><tr><td>setStickyFocus(enabled:bool)</td><td>单击背景或者单击不接受焦点的图项时,是否 失去焦点</td></tr><tr><td>setFont(QFont)</td><td>设置字体</td></tr><tr><td>setPalette(QPalette)</td><td>设置调色板</td></tr><tr><td>setStyle(QStyle)</td><td>设置风格</td></tr><tr><td>views()</td><td>获取场景关联的视图控件列表</td></tr><tr><td>[slot]advance()</td><td>调用图项的advance()方法,通知图项可移动</td></tr></tbody></table><h6 id="主要方法介绍如下" tabindex="-1"><a class="header-anchor" href="#主要方法介绍如下" aria-hidden="true">#</a> 主要方法介绍如下</h6><ul><li><p>场景中添加从 QGraphicsItem 继承的子类的方法是 addItem(QGraphicsItem)。</p><ul><li>另外还可以添加一些标准的图项,用addEllipse()、addLine() addPath() addPixmap()、addPolygon()、addRect()addSimpleText()addText()和 addWidget()方法可以添加椭圆、直线、绘图路径、图像、多边形、矩形、简单文本、文本和控件,并返回图项。</li><li>其中用addWidget(QWidget,Qt.WindowType)方法可以将一个控件以代理控件的方法添加到场景中,并返回代理控件,按照添加顺序,后添加的图项会在先添加图项的前端;</li><li>用removeItem(QGraphicsItem)方法可以从场景中移除图项用clear()方法可以移除所有的图项。</li></ul></li><li><p>用itemAt(pos: Union[QPointF, QPoint, QPainterPath, Element], deviceTransform :QTransform)或itemAt(x: float,y:float,deviceTransform:QTransform)方法可以获得某个位置处z值最大的图项,参数 QTransform 表示变换矩阵可以取graphicsView.transform()。</p><ul><li>用items()方法可以获得某个位置的图项列表,例如items(QPoint,mode,order,QTransform), <ul><li>其中参数 mode 是 Qt ItemSelectionMode类型值,可以取: <ul><li>QtContainsItemShape(完全包含)</li><li>Qt.IntersectsItemShape(完全包含和交叉)</li><li>Qt.ContainsItemBoundingRect(完全包含边界矩形)</li><li>Qt.IntersectsItemBoundingRect(完全包含矩形边界和交叉边界);</li></ul></li><li>order 是指图项z值的顺序,可以取以下值,默认是Qt.DescendingOrder。 <ul><li>Qt.DescendingOrder(降序)</li><li>Qt.AscendingOrder(升序)</li></ul></li></ul></li></ul></li><li><p>用collidingItems(QGraphicsItem,mode=Qt.IntersectsItemShape)方法可以获取与指定图项产生碰撞的图项列表,参数 mode可以取:</p><ul><li>QContainsItemShape</li><li>Qt.IntersectsItemShape</li><li>Qt.ContainsltemBoundingRect</li><li>Qt.IntersectsltemBoundingRect。</li></ul></li><li><p>用createItemGroup(Sequence[QGraphicsItem])方法可以将多个图项定义成组并返回QGraphicsItemGroup 对象</p><ul><li>可以把组内的图项当成一个图项进行操作内的图项可以同时进行缩放平移和旋转操作。</li></ul></li><li><p>可以用QGraphicsItemGroup的ddToGroup(QGraphicsItem)方法添加图项</p><ul><li>用removeFromGroup(QGraphicsItem)方法移除图项。</li><li>用setSceneRect(rect; Union[QRectF,QRect])或 setSceneRect(x: float,y: float,w:float,h:float)方法设置场景的范围,用sceneRect()方法获取场景范围</li></ul></li><li><p>用setItemIndexMethod(QGraphicsScene ItemIndexMethod)方法设置在场景中搜索图项位置的方法,其中QGraphicsScene.ItemIndexMethod 可取:</p><ul><li>QGraphicsScene BspTreeIndex(BSP树方法,适合静态场景)</li><li>QGraphicsScene.Nolndex(适合动态场景)。</li><li>BSP(binary space partitioning)树是二维空间分制树方法,又称为二叉法。用setBspTreeDepth(int)方法设置 BSP树的搜索深度</li></ul></li><li><p>场景分为背景层图项层和前景层,</p><ul><li><p>QGraphicsScene.BackgroundLayer</p></li><li><p>QGraphicsScene.ItemLayer</p></li><li><p>QGraphicsScene.ForegroundLayer</p><p>分别用以上值表示,这三层可用QGraphicsScene.AllLayers 表示。</p></li><li><p>用invalidate(rect: Union[QRectF,QRect],layers:QGraphicsScene.SceneLayers = QGraphicsScene.AllLayers)方法或invalidate(x; float,y: float, w; float, h: float, layers; QGraphicsScene.SceneL ayers =QGraphicsScene.AllLayers)方法将指定区域的指定层设置为失效后再重新绘制,以达到更新指定区域的目的,</p><ul><li>也可用视图控件的 invalidateScene(rect:Union[QRectF,QRect],QGraphicsScene.SceneLayer)方法达到相同的目的。</li><li>也可以用update(rect: Union[QRectF, QRect])或 update(x: float,y: float, w; float,h;float)方法更新指定的区域。</li></ul></li></ul></li><li><p>Graphics/View 框架通过染函数 QGraphicsScene.render()和 QGraphicsView.render()支持单行打印。</p><ul><li>场景和视图的染函数的不同在于 QGraphicsScene.render()使用场景坐标,QGraphicsView.render()使用视图坐标。</li><li>用addWidget(QWidget,Qt.WindowType)方法可以将一个控件或窗口嵌人到场景中,如QLineEdit、QPushButton;或是复杂的控件如 QTableWidget,甚至是主窗口该方法返回 QGraphicsProxyWidget,或先创建一个QGraphicsProxyWidget 实例手动嵌入控件。</li><li>通过QGraphicsProxyWidget,Graphics/View 框架可以深度整合控件的特性,如光标、提示、鼠标、平板和键盘事件、子控件、动画、下拉框、Tab 顺序</li><li>用setFont(QFont)setPalette(QPalette)或 setStype(QStyle)方法为视图控件设置字体、调色板和风格。</li></ul></li><li><p>用setActivePanel(item:QGraphicsItem)方法激活场景中的图项,参数若是None场景将停用任何当前活动的图项。</p><ul><li><p>如果场景当前处于非活动状态,则图项将保持不活动状态,直到场景变为活动状态为止。</p></li><li><p>用setActiveWindow(widget;QGraphicsWidget)方法激活场景中的视图控件,参数如是None,场景将停用任何当前活动的视图控件。</p></li></ul></li></ul><h5 id="场景qgraphicsscene-的信号" tabindex="-1"><a class="header-anchor" href="#场景qgraphicsscene-的信号" aria-hidden="true">#</a> 场景QGraphicsScene 的信号</h5><p>场景QGraphicsScene的信号如表所示</p><table><thead><tr><th>QGraphicsScene 的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>changed(region: List[QRectF])</td><td>场景中的内容发生改变时发送信号,参数包含场景 矩形的列表,这些矩形指示已更改的区域</td></tr><tr><td>focusltemChanged(newFocusltem: QGraphicsltem, oldFocusltem: QGraphicslten1,reason:Qt.FocusReason)</td><td>图项的焦点发生改变,或者焦点从一个图项转移到 另一个图项时发送信号</td></tr><tr><td>sceneRectChanged(rect:QRectF)</td><td>场景的范围发生改变时发送信号</td></tr><tr><td>selectionChanged()</td><td>场景中选中的图形发生改变时发送信号</td></tr></tbody></table><h4 id="图项qgraphicsltem" tabindex="-1"><a class="header-anchor" href="#图项qgraphicsltem" aria-hidden="true">#</a> 图项QGraphicsltem</h4><p>QGraphicsItem类是 QGraphicsScene 中所有图项的基类用于编写自定义图项,包括定义图项的几何形状、碰撞检测、绘图实现,以及通过其事件处理程序进行图项的交互,继承自QGraphicsItem 的类有:</p><ul><li>QAbstractGraphicsShapelfem</li><li>QGraphicsEllipseltem</li><li>QGraphicsItemGroup</li><li>QGraphicsLineltem</li><li>QGraphicsPathItem</li><li>QGraphicsPixmapItem</li><li>QGraphicsPolygonItem</li><li>QGraphicsRectItem</li><li>QGraphicsSimpleTextItem。</li></ul><p>图项支持鼠标拖放、滚轮右键菜单按下释放、移动、双击以及键盘等事件,进行分组和碰撞检测,还可以给图项设置数据</p><p>用QGraphicsItem类创建图项实例对象的方法如下,其中parent是QGraphicsItem的实例,在图项间形成父子关系。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsItem

QGraphicsItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="图项的常用方法如表所示" tabindex="-1"><a class="header-anchor" href="#图项的常用方法如表所示" aria-hidden="true">#</a> 图项的常用方法如表所示</h5><table><thead><tr><th>QGraphicsItem的方法及参数类型</th><th>说一明</th></tr></thead><tbody><tr><td>paint(painter:QPainter,option: QStyleOptionGraphicsItem,widget: QWidget=None)</td><td>重写该函数,绘制图形</td></tr><tr><td>boundingRect()</td><td>重写该函数,返回边界矩形QRectF</td></tr><tr><td>itemChange(change: QGraphicsIten.GraphicsltemChange,value:Any)</td><td>重写该函数,以便在图项的状态发生改变时做出 响应</td></tr><tr><td>advance(phase)</td><td>重写该函数,用于简单动画,由场景的advance()调 用。phase=0时通知图项即将运动,phase=1时可 以运动</td></tr><tr><td>setCacheMode(mode: QGraphicsItem, CacheMode,cacheSize:QSize=Default(QSize))</td><td>设置图项的级冲模式</td></tr><tr><td>childItems()</td><td>获取子项列表 List[QGraphicsItem]</td></tr><tr><td>childrenBoundingRect()</td><td>获取子项的边界矩形</td></tr><tr><td>clearFocus()</td><td>清除焦点</td></tr><tr><td>collides Withltem(other: QGraphicsltem, mode: Qt.ItemSelectionMode=Qt.IntersectsltemShape)</td><td>获取是否能与指定的图项发生碰撞</td></tr><tr><td>collides WithPath(path:QPainterPath,mode:Qt.ItemSelectionMode= Qt.IntersectsItemShape)</td><td>获取是否能与指定的路径发生碰撞</td></tr><tr><td>collidingItems(mode= Qt.IntersectsItemShape)</td><td>获取能发生碰撞的图项列表</td></tr><tr><td>contains(Union[QPointF,QPoint])</td><td>获取图项是否包含某个点</td></tr><tr><td>grabKeyboard()、ungrabKeyboard()</td><td>接受、不接受键盘的所有事件</td></tr><tr><td>grabMouse()、ungrabMouse()</td><td>接受、不接受鼠标的所有事件</td></tr><tr><td>isActive()</td><td>获取图项是否活跃</td></tr><tr><td>isAncestorOf(QGraphicsItem)</td><td>获取图项是否是指定图项的父辈</td></tr><tr><td>isEnabled()</td><td>获取是否激活</td></tr><tr><td>isPanel()</td><td>获取是否面板</td></tr><tr><td>isSelected()</td><td>获取是否被选中</td></tr><tr><td>isUnderMouse()</td><td>获取是否处于光标下</td></tr><tr><td>parentItem()</td><td>获取父图项</td></tr><tr><td>resetTransform()</td><td>重置变换</td></tr><tr><td>scene()</td><td>获取图项所在的场景</td></tr><tr><td>sceneBoundingRect()</td><td>获取场景的范围</td></tr><tr><td>scenePos()</td><td>获取在场景中的位置 QPointF</td></tr><tr><td>sceneTransform()</td><td>获取变换矩阵 QTransform</td></tr><tr><td>setAcceptDrops(bool)</td><td>设置是否接受鼠标释放事件</td></tr><tr><td>setAcceptedMouseButtons(Qt.MouseButton)</td><td>设置可接受的鼠标按钮</td></tr><tr><td>setActive(bool)</td><td>设置是否活跃</td></tr><tr><td>setCursor(Union[QCursor,Qt.CursorShape])</td><td>设置光标形状</td></tr><tr><td>unsetCursor()</td><td>重置光标形状</td></tr><tr><td>setData(key:int,value:Any)</td><td>给图项设置数据</td></tr><tr><td>data(key:int)</td><td>获取图项存储的数据</td></tr><tr><td>setEnabled(bool)</td><td>设置图项是否激活</td></tr><tr><td>setFlag(QGraphicsItem.GraphicsItemFlag, enabled=True)</td><td>设置图项的标识</td></tr><tr><td>setFocus(focusReason=Qt.OtherFocusReason)</td><td>设置焦点</td></tr><tr><td>setGroup(QGraphicsItemGroup)</td><td>将图项加入到组中</td></tr><tr><td>group()</td><td>获取图项所在的组</td></tr><tr><td>setOpacity(opacity: float)</td><td>设置不透明度</td></tr><tr><td>setPanelModality(QGraphicsItem.PanelModality)</td><td>设置面板的模式</td></tr><tr><td>setParentItem(QGraphicsltem)</td><td>设置父图项</td></tr><tr><td>setPos(Union[QPointF,QPoint]) setPos(x: float,y: float)</td><td>设置在父图项坐标系中的位置</td></tr><tr><td>setX(float)、setY(float)</td><td>设置在父图项中的x和y坐标</td></tr><tr><td>pos()</td><td>获取图项在父图项中的位置 QPointF</td></tr><tr><td>x()、y()</td><td>获取×坐标、获取y坐标</td></tr><tr><td>setRotation(angle:float)</td><td>设置沿z轴顺时针旋转角度(°)</td></tr><tr><td>setScale(scale:float)</td><td>设置缩放比例系数</td></tr><tr><td>moveBy(dx:float,dy: float)</td><td>设置移动量</td></tr><tr><td>setSelected(selected:bool)</td><td>设置是否选中</td></tr><tr><td>setToolTip(str)</td><td>设置提示信息</td></tr><tr><td>setTransform(QTransform,combine=False)</td><td>设置矩阵变换</td></tr><tr><td>setTransformOriginPoint(origin: Union[QPointF, QPoint])</td><td>设置变换的中心点</td></tr><tr><td>setTransformOriginPoint(ax:float,ay:float)</td><td>设置变换的中心点</td></tr><tr><td>set Transformations(Sequence[QGraphicsTransform])</td><td>设置变换矩阵</td></tr><tr><td>transform()</td><td>获取变换矩阵 QTransform</td></tr><tr><td>transformOriginPoint()</td><td>获取变换原点QPointF</td></tr><tr><td>setVisible(bool)</td><td>设置图项是否可见</td></tr><tr><td>show()、hide()</td><td>显示图项、隐藏图项,子项也隐藏</td></tr><tr><td>isVisible()</td><td>获取是否可见</td></tr><tr><td>setZValue(float)</td><td>设置z值</td></tr><tr><td>zValue()</td><td>获取z值</td></tr><tr><td>shape()</td><td>重写该函数,返回图形的绘图路径 QPainterPath,用于碰撞检测等</td></tr><tr><td>stackBefore(QGraphicsItem)</td><td>在指定的图项前插入</td></tr><tr><td>isWidget()</td><td>获取图项是否是图形控件 QGraphicsWidget</td></tr><tr><td>isWindow()</td><td>获取图形控件的窗口类型是否是Qt.Window</td></tr><tr><td>window()</td><td>获取图项所在的图形控件 QGraphicsWidget</td></tr><tr><td>topLevelWidget()</td><td>获取顶层图形控件 QGraphicsWideet</td></tr><tr><td>topLevelItem()</td><td>获取顶层图项(没有父图项)</td></tr><tr><td>update(rect: Union[QRectF, QRect]= Default(QRectF))</td><td>更新指定的区域</td></tr><tr><td>update(x: float, y: float, width: float,height: float)</td><td>更新指定的区域</td></tr></tbody></table><h5 id="在图项场景间的映射方法如表所示" tabindex="-1"><a class="header-anchor" href="#在图项场景间的映射方法如表所示" aria-hidden="true">#</a> 在图项场景间的映射方法如表所示</h5><h6 id="从其他图顶映射" tabindex="-1"><a class="header-anchor" href="#从其他图顶映射" aria-hidden="true">#</a> 从其他图顶映射</h6><table><thead><tr><th>图项坐标的映射方法及参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapFromltem(item:QGraphicsltem,path:QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapFromItem(item; QGraphicsltem, point:Union[QPointF,QPoint])</td><td>QPointF</td></tr><tr><td>mapFromItem(item: QGraphicsItem,polygon:Union[QPolygonF, Sequence[QPointF],QPolygon,QRectF])</td><td>QPolygonF</td></tr><tr><td>mapFromItem(item; QGraphiesltem.rect: Union[QRectF.QRect])</td><td>QPolygonF</td></tr><tr><td>napFromItem(item;QGraphicsltem,xi float,y: float)</td><td>QPointF</td></tr><tr><td>mapFromItem(item, QGraphicsltem,xi float,y: float,w: float,h: float)</td><td>QPolygonF</td></tr><tr><td>mapRectFromItem(item；QGraphicsltem,rect, Union[QRectF,QRect])</td><td>QRectF</td></tr><tr><td>mapRectFromItem(item: QGraphicsltem,x; float,y; float,w: float,h: float) /</td><td>QRectF</td></tr></tbody></table><h6 id="从父图项映射" tabindex="-1"><a class="header-anchor" href="#从父图项映射" aria-hidden="true">#</a> 从父图项映射</h6><table><thead><tr><th>图项坐标的映射方法及参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapFromParent(path: QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapFromParent(point:Union[QPointF,QPoint])</td><td>QPointF</td></tr><tr><td>mapFromParent(polygon:Union[QPolygonF, Sequence[QPointF], QPolygon,QRectF])</td><td>QPoIygonF</td></tr><tr><td>mapFromParent(rect:Union[QRectF,QRect])</td><td>QPolygonF</td></tr><tr><td>mapFromParent(x:float,y:float)</td><td>QPointF</td></tr><tr><td>mapFromParent(x:float,y: float,w: float,h: float)</td><td>QPolygonF</td></tr><tr><td>mapRectFromParent(rect: Union[QRectF,QRect])</td><td>QRectF</td></tr><tr><td>mapRectFromParent(x:float,y:float,w: float,h: float)</td><td>QRectF</td></tr></tbody></table><h6 id="从场景映射" tabindex="-1"><a class="header-anchor" href="#从场景映射" aria-hidden="true">#</a> 从场景映射</h6><table><thead><tr><th>图项坐标的映射方法及参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapFromScene(path: QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapFromScene(point: Union[QPointF,QRoint])</td><td>QPointF</td></tr><tr><td>mapFromScene(polygon: Union[QPolygonF, Sequence[QPointF], QPolygon,QRectF])</td><td>QPolygonF</td></tr><tr><td>mapFromScene(rect:Union[QRectF,QRect])</td><td>QPolygonF</td></tr><tr><td>mapFromScene(x: float,y:float)</td><td>QPointF</td></tr><tr><td>mapFromScene(x: float,y:float,w: float,h: float)</td><td>QPolygonF</td></tr><tr><td>mapRectFromScene(rect;Union[QRectF,QRect])</td><td>QRectF</td></tr><tr><td>mapRectFromScene(x: float,y: float,w: float,h:float)</td><td>QRectF</td></tr></tbody></table><h6 id="映射到父图项" tabindex="-1"><a class="header-anchor" href="#映射到父图项" aria-hidden="true">#</a> 映射到父图项</h6><table><thead><tr><th>图项坐标的映射方法及参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapToParent(path:QPainterPath)</td><td>QPainterPath .</td></tr><tr><td>mapToParent(point:Union[QPointF,QPoint])</td><td>QPointF</td></tr><tr><td>mapToParent(polygon: Union[QPolygonF,Sequence[QPointF], QPolygon,QRectF])</td><td>QPolygonF</td></tr><tr><td>mapToParent(rect:Union[QRectF,QRect])</td><td>QPolygonF</td></tr><tr><td>mapToParent(x:float,y:float)</td><td>QPointF</td></tr><tr><td>mapToParent(x: float,y: float,w: float,h;float)</td><td>QPolygonF</td></tr><tr><td>mapRectToParent(rect:Union[QRectF,QRect])</td><td>QRectF</td></tr><tr><td>mapRectToParent(x: float,y;float,w; float,h:float)</td><td>QRectF</td></tr></tbody></table><h6 id="映射到场景" tabindex="-1"><a class="header-anchor" href="#映射到场景" aria-hidden="true">#</a> 映射到场景</h6><table><thead><tr><th>图项坐标的映射方法及参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>mapToScene(x: float,y: float)</td><td>QPointF</td></tr><tr><td>mapToScene(x:loat.y: float.w: float,h: loat)</td><td>QPolygonP</td></tr><tr><td>mapRect ToScene(rect: Union[QReetF,QRect])</td><td>QRectF</td></tr><tr><td>mapRect ToScene(x:float,y: float.w: float.h: float)</td><td>QRectF</td></tr><tr><td>mapToScene(path: QPainterPath)</td><td>QPainterPath</td></tr><tr><td>mapToScene(point:Union[QPointF,QPoint])</td><td>QPointF</td></tr><tr><td>mapToScene(polygon: Union[QPolygonF, Sequence[QPointF], QPolygon,QRectF])</td><td>QPolygonF</td></tr><tr><td>mapToScene(rect:Union[QRectF,QRect])</td><td>QPolygonF</td></tr></tbody></table><h5 id="主要方法介绍如下-1" tabindex="-1"><a class="header-anchor" href="#主要方法介绍如下-1" aria-hidden="true">#</a> 主要方法介绍如下</h5><ul><li><p>用户需要从QGraphicsItem 类继承并创建自己的子图项类,需要在子类中重写paint(painter: QPainter, option: QStyle(ptionGraphicsItem, widget:QWidget 一None)函数和 boundingRect()函数</p><ul><li>boundingRect()函数的返回值是图项的范围QRectF。</li><li>paint()函数会被视图控件调用需要在paint()函数中用QPainter绘制图形图形是在图项的局部坐标系中绘制的。 <ul><li>QPainter 的钢笔宽度初始值是1,</li><li>画刷的颜色是QPalette.window,</li><li>线条的颜色是 QPalette text,</li><li>QStyleOptionGraphicsItem 是绘图选项,</li><li>QWidget 是指将绘图绘制到哪个控件上如果为 None,则绘制到缓存上</li></ul></li><li>boundingRect()函数需要返回QRectF,用于确定图项的边界。paint()中绘制的图形不能超过边界矩形</li></ul></li><li><p>用setFlag(QGraphicsItem.GraphicsItemFlag,enabled=True)方法设置图项的标志,其中参数QGraphicsItemGraphicsItemFlag 可取的值如表所示</p><table><thead><tr><th>QGraphicsltem.GraphicsltemFlag的取值</th><th>说 明</th></tr></thead><tbody><tr><td>QGraphicsItem.ItemIsMovable</td><td>可移动</td></tr><tr><td>QGraphicsItenm.ItemlsSelectable</td><td>可选择</td></tr><tr><td>QGraphicsItem.ItemIsFocusable</td><td>可获得键盘输入焦点、鼠标按下和释放事件</td></tr><tr><td>QGraphicsItem.ItemClipsToShape</td><td>剪切自己的图形,在图项之外不能接收鼠标拖放和 悬停事件</td></tr><tr><td>QGraphicsItem.ItemClipsChildrenToShape</td><td>剪切子类的图形,子类不能在该图项之外绘制</td></tr><tr><td>QGraphicsItem.ItemIgnoresTransformations</td><td>忽略来自父图项或视图控件的坐标变换,例如文字 可以保持水平或竖直,文字比例不缩放</td></tr><tr><td>QGraphicsItem.ItemIgnoresParentOpacity</td><td>使用自己的透明设置,不使用父图项的透明设置</td></tr><tr><td>QGraphicsltem ItermDoesntPropagateOpacityIoChildren</td><td>图项的透明设置不影响其子图项的透明值</td></tr><tr><td>QGraphicsItem.ItemStacksBehindParent</td><td>放置于父图项的后面而不是前面</td></tr><tr><td>QGraphicsltem,ItemHasNoContents</td><td>图项中不绘制任何图形,调用paint()方法也不起任 何作用</td></tr><tr><td>QGraphicsItem.ItemSendsGeometryChanges</td><td>该标志使itemChange()函数可以处理图项几何形 状的改变,例如ItemPositionChange、 ItemScaleChange、ItemPositionHasChanged、Item TransformChange、ItemTransformHasChanged、 ItemRotationChange、 ItemRotationHasChanged、 ItemScaleHasChanged、Item TransformOriginPointChange、ItemTransformOriginPointHasChanged</td></tr><tr><td>QGraphicsItem.ItemAcceptslnputMethod</td><td>图项支持亚洲语言</td></tr><tr><td>QGraphicsItem.ItemNegativeZStacksBehindParent</td><td>如果图项的z值是负值,则自动放置于父图项的后 面,可以用setZValue()方法切换图项与父图项的 位置</td></tr><tr><td>QGraphicsItem.ItemIsPanel</td><td>图项是面板,面板可被激活和获得焦点,在同一时间 只有一个面板能被激活,如果没有面板,则激活所有 非面板图项</td></tr><tr><td>QGraphicsItem.ItemSendsScenePositionChanges</td><td>该标志是itemChange()函数可以处理图项在视图控 件中的位置变化事件ItemScenePositionHasChanged</td></tr><tr><td>QGraphicsItem.ItemContainsChildrenInShape</td><td>该标志说明图项的所有子图项在图项的形状范围内 绘制,这有利于图形绘制和碰撞检测。与 ItemContainsChildrenInShape标志相比,该标志不是 强制性的</td></tr></tbody></table></li><li><p>重写itemChange(change:QGraphicsItem,GraphicsItemChange,value: Any)函数可以在图项的状态发生改变时及时做出反应,用于代替图项的信号,</p><ul><li><p>其中 value 值根据状态change确定,状态参数cange的取值是QGraphicsItem.GraphicsItemChange的枚举值,可取值如表所示。</p></li><li><p>需要注意的是要使itemChange()函数能处理几何位置改变的通知,需要首先通过 setFlag()方法给图项设置QGraphicsItem,ItemSendsGeometryChanges标志,另外也不能在itemChange()函数中直接改变几何位置,否则会陷入死循环。</p><table><thead><tr><th>QGraphIcsItem.GraphIcsltemChange的取值</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>QGraphIcsItem.ItemEnabledChange</td><td>3</td><td>图项的激活状态(setEnable())即将改变时发送通 知。ItemChange()函数中的参数 value是新状态, value=True 时表明图项处于激活状态,value= False时表明图项处于失效状态。原激活状态可 用IsEnabled()方法获得</td></tr><tr><td>QGraphIcsItem.ItemEnabledHasChanged</td><td>13</td><td>图项的激活状态已经改变时发送通知, ItemChange()函数中的参数 value 是新状态</td></tr><tr><td>QGraphIcsItem.ItemPosItIonChange</td><td>0</td><td>图项的位置(setPos()、moveBy())即将改变时发 送通知,参数 value是相对于父图项改变后的位置 QPoIntF,原位置可以用pos()获得</td></tr><tr><td>QGraphIcsItem.ItemPosItIonHasChanged</td><td>9</td><td>图项的位置已经改变时发送通知,参数value是相 对于父图项改变后的位置QPoIntF,与pos()方法 获取的位置相同</td></tr><tr><td>QGraphIcsltem.ItemTransformChange</td><td>8</td><td>图项的变换矩阵(setTransform())即将改变时发 送通知,参数 value 是变换后的矩阵 QTransform, 原变换矩阵可以用transform()方法获得</td></tr><tr><td>QGraphIcsltem.ItemTransformHasChanged</td><td>10</td><td>图项的变换矩阵已经改变时发送通知,参数value 是变换后的矩阵QTransform,与transform()方法 获得的矩阵相同</td></tr><tr><td>QGraphIcsltem.ItemRotatIonChange</td><td>28</td><td>图项即将产生旋转(setRotatIon())时发送通知,参 数 valIe是新的旋转角度,原旋转角可用rotatIon() 方法获得</td></tr><tr><td>QGraphIcsltem.ltemRotatIonHasChanged</td><td>29</td><td>图项已经严生旋转时发送通知,参数 value 是新的 旋转角度,与rotatIon()方法获得的旋转角相同</td></tr><tr><td>QGraphIcslterm.ItemScaleChange .</td><td>30</td><td>图项即将进行缩放(setScale())时发送通知,参数 value是新的缩放系数,原缩放系数可用scale()方 法获得</td></tr><tr><td>QGraphIcsItem.ItemScaleHasChanged</td><td>31</td><td>图项已经进行了缩放时发送通知,参数 value 是新 的缩放系数</td></tr><tr><td>QGraphIcsItem.ItemTransformrIgInPoIntChange</td><td>32</td><td>图项变换原点(setTransformOrIgInPoInt())即将 改变时发送通知,参数 value 是新的点 QPoIntF。 原变换原点可用transformOrIgInPoInt()方法获得</td></tr><tr><td>QGraphIcsItem.ItemTransformOrIgInPoIntHnsChanged</td><td>33</td><td>图项变换原点已经改变时发送通知,参数 value是 新的点 QPoIntF,原变换原点可用transformOrIgInPoInt()方法获得</td></tr><tr><td>QGraphIcsItem.ItemSelectedChange</td><td>4</td><td>图项选中状态即将改变(setSelected())时发送通 知,参数value是选中后的状态(True或False),原 选中状态可用IsSelected()方法获得</td></tr><tr><td>QGraphIcsltem.ItemSelectedHasChanged</td><td>14</td><td>图项的选中状态已经改变时发送通知,参数value 是选中后的状态</td></tr><tr><td>QGraphIesItem.ItemVIsIbleChange</td><td>2</td><td>图项的可见性(setVIsIble())即将改变时发送通 知,参数value是新状态,原可见性状态可用IsVIsIble()方法获得</td></tr><tr><td>QGraphIcsltem.ItenVIsIbleHasChanged</td><td>12</td><td>图项的可见性已经改变时发送通知,参数value是 新状态</td></tr><tr><td>QGraphIcsltem.ItemParentChange</td><td>5</td><td>图项的父图项(setParentItem())即将改变时发送 通知,参数value是新的父图项QGraphIcsIten,原 父图项可用parentItem()方法获得</td></tr><tr><td>QGraphIcsltem.ItemParentHasChanged</td><td>15</td><td>图项的父图项已经改变时发送通知,参数value是 新的父图项</td></tr><tr><td>QGraphIcsltem.ItemChIldAddedChange</td><td>6</td><td>图项中即将添加子图项时发送通知,参数value是 新的子图项,予图项有可能还没完全构建</td></tr><tr><td>QGraphIesItem.ItemChIldRemovedChange</td><td>7</td><td>图项中已经添加子图项时发送通知,鑫数value是 新的子图项</td></tr><tr><td>QCIraphIcsltem.ItemSceneChange</td><td>11</td><td>图项即将加入到场景(addItem())中或即将从场 景中移除(removeltem())时发送通知、鑫数value 是新场景城None(移除时)原场景可用scene()方 法获得</td></tr><tr><td>QGraphIcsItem.ItemSceneHasChanged</td><td>16</td><td>图项已经加人到场景中或即将从场景中移除时发 送通知,参数 value 是新场景或 None(移除时)</td></tr><tr><td>QGraphIcsItem.ItemCursorChange</td><td>17</td><td>图项的光标形状(setCursor())即将改变时发送通 知,参数 value 是新光标QCursor,原光标可用cursor()方法获得</td></tr><tr><td>QGraphIcsItem.ItemCursorHasChanged</td><td>18</td><td>图项的光标形状已经改变时发送通知,参数 value 是新光标 Qcursor</td></tr><tr><td>QGraphIcsItem.Item ToolTIpChange</td><td>19</td><td>图项的提示信息(setToolTIp())即将改变时发送 通知,参数value是新提示信息,原提示信息可用toolTIp()方法获得:</td></tr><tr><td>QGraphIcsItem.ItemToolTIpHasChanged</td><td>20</td><td>图项的提示信息已经改变时发送通知,参数 value 是新提示信息</td></tr><tr><td>QGraphIcsItem.ItemFlagsChange</td><td>21 .</td><td>图项的标识(setFlags())即将改变时发送通知,参 数 value是新标识信息值</td></tr><tr><td>QGraphIcsItem.ItemFlagsHaveChanged</td><td>22</td><td>图项的标识即将发生改变时发送通知,参数 value 是新标识信息值</td></tr><tr><td>QGraphIcsItem.ItemZValueChange</td><td>23</td><td>图项的z值(setZValue())即将改变时发送通知, 参数 value 是新的z值,原z值可用zValue()方法 获得</td></tr><tr><td>QGraphIcsItem.ItemZValueHasChanged</td><td>24</td><td>图项的z值即将改变时发送通知,参数 value是新 的z值</td></tr><tr><td>QGraphIcsItem.ItemOpacItyChange</td><td>25</td><td>图项的不透明度(setOpacIty())即将改变时发送 通知,参数value是新的不透明度,原不透明度可 用opacIty()方法获得</td></tr><tr><td>QGraphIcsItem.ItemOpacItyHasChanged</td><td>26</td><td>图项的不透明度已经改变时发送通知,参数 value 是新的不透明度</td></tr><tr><td>QGraphIcsItem.ItemScenePosItIonHasChanged</td><td>27</td><td>图项所在的场景的位置已经发生改变时发送通 知,参数 value 是新的场景位置,与 scenePos()方 法获得的位置相同</td></tr></tbody></table></li></ul></li><li><p>用setCacheMode(mode: QGraphicsItem,CacheMode,cacheSize; QSize= Default(QSize))方法设置图项的缓冲模式,可以加快染速度。参数 mode 可取:</p><ul><li>QGraphicsItem.NoCache时(默认值)没有缓冲每次都调用paint()方法重新绘制;</li><li>QGraphicsItem.ItemCoordinateCache ,为图形项的逻辑(本地)坐标启用缓存,第一次绘制该图形项时,它将自身呈现到高速缓存中,然后对于以后的每次显示都重新使用该高速缓存;</li><li>QGraphicsItem.DeviceCoordinateCache ,对绘图设备的坐标启用缓存,此模式适用于可以移动但不能旋转缩放或剪切的图项</li></ul></li><li><p>场景中有多个图项时,根据图项的z值确定哪个图项先绘制,值越大会越先绘制先绘制的图项会放到后绘制的图项的后面。</p><ul><li>用setZValue(float)方法设置图项的z值,用zValue()方法获取z值。</li><li>用场景的addItem()方法添加图项时图项的初始值都是0.0,这时图项依照添加顺序来显示。</li><li>如果一个图项有多个子项,则会先显示父图项,再显示子图项。可以用stackBefore(QGraphicsItem)方法将图项放到指定图项的前面</li></ul></li><li><p>用setPos(x,y)、setX(x)和 setY(y)方法设置图项在父图项中的位置。</p><ul><li>pos()方法返回图项在父图项中的坐标位置,如果图项的父图项是场景,则返回其在场景中的坐标位置。</li><li>除 pos()外的其他函数,返回的坐标值都是在图项自己的局部坐标系中的值。</li></ul></li><li><p>用setVisible(bool)方法可以显示或隐藏图项</p><ul><li>也可以用show()或 hide()方法显示或隐藏图项,</li><li>如果图项有子图项,隐藏图项后,其子图项也隐藏。</li></ul></li><li><p>用setEnable(bool)方法可以设置图项是否激活,激活的图项可以接受键盘和鼠标事件,如果图项失效,其子项也会失效。</p></li><li><p>用setData(key:int,value: Any)方法可以给图项设置一个任意类型的数据,</p><ul><li>用data(key:int)方法获取图项的数据</li></ul></li><li><p>碰撞检测需要重写 shape()函数来返回图项的精准轮廓,</p><ul><li>可以使用默认的collidesWithItem(QGraphicsItem,mode=Qt.IntersectsItemShape)值定义外形,</li><li>如果图项的轮廓很复杂碰撞检测会消耗较长时间。</li><li>也可重写 collidesWithItem()函数,提供一个新的图项和轮廓碰撞方法。</li></ul></li><li><p>用setPanelModality(QGraphicsItemPanelModality)方法设置图项的面板模式,</p><ul><li>图项是面板时会阻止对其他面板的输人,但不阻止对子图项的输人,参数QGraphicsItem,PanelModality 可以取: <ul><li>QGraphicsItem,NonModal(默认值,不阻止对其他面板的输人)</li><li>QGraphicsItemPanelModal(阻止对父辈面板的输人)</li><li>QGraphicsItem.SceneModal(阻止对场景中所有面板的输入)</li></ul></li></ul></li><li><p>用mapFromItem()方法或mapRectFromItem()方法可以从其他图项映射坐标</p><ul><li>用mapToItem()方法或 mapRectToItem()方法可以把坐标映射到其他图项坐标系中,</li><li>用mapFromParent()方法或mapRectFromParent()方法可以映射父图项的坐标,</li><li>用mapToParent()方法或 mapRectToParent()方法可以把图项坐标映射到父图项坐标系中,</li><li>用mapFromScene()方法或 mapRectFromScene()方法可以从场景中映射坐标,</li><li>用mapToScene()方法或 mapRectToScene()方法可以把坐标映射到场景坐标系中。</li></ul></li><li><p>图项的事件有:</p><blockquote><ul><li>contextMenuEvent()</li><li>focusInEvent()</li><li>focusOutEvent()</li><li>hoverEnterEvent()</li><li>hoverMoveEvent()</li><li>hoverLeaveEvent()</li><li>inputMethodEvent()</li><li>keyPressEvent()</li><li>keyReleaseEvent()</li><li>mousePressEvent()</li><li>mouseMoveEvent()</li><li>mouseReleaseEvent()</li><li>mouseDoubleClickEvent()</li><li>dragEnterEvent()</li><li>dragLeaveEvent()</li><li>dragMoyeEvent()</li><li>dropEvent()</li><li>wheelEvent()</li><li>sceneEvent(QEvent)</li></ul></blockquote><ul><li>用installSceneEventFilter(QGraphicsItem)方法给事件添加过滤器</li><li>用sceneEventFilter(QGraphicsItem,QEvent)方法处理事件,并返回 bool型数据;</li><li>用removeSceneEventFilter(QGraphicsItem)方法移除事件过滤器。</li></ul></li><li><p>可以通过 QGraphicsItemsetAcceptDrops()方法设置图项是否支持拖拽功能,还需要重写QGraphicsItem 的以下函数:</p><ul><li>dragEnterEvent()</li><li>dragMoveEvent()</li><li>dropEvent()</li><li>dragLeaveEvent()</li></ul></li><li><p>创建继承自QGraphicsItem 的图项,图项可以设置自已的定时器,在 timerEvent()事件中控制图项的运动。通过调用QGraphicsScene,advance()函数来推进场景,再调用QGraphicsItemadvance()函数进行动画播放。</p></li></ul><h4 id="标准图项" tabindex="-1"><a class="header-anchor" href="#标准图项" aria-hidden="true">#</a> 标准图项</h4><p>除了可以自定义图项外,还可以往场景中添加标准图项,标准图项有 :</p><blockquote><ul><li>QGraphicsLineItem</li><li>QGraphicsRectItem</li><li>QGraphicsPolygonltem</li><li>QGraphicsEllipseltem</li><li>QGraphicsPathItem</li><li>QGraphicsPixmapItem</li><li>QGraphicsSimpleTextItem</li><li>QGraphicsTextItem</li></ul></blockquote><ul><li>分别用场景的 <ul><li>addLine()</li><li>addRect()</li><li>addPolygon()</li><li>addEllipse()</li><li>addPath()</li><li>addPixmap()</li><li>addSimpleText()</li><li>addText()</li></ul></li></ul><p>直接往场景中添加这些标准图项并返回指向这些场景的变量;也可以先创建这些标准场景的实例对象,然后用场景的addItem()方法将标准图项添加到场景中。这些标准图项的继承关系如图所示,它们直接或间接继承自QGraphicsItem,因此也会继承QGraphicsItem 的方法和属性</p><figure><img src="`+p+`" alt="image-20230308230809303" tabindex="0" loading="lazy"><figcaption>image-20230308230809303</figcaption></figure><h5 id="直线图项-qgraphicslineitem" tabindex="-1"><a class="header-anchor" href="#直线图项-qgraphicslineitem" aria-hidden="true">#</a> 直线图项 QGraphicsLineItem</h5><p>用QGraphicsLineltem 创建直线对象的方法如下所示,其中 parent 是继承自QGraphicsItem的实例对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsLineItem

QGraphicsLineItem<span class="token punctuation">(</span>line<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QLineF<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QLine<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsLineItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsLineItem<span class="token punctuation">(</span>x1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> x2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsLineItem 的主要方法是设置直线和钢笔</p><ul><li>用setLine(line;Union[QLineFQLine])和 setLine(xl:float;yl; float;x2;float,y2: float)方法设置直线,</li><li>用setPen(pen:Union[QPen,Qt.PenStyle,QColor])方法设置钢笔,用line()方法获取线条 QLineF,</li><li>用pen()方法获取钢笔 QPen。</li></ul><h5 id="矩形图项-qgraphicsrectitem" tabindex="-1"><a class="header-anchor" href="#矩形图项-qgraphicsrectitem" aria-hidden="true">#</a> 矩形图项 QGraphicsRectItem</h5><p>用QGrphicsRectItem 创建矩形对象的方法如下所示,其中 parent 是继承自QGraphicsItem 的实例对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsLineItem

QGraphicsLineItem<span class="token punctuation">(</span>line<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QLineF<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QLine<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsLineItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsLineItem<span class="token punctuation">(</span>x1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> x2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsRectItem 的主要方法有:</p><ul><li>setRect(rect; Union[QRectF,QRect])</li><li>setRect(x:float,y: float, w: float, h: float)</li><li>rect()</li><li>setPen(pen: Union[QPen, Qt.PenStyle.QColor])</li><li>pen()</li><li>setBrush(brush; Union[QBrush, Qt.BrushStyle, QColor,Qt.GlobalColor;QGradient,QImage,QPixmap])</li><li>brush()</li></ul><h5 id="多边形图项ographicspolygonitem" tabindex="-1"><a class="header-anchor" href="#多边形图项ographicspolygonitem" aria-hidden="true">#</a> 多边形图项OGraphicsPolygonItem</h5><p>用QGraphicsPolygonItem 创建多边形对象的方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsPolygonItem

QGraphicsPolygonItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsPolygonItem<span class="token punctuation">(</span>polygon<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QPolygonF<span class="token punctuation">,</span> Sequence<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QPointF<span class="token punctuation">]</span><span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QPolygon<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QRectF<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsPolygonItem 的主要方法有:</p><ul><li>setPolygon(polygon: Union[QPolygonF.Sequence[QPointF],QPolygon, QRectF])</li><li>polygon()</li><li>setFillRule(Qt.FillRule)</li><li>fllRule()</li><li>setPen(pen: Union[QPen, Qt.PenStyle, Color])</li><li>pen()</li><li>setBrush(brush: Union[QBrush,Qt.BrushStyle, QColor, Qt.GlobalColor, QGradient,QImage,QPixmap])</li><li>brush()</li></ul><h5 id="椭圆图项ographicsellipseitem" tabindex="-1"><a class="header-anchor" href="#椭圆图项ographicsellipseitem" aria-hidden="true">#</a> 椭圆图项OGraphicsEllipseItem</h5><p>QGraphicsEllipseItem 可以创建椭圆圆和扇形对象创建扇形时需要指定起始角和跨度角,起始角和跨度角需乘以16表示角度。</p><p>用QGraphicsEllipseItem类创建椭圆的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsEllipseItem

QGraphicsEllipseItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsEllipseItem<span class="token punctuation">(</span>rect<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QRectF<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsEllipseItem<span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> w<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> h<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsEllipseltem 的主要方法有:</p><ul><li>setRect(rect: Union[QRectF,QRect])</li><li>setRect(x: float,y: float, w; float, h; float)</li><li>rect()</li><li>setSpanAngle(angle: int)</li><li>spanAngle()</li><li>setStartAngle(angle; int)</li><li>startAngle()</li><li>setPen(pen; Union[QPen, Qt.PenStyle,QColor])</li><li>pen()</li><li>setBrush(brush; Union[QBrush, Qt.BrushStyle, QColor, Qt.GlobalColor;QGradient,QImage,QPixmap])</li><li>brush()</li></ul><h5 id="路径图项qgraphicspathitem" tabindex="-1"><a class="header-anchor" href="#路径图项qgraphicspathitem" aria-hidden="true">#</a> 路径图项QGraphicsPathItem</h5><p>QGraphicsPathItem用QPainterPath 绘图路径绘制图项。</p><p>用QGraphicsPathItem 创建图项的方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsPathItem

QGraphicsPathItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsPathItem<span class="token punctuation">(</span>path<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QPainterPath<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsPathItem 的主要方法有:</p><ul><li>setPath(path:QPainterPath)</li><li>path()</li><li>setPen(pen;Union[QPen, Qt.PenStyle, QColor])</li><li>pen()</li><li>setBrush(brush; Union[QBrush, Qt.BrushStyle,QColor,Qt.GlobalColor,QGradient,QImage,QPixmap])</li><li>brush()</li></ul><h5 id="图像图项ographicspixmapitem" tabindex="-1"><a class="header-anchor" href="#图像图项ographicspixmapitem" aria-hidden="true">#</a> 图像图项OGraphicsPixmapItem</h5><p>QGraphicsPixmapltem 用于绘制图像。用QGraphicsPixmapItem 创建图项的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsPixmapItem

QGraphicsPixmapItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsPixmapItem<span class="token punctuation">(</span>pixmap<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QImage<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsPixmapItem 的主要方法有:</p><blockquote><ul><li>setOffset(offset: Union[QPointF,QPoint,QPainterPath, Element])</li><li>setOffset(x: float, y: float)</li><li>offset()</li><li>setPixmap(pixmap:Union[QPixmap;QImage, str])</li><li>pixmap()</li><li>setShapeMode(QGraphicsPixmapItem.ShapeMode)</li><li>setTransformationMode(Qt.TransformationMode),图像绘制位置在(0,0)点。</li></ul></blockquote><ul><li>用setOffset()方法可以设置偏位置;</li><li>用setTransformationMode(Qt.TransformationMode)方法设置图像是否光滑变换其中参数 Qt.TransformationMode可以取: <ul><li>Qt.FastTransformation(快速变换)</li><li>Qt.SmoothTransformation(光滑变换);</li></ul></li><li>用setShapeMode(QGraphicsPixmapItem.ShapeMode)方法设置计算形状的方法,其中参数QGraphicsPixmapItem.ShapeMode 可取: <ul><li>QGraphicsPixmapItem,MaskShape(通过调用QPixmap,mask()方法计算形状)</li><li>QGraphicsPixmapItemBoundingRectShape(通过轮廓确定形状)</li><li>QGraphicsPixmapItem.HeuristicMaskShape(通过调用QPixmap.createHeuristicMask()方法确定形状)</li></ul></li></ul><h5 id="纯文本图项qgraphicssimpletextitem" tabindex="-1"><a class="header-anchor" href="#纯文本图项qgraphicssimpletextitem" aria-hidden="true">#</a> 纯文本图项QGraphicsSimpleTextItem</h5><p>QGraphicsSimpleTextItem用于绘制纯文本可以设置文本的轮廓和填充颜色。用QGraphicsSimpleTextItem创建图项的方法如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QGraphicsSimpleTextItem

QGraphicsSimpleTextItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QGraphicsSimpleTextItem<span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>QGraphicsSimpleTextItem 的主要方法有:</p><ul><li>setText(str),text()</li><li>setFont(font: Union[QFont,str,Sequence[str]])/ font(),</li><li>用setPen(pen)方法绘制文本的轮廓</li><li>用setBrush(brush)方法设置文本的填充色</li></ul><h5 id="文本图项-qgraphicstextitem" tabindex="-1"><a class="header-anchor" href="#文本图项-qgraphicstextitem" aria-hidden="true">#</a> 文本图项 QGraphicsTextItem</h5><p>用QGraphicsTextltem 可以绘制带格式和可编辑的文本,还可以有超链接。用QGraphicsTextItem 创建图项实例的方法如下所示。 QGraphicsTextItem(paren; QGraphicsItem = None)QGraphicsTextItem(text;str, parent;QGraphicsItem None)</p><p>QGraphicsTextItem 的常用方法有 :</p><blockquote><ul><li>adjastSize()(调整到合适的尺寸)</li><li>openExternalLinks()</li><li>setDefaultTextColor(Union[QColor, Qt.GlobalColor,QGradient])</li><li>setDocument(QTextDocument)</li><li>setFont(QFont)</li><li>setHtml(str)</li><li>toHtml()</li><li>setOpenExternalLinks(bool)</li><li>setPlainText(str)</li><li>toPlainText()</li><li>setTabChangesFocus(bool)</li><li>setTextCursor(QTextCursor)</li><li>setTextInteractionFlags(Qt.TextInteractionFlag)</li><li>setTextWidth(float)</li></ul></blockquote><ul><li>其中 setTextInteractionFlags(Qt.TextInteractionFlag)方法设置文本是否可以交互操作,参数 Qt.TextInteractionFlag 可以取: <ul><li>Qt.NoTextInteraction</li><li>Qt.TextSelectableByMouse</li><li>Qt.TextSelectableByKeyboard</li><li>Qt.LinksAccessibleByMouse</li><li>Qt.LinksAccessibleByKeyboard</li><li>Qt.TextEditable</li><li>Qt.TextEditorInteraction <ul><li>指 Qt.TextSelectableByMouse | Qt.TextSelectableByKeyboard | Qt.TextEditable)</li><li>Qt.TextBrowserInteraction(指 Qt.TextSelectableByMouse | Qt.LinksAccessibleByMouse | Qt.LinksAccessibleByKeyboard)。</li></ul></li></ul></li></ul><p>QGraphicsTextItem 的信号有 linkActivated(link)和 linkHovered(link),分别在单击超链接和光标在超链接上悬停时发送信号。与其他标准图项不同的是,QGraphicsTextItem 还具有鼠标和键盘事件。</p>`,125)]))}const u=n(o,[["render",c],["__file","15QPainter和GraphicsView绘图2.html.vue"]]);export{u as default};
