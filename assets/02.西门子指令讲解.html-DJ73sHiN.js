import{_ as a}from"./image-20240418225701528-CAZmcqWd.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,a as s}from"./app-DBc2jY3V.js";const n="/wf-site/assets/format_png-AH-PM-4t.png",g="/wf-site/assets/image-20240415191928749-9a6fFMs8.png",d="/wf-site/assets/image-20240415211438678-UFk1wbOi.png",o="/wf-site/assets/image-20240415211509288-PijM1-jz.png",p="/wf-site/assets/image-20240415212733710-B9-fMz8J.png",c="/wf-site/assets/image-20240416192540275-DYmNjdNm.png",l="/wf-site/assets/image-20240416204127308-BK44F2r_.png",f="/wf-site/assets/image-20240416210719467-NF05TbPd.png",h="/wf-site/assets/image-20240418200026064-ZAakaeoP.png",m="/wf-site/assets/image-20240418200100140-BGnBAnc4.png",u="/wf-site/assets/image-20240418211005147-2CZgtTau.png",_="/wf-site/assets/image-20240418211017879-CmVhkcfl.png",b="/wf-site/assets/image-20240418211249971-Bik3j-jH.png",x="/wf-site/assets/image-20240418211901950-xcK9mSd2.png",w="/wf-site/assets/image-20240418213857779-Cfktn2Vx.png",z="/wf-site/assets/image-20240418212639989-kfCgYPnz.png",y="/wf-site/assets/image-20240418212732388-BOujFyJZ.png",O="/wf-site/assets/image-20240418213646706-DDZyFn6w.png",T="/wf-site/assets/image-20240418213523889-BC16JJsn.png",D="/wf-site/assets/image-20240418214157441-_7_7bOdD.png",F="/wf-site/assets/image-20240418214214005-_H_HGPWE.png",N="/wf-site/assets/image-20240418214435132-B77uaFco.png",P="/wf-site/assets/image-20240418222440841-DTJl2ULw.png",B="/wf-site/assets/image-20240418225142004-6fzUWYPi.png",A="/wf-site/assets/image-20240419211038249-Bmfdny91.png",R={};function Q(E,i){return r(),t("div",null,i[0]||(i[0]=[s('<h1 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h1><h2 id="tp-生成脉冲" tabindex="-1"><a class="header-anchor" href="#tp-生成脉冲" aria-hidden="true">#</a> TP 生成脉冲</h2><p>使用TP指令，可以将输出 Q 置位为预设的一段时间，<strong>当定时器的使能端的状态从OFF变为ON时，可启动该定时器指令，定时器开始计时。 无论后续使能端的状态如何变化，都将输出 Q 置位由 PT 指定的一段时间。</strong> <strong>若定时器正在计时，即使检测到使能端的的信号在此从OFF变为ON的状态，输出Q的信号状态也不会受到影响。</strong></p><figure><img src="'+n+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+g+'" alt="image-20240415191928749" tabindex="0" loading="lazy"><figcaption>image-20240415191928749</figcaption></figure><p>pt：设置延时时间</p><p>et：当前延时到多少</p><h2 id="ton-接通延时" tabindex="-1"><a class="header-anchor" href="#ton-接通延时" aria-hidden="true">#</a> TON 接通延时</h2><p><strong>当定时器的使能端IN为1时启动该指令。 定时器指令启动后开始计时。在定时器的当前值ET与设定值PT相等于时，输出端Q输出为ON。 只要使能端IN的状态仍为ON，输出端Q就保持输出为ON。 若使能端IN的信号状态变为OFF，则将复位输出端Q为OFF。 在使能端再次变为ON时，该定时器功能将再次启动。</strong></p><figure><img src="'+d+'" alt="image-20240415211438678" tabindex="0" loading="lazy"><figcaption>image-20240415211438678</figcaption></figure><h2 id="tof-关断延时" tabindex="-1"><a class="header-anchor" href="#tof-关断延时" aria-hidden="true">#</a> TOF 关断延时</h2><p><strong>当定时器的使能端为ON时，将输出端Q置位为ON。 当使能端的状态变回OFF时，定时器开始计时。 只要ET的值小于PT的值时，则输出端Q就保持置位。当ET的值等于PT的时，则将复位输出端Q。</strong> 如果输使能端的信号状态在ET的值小于PT值时变为ON，则复位定时器。 输出 Q 的信号状态仍将为ON。</p><figure><img src="'+o+'" alt="image-20240415211509288" tabindex="0" loading="lazy"><figcaption>image-20240415211509288</figcaption></figure><h2 id="tonr时间累加器" tabindex="-1"><a class="header-anchor" href="#tonr时间累加器" aria-hidden="true">#</a> TONR时间累加器</h2><p>保持性接通延时定时器的标识符为TONR，保持性接通延时定时器的功能与接通延时定时器的功能基本一致，区别在于**保持型接通延时定时器，在定时器的输入端的状态变为OFF时，定时器的当前值不清零，有掉电保持功能，当达到预设的时间后输出信号。即使输入信号后来变为0，定时器的输出信号仍然保持为1，直到复位信号使定时器复位。而接通延时定时器，在定时器的输入端的状态变为OFF时，定时器的当前值会自动清零，**如下图所示，描述的是保持性接通延时定时器的指令格式及指令执行时的时序图。</p><figure><img src="'+p+'" alt="image-20240415212733710" tabindex="0" loading="lazy"><figcaption>image-20240415212733710</figcaption></figure><h1 id="比较指令" tabindex="-1"><a class="header-anchor" href="#比较指令" aria-hidden="true">#</a> 比较指令</h1><figure><img src="'+c+'" alt="image-20240416192540275" tabindex="0" loading="lazy"><figcaption>image-20240416192540275</figcaption></figure><h3 id="常见的比较指令" tabindex="-1"><a class="header-anchor" href="#常见的比较指令" aria-hidden="true">#</a> 常见的比较指令</h3><p>在西门子PLC中，比较指令包括但不限于以下几种：</p><ul><li><code>==</code>（等于）：当两个值相等时，比较指令为真。</li><li><code>!=</code>（不等于）：当两个值不相等时，比较指令为真。</li><li><code>&gt;</code>（大于）：当第一个值大于第二个值时，比较指令为真。</li><li><code>&lt;</code>（小于）：当第一个值小于第二个值时，比较指令为真。</li><li><code>&gt;=</code>（大于等于）：当第一个值大于或等于第二个值时，比较指令为真。</li><li><code>&lt;=</code>（小于等于）：当第一个值小于或等于第二个值时，比较指令为真。</li></ul><h3 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项" aria-hidden="true">#</a> 使用注意事项</h3><p>在使用比较指令时，需要注意以下几点：</p><ul><li>数据类型必须一致：比较的两个值应该是相同的数据类型，否则可能导致程序错误。</li><li>考虑越界情况：特别是在比较数组或字符串时，需要确保比较操作不会超出数据的边界。</li><li>浮点数精度问题：在进行浮点数比较时，需要注意浮点数的精度，以确保比较结果的准确性。</li></ul><h1 id="move传送指令" tabindex="-1"><a class="header-anchor" href="#move传送指令" aria-hidden="true">#</a> move传送指令</h1><p>将数据传送到指定寄存器</p><h1 id="fc函数块" tabindex="-1"><a class="header-anchor" href="#fc函数块" aria-hidden="true">#</a> fc函数块</h1><figure><img src="'+l+'" alt="image-20240416204127308" tabindex="0" loading="lazy"><figcaption>image-20240416204127308</figcaption></figure><figure><img src="'+f+'" alt="image-20240416210719467" tabindex="0" loading="lazy"><figcaption>image-20240416210719467</figcaption></figure><h1 id="db块" tabindex="-1"><a class="header-anchor" href="#db块" aria-hidden="true">#</a> DB块</h1><p>优化的db块。主要用于单机的系统。</p><p>非优化的DB块：主要用于通信，因为通信需要准确的地址，而非优化的db会显示变量的地址。</p><p>如何开启与关闭dB块的优化：</p><figure><img src="'+h+'" alt="image-20240418200026064" tabindex="0" loading="lazy"><figcaption>image-20240418200026064</figcaption></figure><figure><img src="'+m+'" alt="image-20240418200100140" tabindex="0" loading="lazy"><figcaption>image-20240418200100140</figcaption></figure><h1 id="modbus-rtu通信" tabindex="-1"><a class="header-anchor" href="#modbus-rtu通信" aria-hidden="true">#</a> MODBUS-rtu通信</h1><h2 id="添加rs485接口" tabindex="-1"><a class="header-anchor" href="#添加rs485接口" aria-hidden="true">#</a> 添加RS485接口</h2><figure><img src="'+u+'" alt="image-20240418211005147" tabindex="0" loading="lazy"><figcaption>image-20240418211005147</figcaption></figure><figure><img src="'+_+'" alt="image-20240418211017879" tabindex="0" loading="lazy"><figcaption>image-20240418211017879</figcaption></figure><h3 id="物理接线" tabindex="-1"><a class="header-anchor" href="#物理接线" aria-hidden="true">#</a> 物理接线</h3><figure><img src="'+b+'" alt="image-20240418211249971" tabindex="0" loading="lazy"><figcaption>image-20240418211249971</figcaption></figure><p>连接时要注意端口的对应。</p><h2 id="rs485端口组态参数介绍" tabindex="-1"><a class="header-anchor" href="#rs485端口组态参数介绍" aria-hidden="true">#</a> RS485端口组态参数介绍</h2><h3 id="波特率" tabindex="-1"><a class="header-anchor" href="#波特率" aria-hidden="true">#</a> 波特率</h3><p>即数据的传送速度，波特率越大，数据传输越快。但是当波特率较大时可能会出现数据异常错误。</p><h3 id="校验位" tabindex="-1"><a class="header-anchor" href="#校验位" aria-hidden="true">#</a> 校验位</h3><p>校验数据是否出错，一般可以选择不校验</p><h2 id="博图的startup块" tabindex="-1"><a class="header-anchor" href="#博图的startup块" aria-hidden="true">#</a> 博图的startUp块</h2><figure><img src="'+x+'" alt="image-20240418211901950" tabindex="0" loading="lazy"><figcaption>image-20240418211901950</figcaption></figure><p>是plc由stop切换为run时执行一次startUp块，之后才会执行循环扫描主程序。即startUP块只会在plc启动时执行一次。可以用来做一下数据的初始化设置。</p><p>modbus通信两个主要块</p><figure><img src="'+w+'" alt="image-20240418213857779" tabindex="0" loading="lazy"><figcaption>image-20240418213857779</figcaption></figure><h2 id="modbus-rtu组态ob" tabindex="-1"><a class="header-anchor" href="#modbus-rtu组态ob" aria-hidden="true">#</a> modbus-rtu组态ob</h2><p>这个快需要放在startup块里</p><figure><img src="'+z+'" alt="image-20240418212639989" tabindex="0" loading="lazy"><figcaption>image-20240418212639989</figcaption></figure><figure><img src="'+y+'" alt="image-20240418212732388" tabindex="0" loading="lazy"><figcaption>image-20240418212732388</figcaption></figure><ul><li>REQ:上电第一个循环接通</li></ul><figure><img src="'+O+'" alt="image-20240418213646706" tabindex="0" loading="lazy"><figcaption>image-20240418213646706</figcaption></figure><ul><li><p>PORT:硬件地址</p><figure><img src="'+T+'" alt="image-20240418213523889" tabindex="0" loading="lazy"><figcaption>image-20240418213523889</figcaption></figure></li><li><p>BAUD:波特率</p></li><li><p>PARITY:校验是否启用</p></li><li><p>RESP_TO:通讯超时</p></li><li><p>MD_DB:轮询块的背景数据</p></li><li><figure><img src="'+D+'" alt="image-20240418214157441" tabindex="0" loading="lazy"><figcaption>image-20240418214157441</figcaption></figure></li><li><p>在<img src="'+F+'" alt="image-20240418214214005" loading="lazy"></p></li></ul><figure><img src="'+N+'" alt="image-20240418214435132" tabindex="0" loading="lazy"><figcaption>image-20240418214435132</figcaption></figure><p>如上一个485通信的组态模块创建完成</p><h2 id="modbus-rtu-485通信模块" tabindex="-1"><a class="header-anchor" href="#modbus-rtu-485通信模块" aria-hidden="true">#</a> modbus-rtu 485通信模块</h2><p>REQ:上电第一个接通</p><p>MB_ADDR：485地址（目标地址）站号-</p><p>MODE：1读0写</p><p>DATA_ADDR：modbus中间地址</p><p>DATA_LEN：数据长度</p><p>DATA_PTR：发送区间</p><p>站号查询</p><figure><img src="'+P+'" alt="image-20240418222440841" tabindex="0" loading="lazy"><figcaption>image-20240418222440841</figcaption></figure><p>通过读取modbus通信数据来查询</p><h3 id="计算data-addr的方法" tabindex="-1"><a class="header-anchor" href="#计算data-addr的方法" aria-hidden="true">#</a> 计算DATA_ADDR的方法</h3><p>将modbus中间地址换算成10进制再加一，最后在前面补个4</p><p>如modbus中的地址为0x6002转换成十进制是24578，加一24579.再补个4就是424579.这就是最终地址</p><h3 id="字符长度" tabindex="-1"><a class="header-anchor" href="#字符长度" aria-hidden="true">#</a> 字符长度</h3><figure><img src="'+B+'" alt="image-20240418225142004" tabindex="0" loading="lazy"><figcaption>image-20240418225142004</figcaption></figure><p>16位就是一个字所以长度为1</p><h3 id="p-寻址-指针类型" tabindex="-1"><a class="header-anchor" href="#p-寻址-指针类型" aria-hidden="true">#</a> p#寻址--指针类型</h3><figure><img src="'+a+'" alt="image-20240418225701528" tabindex="0" loading="lazy"><figcaption>image-20240418225701528</figcaption></figure><p>P#DB5.DBX36.0 WORD 1</p><p>p# 说明是p#类型寻址</p><p>db5，数据库地址</p><p>dbx36.0 数据在数据库中的偏移量</p><p>word 数据类型</p><p>1 取一个world的长度</p><h1 id="s7通信" tabindex="-1"><a class="header-anchor" href="#s7通信" aria-hidden="true">#</a> s7通信</h1><p>建立连接</p><figure><img src="'+A+'" alt="image-20240419211038249" tabindex="0" loading="lazy"><figcaption>image-20240419211038249</figcaption></figure><h1 id="伺服" tabindex="-1"><a class="header-anchor" href="#伺服" aria-hidden="true">#</a> 伺服</h1><p>伺服的优点：贵 最大的优点：定位准，几丝的误差</p><ul><li>1.噪音小，振动小（丝滑）</li><li>2.无论速度高或者低，<strong>恒转矩</strong></li><li>输出扭矩大，比步进电机带负载能力强</li><li>步进电机没有过载能力，伺服电机有过载能力</li></ul><p>伺服的三种功能：</p><ul><li>位置控制</li><li>速度控制</li><li>力矩开展</li></ul><h2 id="编码器" tabindex="-1"><a class="header-anchor" href="#编码器" aria-hidden="true">#</a> 编码器</h2><ul><li><p>增量式：不能掉电保持</p></li><li><p>绝对值：掉电保持</p></li></ul><h1 id="数据标准化" tabindex="-1"><a class="header-anchor" href="#数据标准化" aria-hidden="true">#</a> 数据标准化</h1><p>有两个模块</p><p>​</p><h1 id="模块封装" tabindex="-1"><a class="header-anchor" href="#模块封装" aria-hidden="true">#</a> 模块封装</h1><p>将两个模块进行封装</p>',100)]))}const j=e(R,[["render",Q],["__file","02.西门子指令讲解.html.vue"]]);export{j as default};
