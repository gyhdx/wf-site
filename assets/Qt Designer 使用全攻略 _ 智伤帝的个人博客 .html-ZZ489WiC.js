import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c,o as r,a as e,b as s,e as a,d as t,w as l}from"./app-DBc2jY3V.js";const k="/wf-site/assets/01-D5Ot2S-8.png",d="/wf-site/assets/02-DNCRKAOL.png",g="/wf-site/assets/03-z62QTum1.gif",m="/wf-site/assets/04-B3zEhFDg.gif",v="/wf-site/assets/05-BNgni39l.gif",b="/wf-site/assets/06-C5U3qC8y.gif",y="/wf-site/assets/07-BZ3urk1M.gif",f="/wf-site/assets/08-CquC1Ll_.gif",q="/wf-site/assets/09-s9nkijte.gif",h="/wf-site/assets/10-BJj8hAew.gif",Q="/wf-site/assets/11-DsONZkvP.gif",w="/wf-site/assets/12-BYKkuzh5.gif",D="/wf-site/assets/13-B57KyH2a.gif",x="/wf-site/assets/14-DpAOvgW9.gif",T="/wf-site/assets/15-OmKX0RZq.gif",F="/wf-site/assets/16-BKb1WfSf.gif",X="/wf-site/assets/17-BePgagkN.png",B="/wf-site/assets/18-8s-0TCff.png",j="/wf-site/assets/19-Dqts8Kjx.png",P="/wf-site/assets/21-DEloUUyv.png",_="/wf-site/assets/22-BVtVpttR.png",z="/wf-site/assets/23-CudSHkrP.gif",C="/wf-site/assets/24-ZHyY_cbR.png",S="/wf-site/assets/25-CNleiDNB.png",W="/wf-site/assets/26-OJWpRg_8.png",U="/wf-site/assets/27-DtsdD_-h.png",L="/wf-site/assets/28-0Alabfmx.png",N="/wf-site/assets/29-BtGvPkSH.gif",O="/wf-site/assets/30-FIOwx7k7.png",V="/wf-site/assets/31-BNQC3BDl.png",R={},E={href:"https://doc.qt.io/qt-5/qtdesigner-manual.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://doc.qt.io/qt-5/designer-to-know.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jianshu.com/p/5b063c5745d0",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.csdn.net/a10929/article/details/78114261",target:"_blank",rel:"noopener noreferrer"},G={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/01.png",target:"_blank",rel:"noopener noreferrer"},K={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/02.png",target:"_blank",rel:"noopener noreferrer"},H={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/03.gif",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/04.gif",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/05.gif",target:"_blank",rel:"noopener noreferrer"},J={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/06.gif",target:"_blank",rel:"noopener noreferrer"},$={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/07.gif",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/08.gif",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://doc.qt.io/qt-5/stylesheet-reference.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://doc.qt.io/archives/qt-4.8/stylesheet-examples.html",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://www.jianshu.com/p/2ecf26464f78",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.cnblogs.com/wangqiguo/p/4960776.html#_label6",target:"_blank",rel:"noopener noreferrer"},en={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/09.gif",target:"_blank",rel:"noopener noreferrer"},on={href:"https://blog.l0v0.com/posts/6830570a.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://doc.qt.io/qt-5/designer-ui-file-format.html",target:"_blank",rel:"noopener noreferrer"},un={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/10.gif",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/11.gif",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/12.gif",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/13.gif",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/14.gif",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/15.gif",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/16.gif",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/17.png",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://doc.qt.io/qt-5/designer-buddy-mode.html",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://blog.csdn.net/technologyleader/article/details/82014028",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/mottosso/Qt.py/tree/master/examples/loadUi",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://github.com/mottosso/Qt.py/blob/master/examples/loadUi/baseinstance1.py",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/18.png",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/19.png",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/21.png",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/22.png",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/23.gif",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/24.png",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/25.png",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/26.png",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/27.png",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/28.png",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/29.gif",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/m3trik/tk",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://github.com/m3trik/tk/blob/master/tk_switchboard.py",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://github.com/mottosso/Qt.py/blob/master/Qt.py",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/30.png",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://cdn.jsdelivr.net/gh/FXTD-odyssey/FXTD-odyssey.github.io@master/post_img/bea01990/31.png",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://blog.l0v0.com/posts/bea01990.html",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://creativecommons.org/licenses/by-nc-sa/4.0/",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://blog.l0v0.com",target:"_blank",rel:"noopener noreferrer"};function On(Vn,n){const o=i("RouterLink"),p=i("ExternalLinkIcon");return r(),c("div",null,[n[81]||(n[81]=e('<blockquote><p>来源：https://blog.l0v0.com/posts/bea01990.html</p></blockquote><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><blockquote><p>本来是最近用了一些 Qt Designer 一些之前没用过的特性，觉得特别有用，打算写篇小文章总结一下就算了。   可是想着想着就全面铺开了，之前写 Python Qt 开发系列教程的时候也涉猎到 Qt Designer。   但是 Qt Designer 写得比较基础，总结得不系统😒   这次打算统一将 Qt Designer 黑科技全部挖掘出来😁   这篇文章的前面部分将会介绍 Qt Designer 基础使用方法，搭配 gif 动图配合进行说明   后半部分会介绍一些比较少用的特性，和自己的使用经验汇总，还会介绍以下的独门内容😎</p><ol><li>VScode 对接 Qt Designer</li><li>Qt.py 动态加载 ui 文件</li><li>自定义 Property</li><li>手动修改 ui 文件 - 实现特殊父类</li><li>组件提升</li></ol></blockquote><h2 id="什么是-qt-designer" tabindex="-1"><a class="header-anchor" href="#什么是-qt-designer" aria-hidden="true">#</a> 什么是 Qt Designer</h2>',4)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("没有在网上找到百度百科之类的词条说明这个工具。   不过大概的意思也可以参照我之前写的系列教程的其中一篇 ")),t(o,{to:"/python/c5c920e.html"},{default:l(()=>n[0]||(n[0]=[a("链接")])),_:1})])]),n[82]||(n[82]=s("blockquote",null,[s("p",null,"基本上我自己概括起来就是，开发界面不需要代码了。   实现 View 的自由搭配，通过可视化搭建好图形界面之后，只需要关注业务处理的代码即可。   这就是使用 Qt Designer 的优势，界面代码自动生成，如果使用 Qt.py 流程设置不需要生成 Python 代码。")],-1)),n[83]||(n[83]=s("h1",{id:"_1-qt-designer-基础",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-qt-designer-基础","aria-hidden":"true"},"#"),a(" 1.Qt Designer 基础")],-1)),n[84]||(n[84]=s("h2",{id:"入门介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#入门介绍","aria-hidden":"true"},"#"),a(" 入门介绍")],-1)),s("blockquote",null,[n[6]||(n[6]=s("p",null,"Qt Designer 的使用相当简单，基本上就是所见即所得。   基础的玩法网上也有很多不错的文章总结",-1)),s("ul",null,[s("li",null,[s("a",E,[n[2]||(n[2]=a("官网手册")),t(p)])]),s("li",null,[s("a",I,[n[3]||(n[3]=a("官网说明")),t(p)])]),s("li",null,[s("a",M,[n[4]||(n[4]=a("PyQT5 速成教程 - 2 Qt Designer 介绍与入门")),t(p)])]),s("li",null,[s("a",A,[n[5]||(n[5]=a("使用 Qt Designer 来设计界面")),t(p)])])])]),s("p",null,[n[7]||(n[7]=s("img",{src:k,alt:"",loading:"lazy"},null,-1)),s("a",G,[t(p)])]),n[85]||(n[85]=s("blockquote",null,[s("p",null,"软件默认打开如上图，可以随便选择一个组件启动 Designer   我这里选择 QWidget ，平时一般开发也是用 QWidget 比较多。")],-1)),s("p",null,[n[8]||(n[8]=s("img",{src:d,alt:"",loading:"lazy"},null,-1)),s("a",K,[t(p)])]),n[86]||(n[86]=s("blockquote",null,[s("p",null,"界面分类如上图所示，")],-1)),s("p",null,[n[9]||(n[9]=s("img",{src:g,alt:"",loading:"lazy"},null,-1)),s("a",H,[t(p)])]),n[87]||(n[87]=s("blockquote",null,[s("p",null,"Qt Designer 的使用方法其实不难，基本上从左侧的组件库里面拖拽组件，然后放到窗口里面。")],-1)),s("p",null,[n[10]||(n[10]=s("img",{src:m,alt:"",loading:"lazy"},null,-1)),s("a",Z,[t(p)])]),n[88]||(n[88]=s("blockquote",null,[s("p",null,"然后可以像控制窗口一样可以用左键拖拽可以缩放组件。   最基础的使用就是如此，懂了这些操作完全就可以自己拖拽组件搭配出想要的界面了。")],-1)),n[89]||(n[89]=s("h3",{id:"布局",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#布局","aria-hidden":"true"},"#"),a(" 布局")],-1)),n[90]||(n[90]=s("blockquote",null,[s("p",null,"当然上面的搭配方法会如果遇到界面的窗口缩放的话，就出问题了。   要让组件自动适应窗口的变化，就需要 Layout 去配合。")],-1)),s("p",null,[n[11]||(n[11]=s("img",{src:v,alt:"",loading:"lazy"},null,-1)),s("a",Y,[t(p)])]),n[91]||(n[91]=s("blockquote",null,[s("p",null,"上面就是设置 VBoxLayout 的竖向布局来布局页面。   当然 Qt 提供的布局还有 横向布局、网格布局、表单布局。")],-1)),s("p",null,[n[12]||(n[12]=s("img",{src:b,alt:"",loading:"lazy"},null,-1)),s("a",J,[t(p)])]),n[92]||(n[92]=s("blockquote",null,[s("p",null,"其实用起来都非常好理解，可以通过工具栏将切换上述的布局。")],-1)),n[93]||(n[93]=s("h3",{id:"属性编辑器编辑属性",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#属性编辑器编辑属性","aria-hidden":"true"},"#"),a(" 属性编辑器编辑属性")],-1)),n[94]||(n[94]=s("blockquote",null,[s("p",null,"右侧的属性编辑器可以定义组件很多东西。   包括组件的状态，以及一些组件特有的属性。")],-1)),s("p",null,[n[13]||(n[13]=s("img",{src:y,alt:"",loading:"lazy"},null,-1)),s("a",$,[t(p)])]),n[95]||(n[95]=s("blockquote",null,[s("p",null,"这个具体的组件属性可以参照 Qt 的文档，然后使用上方的搜索查找对应的属性。")],-1)),n[96]||(n[96]=s("h3",{id:"设置-stylesheet",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#设置-stylesheet","aria-hidden":"true"},"#"),a(" 设置 stylesheet")],-1)),n[97]||(n[97]=s("blockquote",null,[s("p",null,"Qt 同样提供了类似于 Web 的样式表用来快速定义组件的显示效果。   可以在属性编辑器的 StyleSheet 里面进行自定义。")],-1)),s("p",null,[n[14]||(n[14]=s("img",{src:f,alt:"",loading:"lazy"},null,-1)),s("a",nn,[t(p)])]),s("blockquote",null,[n[19]||(n[19]=s("p",null,"关于样式表配置可以参照网上文章以及官网",-1)),s("ol",null,[s("li",null,[s("a",sn,[n[15]||(n[15]=a("官网 Qt Style Sheets Reference")),t(p)])]),s("li",null,[s("a",an,[n[16]||(n[16]=a("官网 Qt Style Sheets Examples")),t(p)])]),s("li",null,[s("a",tn,[n[17]||(n[17]=a("Qt 常用 QSS 集合")),t(p)])]),s("li",null,[s("a",pn,[n[18]||(n[18]=a("QSS 总结以及最近做的 Qt 项目")),t(p)])])])]),n[98]||(n[98]=s("blockquote",null,[s("p",null,"QSS 背后其实 Qt 的 Paint 事件，通过样式表来简化手动绘制的操作。   如果想要实现一些自定义的图形绘制， 需要代码通过 Qt 的 PaintEvent 实现。")],-1)),n[99]||(n[99]=s("h3",{id:"信号槽连接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#信号槽连接","aria-hidden":"true"},"#"),a(" 信号槽连接")],-1)),n[100]||(n[100]=s("blockquote",null,[s("p",null,"Qt Designer 可以设置组件的信号槽连接。")],-1)),s("p",null,[n[20]||(n[20]=s("img",{src:q,alt:"",loading:"lazy"},null,-1)),s("a",en,[t(p)])]),s("blockquote",null,[s("p",null,[n[22]||(n[22]=a("Qt 的信号槽可以实现一些 Qt 组件的事件回调，比如点击按钮的触发，数据变动触发等等。   通常过去都是用代码连接信号槽。 ")),s("a",on,[n[21]||(n[21]=a("链接参考")),t(p)])])]),n[101]||(n[101]=s("h3",{id:"保存-ui-文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#保存-ui-文件","aria-hidden":"true"},"#"),a(" 保存 ui 文件")],-1)),s("blockquote",null,[s("p",null,[n[24]||(n[24]=a("ui 文件实质上是一个 xml 文件。   定义规范可以参考官方的 XML scheme 文档 ")),s("a",ln,[n[23]||(n[23]=a("链接")),t(p)])])]),n[102]||(n[102]=e(`<blockquote><p>上面的演示文件存储下来如下。</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ui</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">&gt;</span></span>Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QWidget<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>geometry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>width</span><span class="token punctuation">&gt;</span></span>329<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>width</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>height</span><span class="token punctuation">&gt;</span></span>224<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>height</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>windowTitle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QVBoxLayout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>verticalLayout_2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QVBoxLayout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>verticalLayout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QListView<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listView<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QPushButton<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pushButton_2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>enabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>PushButton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QPushButton<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pushButton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styleSheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">notr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>background:rgb(170, 0, 0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>test BUtton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QRadioButton<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radioButton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>RadioButton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QCheckBox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkBox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>CheckBox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">/&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connections</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connection</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sender</span><span class="token punctuation">&gt;</span></span>pushButton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sender</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>signal</span><span class="token punctuation">&gt;</span></span>clicked()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>signal</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span><span class="token punctuation">&gt;</span></span>checkBox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>toggle()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hints</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hint</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sourcelabel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">&gt;</span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">&gt;</span></span>214<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hint</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hint</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destinationlabel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">&gt;</span></span>71<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">&gt;</span></span>265<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hint</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hints</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connection</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connections</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ui</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-qt-designer-功能小技巧" tabindex="-1"><a class="header-anchor" href="#_2-qt-designer-功能小技巧" aria-hidden="true">#</a> 2.Qt Designer 功能小技巧</h1><h2 id="qrc-资源" tabindex="-1"><a class="header-anchor" href="#qrc-资源" aria-hidden="true">#</a> qrc 资源</h2>`,4)),s("p",null,[n[25]||(n[25]=s("img",{src:h,alt:"",loading:"lazy"},null,-1)),s("a",un,[t(p)])]),n[103]||(n[103]=e(`<blockquote><p>设置资源路径，可以加载外部的图片资源。   在这个过程会通过 Qt Designer 创建了一个 qrc 文件。   这个 qrc 文件也是一个 xml ，用来描述索引的图片资源的位置。   要使用 Qt 的 qrc 资源文件需要将资源编译为 Python 代码。   这个过程会自动将图片资源转换为 Python 的字符信息。</p></blockquote><blockquote><p>编译 qrc 文件需要用 pyside2-rcc.exe pyrcc5.exe 执行程序进行转换   maya2019 及以上的版本会总算是集成了 pyside2-rcc.exe 可以直接使用</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:\\Program Files\\Autodesk\\Maya2019\\bin&gt;pyside2-rcc.exe -h
PySide2 resource compiler
Usage: pyside2-rcc.exe  [options] &lt;inputs&gt;

Options:
    -o file           Write output to file rather than stdout
    -py2              Generate code for any Python v2.x version
    -py3              Generate code for any Python v3.x version (default)
    -name name        Create an external initialization function with name
    -threshold level  Threshold to consider compressing files
    -compress level   Compress input files by level
    -root path        Prefix resource access path with root path
    -no-compress      Disable all compression
    -version          Display version
    -help             Display this information
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pyside2-rcc test.qrc -o test_qrc.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>感觉说明执行命令即可将 qrc 文件转换为 python 代码，调用直接 import 即可。   使用 qrc 的 python 代码可以将资源注册到 QApplication 里面。   不需要再读取资源数据，所有的组件都可以访问这些资源。</p></blockquote><h2 id="spacer-妙用" tabindex="-1"><a class="header-anchor" href="#spacer-妙用" aria-hidden="true">#</a> Spacer 妙用</h2>`,6)),s("p",null,[n[26]||(n[26]=s("img",{src:Q,alt:"",loading:"lazy"},null,-1)),s("a",cn,[t(p)])]),n[104]||(n[104]=s("blockquote",null,[s("p",null,"Spacer 组件让 UI 更加紧凑。   在缩放窗口的时候可以让 UI 直接没有间隙，观感好很多。")],-1)),n[105]||(n[105]=s("h2",{id:"layout-转组件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#layout-转组件","aria-hidden":"true"},"#"),a(" Layout 转组件")],-1)),s("p",null,[n[27]||(n[27]=s("img",{src:w,alt:"",loading:"lazy"},null,-1)),s("a",rn,[t(p)])]),n[106]||(n[106]=s("blockquote",null,[s("p",null,"Layout 布局不属于 Widget 组件，无法设置样式。   这个时候可以将 Layout 转成 QWidet 之类的组件实现进一步的操作。")],-1)),n[107]||(n[107]=s("h2",{id:"ctrl-复制组件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ctrl-复制组件","aria-hidden":"true"},"#"),a(" Ctrl 复制组件")],-1)),s("p",null,[n[28]||(n[28]=s("img",{src:D,alt:"",loading:"lazy"},null,-1)),s("a",kn,[t(p)])]),n[108]||(n[108]=s("blockquote",null,[s("p",null,"按住 Ctrl 键可以复制组件，有时候复杂布局也可以一并复制。")],-1)),n[109]||(n[109]=s("h2",{id:"select-ancestor-方便选择父级",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#select-ancestor-方便选择父级","aria-hidden":"true"},"#"),a(" select ancestor 方便选择父级")],-1)),s("p",null,[n[29]||(n[29]=s("img",{src:x,alt:"",loading:"lazy"},null,-1)),s("a",dn,[t(p)])]),n[110]||(n[110]=s("blockquote",null,[s("p",null,"组件比较复杂的情况，选择会父组件会比较不方便，只能通过组件间的间隙进行选择。   可以在右侧的大纲中选择，或者使用 select ancestor 命令")],-1)),n[111]||(n[111]=s("h2",{id:"鼠标中间方便框选",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#鼠标中间方便框选","aria-hidden":"true"},"#"),a(" 鼠标中间方便框选")],-1)),s("p",null,[n[30]||(n[30]=s("img",{src:T,alt:"",loading:"lazy"},null,-1)),s("a",gn,[t(p)])]),n[112]||(n[112]=s("blockquote",null,[s("p",null,"本来用鼠标左键在空白区域拖拽，可以框选大量组件。   但是组件比较多的话，没有空白区域，则可以用鼠标中键触发框选。")],-1)),n[113]||(n[113]=s("h2",{id:"ctrl-r-开启窗口预览",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ctrl-r-开启窗口预览","aria-hidden":"true"},"#"),a(" ctrl + R 开启窗口预览")],-1)),s("p",null,[n[31]||(n[31]=s("img",{src:F,alt:"",loading:"lazy"},null,-1)),s("a",mn,[t(p)])]),n[114]||(n[114]=s("blockquote",null,[s("p",null,"Ctrl + R 快捷键可以快速打开一个运行状态的预览窗口。   这个操作在上面的信号槽中已经有所演示。")],-1)),n[115]||(n[115]=s("h2",{id:"tab-order-编辑",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tab-order-编辑","aria-hidden":"true"},"#"),a(" Tab order 编辑")],-1)),s("p",null,[n[32]||(n[32]=s("img",{src:X,alt:"",loading:"lazy"},null,-1)),s("a",vn,[t(p)])]),n[116]||(n[116]=s("blockquote",null,[s("p",null,"很少有用到。   使用场景是输入框很多的时候，可以定义 Tab 键跳转到的组件")],-1)),n[117]||(n[117]=s("h2",{id:"edit-buddies-编辑功能",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#edit-buddies-编辑功能","aria-hidden":"true"},"#"),a(" Edit Buddies 编辑功能")],-1)),n[118]||(n[118]=s("blockquote",null,[s("p",null,"设置聚焦功能 ，我从来没有用过。   用来通过 QLabel 的快捷键快速触发 QLineEdit 的聚焦。")],-1)),s("blockquote",null,[s("ul",null,[s("li",null,[s("a",bn,[n[33]||(n[33]=a("官方链接")),t(p)])]),s("li",null,[s("a",yn,[n[34]||(n[34]=a("QT Edit Buddies 的理解")),t(p)])])])]),n[119]||(n[119]=s("h1",{id:"_3-ui-文件-python-调用方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-ui-文件-python-调用方法","aria-hidden":"true"},"#"),a(" 3.ui 文件 Python 调用方法")],-1)),n[120]||(n[120]=s("h2",{id:"pyside2-uic-编译",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pyside2-uic-编译","aria-hidden":"true"},"#"),a(" pyside2-uic 编译")],-1)),s("blockquote",null,[s("p",null,[n[36]||(n[36]=a("关于如何使用 pyside2-uic 编译 ui 文件，我之前的系列文章有保姆级的演示 ")),t(o,{to:"/python/c5c920e.html"},{default:l(()=>n[35]||(n[35]=[a("链接")])),_:1}),n[37]||(n[37]=a("   所以这里就不在赘述，我着重介绍新的方案，目前我开发主要用的是下面的方案了😎"))])]),n[121]||(n[121]=s("h2",{id:"qt-py-动态加载-ui-文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#qt-py-动态加载-ui-文件","aria-hidden":"true"},"#"),a(" Qt.py 动态加载 ui 文件")],-1)),s("blockquote",null,[s("p",null,[n[39]||(n[39]=a("关于 Qt.py 我之前的教程系列里面有所提及👏 ")),t(o,{to:"/python/2e0af969.html"},{default:l(()=>n[38]||(n[38]=[a("链接")])),_:1})])]),n[122]||(n[122]=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Qt <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span>QtGui<span class="token punctuation">,</span>QtCore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1)),s("blockquote",null,[s("p",null,[n[41]||(n[41]=a("最大的特点就是将 PyQt4 和 PySide 的代码做了兼容 PyQt5 和 PySide2   全部用 Qt5 来写，自动兼容，缺点就是会丢失编辑器的代码提示。   丢失代码提示也是有解决方案，我后面补上一起文章进行说明 ")),t(o,{to:"/python/df750dd1.html"},{default:l(()=>n[40]||(n[40]=[a("链接")])),_:1})])]),n[123]||(n[123]=e(`<hr><blockquote><p>除了上面的用法之外， Qt.py 还有一些藏得比较深的功能，官方的 readme 文档居然不写出来。🤷‍♂️   我最初是通过 dir 找到这个东西的，貌似不是 Qt 官方的类，于是顺藤摸瓜。   发现 Qt.py 将一些特殊的兼容组件整合到这个类里面去了，其中就包括兼容不同 Qt 模块的动态 loadUi 方法。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Qt<span class="token punctuation">.</span>QtCompat <span class="token keyword">import</span> loadUi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3)),s("blockquote",null,[s("p",null,[n[44]||(n[44]=a("其实再到 Qt.py 的仓库上摸索一下，会发现有使用案例的 ")),s("a",fn,[n[42]||(n[42]=a("链接")),t(p)]),n[45]||(n[45]=a("   loadUi 的使用非常简单，可以参照官方提供的")),s("a",qn,[n[43]||(n[43]=a("案例")),t(p)]),n[46]||(n[46]=a("   基本上就是在 类里面 调用 loadUi ， 传入 ui 路径 和 self 即可。"))])]),n[124]||(n[124]=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> Qt <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span>QtGui<span class="token punctuation">,</span>QtCore
<span class="token keyword">from</span> Qt<span class="token punctuation">.</span>QtCompat <span class="token keyword">import</span> loadUi

<span class="token keyword">class</span> <span class="token class-name">TestWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        DIR  <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
        ui_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>DIR<span class="token punctuation">,</span><span class="token string">&quot;test.ui&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># NOTE 加载 ui 文件</span>
        loadUi<span class="token punctuation">(</span>ui_path<span class="token punctuation">,</span>self<span class="token punctuation">)</span>

        <span class="token comment"># NOTE 执行了 loadUi 之后可以通过 ObjectName  获取到 ui 文件里面的定义的组件了</span>
        self<span class="token punctuation">.</span>Test_BTN<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面就是简单的使用代码场景   这种写法的好处就是不需要手动执行编译命令生成 py 文件   ui 文件保存， python 重开一下窗口即可看到 Qt Designer 中的更新，使用更加方便了。</p></blockquote><h1 id="_4-vscode-对接-qt-designer" tabindex="-1"><a class="header-anchor" href="#_4-vscode-对接-qt-designer" aria-hidden="true">#</a> 4.VScode 对接 Qt Designer</h1>`,3)),s("p",null,[n[47]||(n[47]=s("img",{src:B,alt:"",loading:"lazy"},null,-1)),s("a",hn,[t(p)])]),n[125]||(n[125]=s("blockquote",null,[s("p",null,"VScode 有一个非常好用的插件，可以自己配置 Qt 工具的路径😊")],-1)),s("p",null,[n[48]||(n[48]=s("img",{src:j,alt:"",loading:"lazy"},null,-1)),s("a",Qn,[t(p)])]),n[126]||(n[126]=s("blockquote",null,[s("p",null,"配置好这些，打开 ui 文件可以直接通过 VScode 打开设置好的 Qt Designer   也可以自动 compile 出代码")],-1)),s("p",null,[n[49]||(n[49]=s("img",{src:P,alt:"",loading:"lazy"},null,-1)),s("a",wn,[t(p)])]),n[127]||(n[127]=s("blockquote",null,[s("p",null,"我设置的 pyuic 没有设置代码输出的路径，所以我这里编译显示的代码是在 VScode 里面的。   我一般不用 compile ，但是有时候需要手动配置组件代码的时候，也可以快速通过 ui 文件编译查一下代码怎么写，还挺方便的。   另外 VScode 命令行输入 edit 也可以自动启动 Qt Designer 并打开当前在 VScode 打开的 ui 文件，这个也非常方便。😏")],-1)),n[128]||(n[128]=s("h1",{id:"_5-qt-designer-鲜为人知的黑科技",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-qt-designer-鲜为人知的黑科技","aria-hidden":"true"},"#"),a(" 5.Qt Designer 鲜为人知的黑科技")],-1)),n[129]||(n[129]=s("blockquote",null,[s("p",null,"最后我们来说讲解最刺激的黑科技部分😀")],-1)),n[130]||(n[130]=s("h2",{id:"自定义-property",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义-property","aria-hidden":"true"},"#"),a(" 自定义 property")],-1)),n[131]||(n[131]=s("blockquote",null,[s("p",null,"属性编辑器可以配置自定义属性到组件里面。")],-1)),s("p",null,[n[50]||(n[50]=s("img",{src:_,alt:"",loading:"lazy"},null,-1)),s("a",Dn,[t(p)])]),n[132]||(n[132]=s("blockquote",null,[s("p",null,"比较常用的就是 字符串 和 布尔类型。   点击其他还能看到更多 C++ 相关的类型，一般情况下也用不上。")],-1)),n[133]||(n[133]=s("h3",{id:"挂载配置文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#挂载配置文件","aria-hidden":"true"},"#"),a(" 挂载配置文件")],-1)),s("p",null,[n[51]||(n[51]=s("img",{src:z,alt:"",loading:"lazy"},null,-1)),s("a",xn,[t(p)])]),n[134]||(n[134]=e(`<blockquote><p>基于字符串可以挂载的原理，我可以弄一套 json 配置到组件里面。   然后再 Python 固定读取这个属性解析 json 配置，就甚至可以实现在 Qt Designer 配置组件的基础行为。   组件功能可以更为灵活，不过也不建议配置过于复杂，建议业务逻辑还是写到代码里合适。</p></blockquote><blockquote><p>后续 Python 读取这个属性如下</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;method&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;setText&quot;</span><span class="token operator">:</span><span class="token string">&quot;输出名称&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> json
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict

<span class="token keyword">from</span> Qt <span class="token keyword">import</span> QtWidgets<span class="token punctuation">,</span>QtGui<span class="token punctuation">,</span>QtCore
<span class="token keyword">from</span> Qt<span class="token punctuation">.</span>QtCompat <span class="token keyword">import</span> loadUi

<span class="token keyword">def</span> <span class="token function">ui_PyInit</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    递归遍历所有的 Widget 组件
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span><span class="token string">&quot;children&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>

    <span class="token comment"># NOTE 初始化 PyInit 中配置的方法</span>
    data <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token builtin">property</span><span class="token punctuation">(</span><span class="token string">&quot;PyInit&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> data<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">,</span>object_pairs_hook<span class="token operator">=</span>OrderedDict<span class="token punctuation">)</span>
            <span class="token keyword">for</span> method<span class="token punctuation">,</span>param <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                param <span class="token operator">=</span> param <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>param<span class="token punctuation">]</span>
                <span class="token builtin">getattr</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>param<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

    <span class="token keyword">for</span> child <span class="token keyword">in</span> widget<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ui_PyInit<span class="token punctuation">(</span>child<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TestWidget</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        DIR  <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
        ui_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>DIR<span class="token punctuation">,</span><span class="token string">&quot;test.ui&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># NOTE 加载 ui 文件</span>
        loadUi<span class="token punctuation">(</span>ui_path<span class="token punctuation">,</span>self<span class="token punctuation">)</span>
        <span class="token comment"># NOTE 初始化配置方法</span>
        ui_PyInit<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手动修改-ui-文件" tabindex="-1"><a class="header-anchor" href="#手动修改-ui-文件" aria-hidden="true">#</a> 手动修改 ui 文件</h2><blockquote><p>ui 文件本质上就是 XML   可以通过手动修改 XML 实现一些 Qt Designer 本身无法设置的操作。</p></blockquote><h3 id="将-qwidget-修改为特定组件" tabindex="-1"><a class="header-anchor" href="#将-qwidget-修改为特定组件" aria-hidden="true">#</a> 将 QWidget 修改为特定组件</h3>`,7)),s("p",null,[n[52]||(n[52]=s("img",{src:C,alt:"",loading:"lazy"},null,-1)),s("a",Tn,[t(p)])]),n[135]||(n[135]=s("blockquote",null,[s("p",null,"Qt Designer 无法创建一个纯按钮之类的 ui 文件   默认的 ui 文件必须是个容器。")],-1)),n[136]||(n[136]=s("blockquote",null,[s("p",null,"但是我就是有个需求要弄一个纯 按钮 的 ui 文件，应该要怎么实现。   可以通过修改 xml 类来实现。")],-1)),n[137]||(n[137]=s("blockquote",null,[s("p",null,"首先默认创建一个 QWidget 的 ui 文件。")],-1)),s("p",null,[n[53]||(n[53]=s("img",{src:S,alt:"",loading:"lazy"},null,-1)),s("a",Fn,[t(p)])]),n[138]||(n[138]=e(`<blockquote><p>然后将 ui 文件的 QWidget 修改为 QPushButton</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ui</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span><span class="token punctuation">&gt;</span></span>Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>widget</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>QPushButton<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>geometry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>width</span><span class="token punctuation">&gt;</span></span>395<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>width</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>height</span><span class="token punctuation">&gt;</span></span>149<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>height</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>windowTitle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>widget</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">/&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connections</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ui</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重新用 QtDesigner 打开这个文件。   你会发现 Qt Designer 里面呈现的是一个按钮而不是 QWidget 了。</p></blockquote>`,3)),s("p",null,[n[54]||(n[54]=s("img",{src:W,alt:"",loading:"lazy"},null,-1)),s("a",Xn,[t(p)])]),n[139]||(n[139]=s("h3",{id:"给-qwidget-添加-menubar",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#给-qwidget-添加-menubar","aria-hidden":"true"},"#"),a(" 给 QWidget 添加 MenuBar")],-1)),n[140]||(n[140]=s("blockquote",null,[s("p",null,"基于上面的脑洞，也可以实现给 QWidget 添加 QMenuBar 的骚操作。   默认情况下，只有 QMainWindow 可以在 Qt Designer 里面配置 QMenuBar 实现下来菜单。   由于左侧的组件列表没有 QMenuBar 组件，所以根本就无法添加到 QWidget 里面。")],-1)),n[141]||(n[141]=s("blockquote",null,[s("p",null,"通过编辑 ui 文件，然后用上面的方法将两个 ui 文件拼接到一起，就可以实现这种骚操作。   这样就不需要手动写 QMenuBar 相关的代码了。")],-1)),s("p",null,[n[55]||(n[55]=s("img",{src:U,alt:"",loading:"lazy"},null,-1)),s("a",Bn,[t(p)])]),n[142]||(n[142]=s("h2",{id:"组件提升",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#组件提升","aria-hidden":"true"},"#"),a(" 组件提升")],-1)),n[143]||(n[143]=s("blockquote",null,[s("p",null,"默认情况下， Qt Designer 只能拖拽一些基础组件，如果我们想要套用自定义的组件，似乎就无法实现了。   其实不然，通过 promote 提升，可以实现将组件提升为 第三方 类。   当然，组件提升无法在 Qt Designer 直接预览到效果，只能看到基类的 UI。   如果要想实现在 Qt Designer 直接看到效果，也可以用 C++ 开发 Qt Designer 的插件，直接扩展出自定义组件。(这个操作我也不会😂)")],-1)),n[144]||(n[144]=s("blockquote",null,[s("p",null,"基础的提升操作如下")],-1)),s("p",null,[n[56]||(n[56]=s("img",{src:L,alt:"",loading:"lazy"},null,-1)),s("a",jn,[t(p)])]),n[145]||(n[145]=s("blockquote",null,[s("p",null,"看起来似乎也是针对 C++ 才有效。   其实不然。")],-1)),s("p",null,[n[57]||(n[57]=s("img",{src:N,alt:"",loading:"lazy"},null,-1)),s("a",Pn,[t(p)])]),n[146]||(n[146]=e(`<blockquote><p>先添加一个配置头文件的配置   然后再点击 Promote 来提升组件，这个操作的确有点反人类设计😓</p></blockquote><blockquote><p>下面编译这个 ui 文件可以看到神奇的 promote 效果</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide2 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets

<span class="token keyword">class</span> <span class="token class-name">Ui_Form</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>
        Form<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&quot;Form&quot;</span><span class="token punctuation">)</span>
        Form<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> MPushButton<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&quot;pushButton&quot;</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>
        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>
        Form<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">&quot;Form&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Form&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token string">&quot;Form&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PushButton&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> dayu_widgets<span class="token punctuation">.</span>push_button <span class="token keyword">import</span> MPushButton
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>是的，头文件自动转为 Python 的库， 类名就对应库里面的类。   只要自定义的组件类按照默认的 构造函数传参， 就不存在什么问题。</p></blockquote>`,4)),s("blockquote",null,[s("p",null,[n[60]||(n[60]=a("这个东西其实也可以直接用 ui 文件加载的方式调用起来， 我也是最近看了 ")),s("a",_n,[n[58]||(n[58]=a("tk 库")),t(p)]),n[61]||(n[61]=a(" 学到的新知识   可以参考 ")),s("a",zn,[n[59]||(n[59]=a("tk_switchboard.py")),t(p)]),n[62]||(n[62]=a(" 代码   这里用到了 QUiLoader ")),n[63]||(n[63]=s("code",null,"registerCustomWidget",-1)),n[64]||(n[64]=a(" 的使用方法   通过这个方法可以将自定义的组件注册到 QUiLoader 里面，然后 QUiLoader 读取 ui 文件的时候自动映射到第三方组件上。"))])]),s("blockquote",null,[s("p",null,[n[66]||(n[66]=a("这个是 PySide2 的实现方案，其实 Qt.py 早已经在考虑到这个问题。   参考 Qt.py 的 loadUi 源码可以发现它通过 Python 读取 xml 里面的头文件然后通过 ")),n[67]||(n[67]=s("code",null,"importlib.import_module",-1)),n[68]||(n[68]=a(" 导入模块 ")),s("a",Cn,[n[65]||(n[65]=a("源码链接")),t(p)]),n[69]||(n[69]=a("   所以用 Qt.py 的 loadUi 更加简单，还兼容 PyQt   当然缺点就 Qt.py 没有暴露自定义模块的传参，只能确保导入模块在 sys.path 里面。"))])]),n[147]||(n[147]=s("h3",{id:"例子-dayu-widget",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#例子-dayu-widget","aria-hidden":"true"},"#"),a(" 例子: dayu_widget")],-1)),s("blockquote",null,[s("p",null,[n[71]||(n[71]=a("这个 dayu_widget 第三方库通过 Qt Designer 直接嵌入的效果可以参考我的 ")),t(o,{to:"/python/513f9ff.html"},{default:l(()=>n[70]||(n[70]=[a("PyToolkit 文章")])),_:1})])]),s("p",null,[n[72]||(n[72]=s("img",{src:O,alt:"",loading:"lazy"},null,-1)),s("a",Sn,[t(p)]),n[73]||(n[73]=s("img",{src:V,alt:"",loading:"lazy"},null,-1)),s("a",Wn,[t(p)])]),n[148]||(n[148]=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1)),n[149]||(n[149]=s("blockquote",null,[s("p",null,"花了大半天的功夫，总算是全面地将 Qt Designer 神兵利器介绍完毕了。   基本上已经将 Qt Designer 的各种玩法透彻剖析了，欢迎大家留言交流意见。")],-1)),n[150]||(n[150]=s("p",null,[a("文章作者: "),s("a",{href:"mailto:undefined"},"智伤帝")],-1)),s("p",null,[n[75]||(n[75]=a("文章链接: ")),s("a",Un,[n[74]||(n[74]=a("https://blog.l0v0.com/posts/bea01990.html")),t(p)])]),s("p",null,[n[78]||(n[78]=a("版权声明: 本博客所有文章除特别声明外，均采用 ")),s("a",Ln,[n[76]||(n[76]=a("CC BY-NC-SA 4.0")),t(p)]),n[79]||(n[79]=a(" 许可协议。转载请注明来自 ")),s("a",Nn,[n[77]||(n[77]=a("智伤帝的个人博客")),t(p)]),n[80]||(n[80]=a("！"))])])}const In=u(R,[["render",On],["__file","Qt Designer 使用全攻略 _ 智伤帝的个人博客 .html.vue"]]);export{In as default};
