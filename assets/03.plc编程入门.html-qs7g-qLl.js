import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as r,o as c,a as d,b as n,e,d as s}from"./app-DBc2jY3V.js";const g="/wf-site/assets/image-20240316165933792-C_27qM77.png",o="/wf-site/assets/image-20240316165954417-lHUMtDLD.png",x="/wf-site/assets/image-20240316170346387-BPA7Rs1J.png",y="/wf-site/assets/image-20240316171044104-DCOaakXh.png",p="/wf-site/assets/v2-f2e3f401d0d4d03faab93492706d84ac_1440w-Uko3mW3V.webp",f="/wf-site/assets/v2-f3fa0830f2a33131adf148c7d80735fb_1440w-_COSIADQ.webp",h="/wf-site/assets/v2-bf5d2c5ac783b1fbbaaafc86833f3f89_1440w-sRjcUjvh.webp",m={},_={href:"https://link.zhihu.com/?target=http%3A//www.founderchip.com/%3Fid%3D41",target:"_blank",rel:"noopener noreferrer"};function u(M,t){const l=a("ExternalLinkIcon");return c(),r("div",null,[t[3]||(t[3]=d('<h2 id="_1-编程语言" tabindex="-1"><a class="header-anchor" href="#_1-编程语言" aria-hidden="true">#</a> 1.编程语言</h2><p>用户运用编程工具可以3实现多种语言进行编程，各个编程语言具有各自的优势，我们平时接触得最多的就是梯形图编程。下面我们就对几种编程语言各自的特点进行一个简单的介绍</p><ul><li>指令表-IL</li><li>梯形图-LAD</li><li>顺序功能图-SFC</li><li>功能块语言-FBD</li><li>st结构化文本-ST</li></ul><figure><img src="'+g+'" alt="image-20240316165933792" tabindex="0" loading="lazy"><figcaption>image-20240316165933792</figcaption></figure><figure><img src="'+o+'" alt="image-20240316165954417" tabindex="0" loading="lazy"><figcaption>image-20240316165954417</figcaption></figure><h2 id="_2-plc软元件介绍" tabindex="-1"><a class="header-anchor" href="#_2-plc软元件介绍" aria-hidden="true">#</a> 2.plc软元件介绍</h2><p>PLC具有的软元件种类如图所示，编程变量由软元件+编号组成，如X0、M10,D10,T5等，大部分编程是通过指令结合编程变量实现的，编程变量可分为位变量如M10、X0,数据变量C0、D0等。</p><figure><img src="'+x+'" alt="image-20240316170346387" tabindex="0" loading="lazy"><figcaption>image-20240316170346387</figcaption></figure><ul><li>输入继电器-x。x000八进制编号</li><li>输出继电器-y。Y000.八进制编号</li><li>辅助继电器-M。M0开始。十进制</li><li>定时器-T。t0</li><li>计算器-C。C0</li><li>数据寄存器-D。D0开始。十六进制</li><li>状态-s</li><li>变址寄存器（V，Z）</li><li>指针（P，I）</li><li>高速计数器-c，c235开始</li></ul><figure><img src="'+y+'" alt="image-20240316171044104" tabindex="0" loading="lazy"><figcaption>image-20240316171044104</figcaption></figure><h2 id="_3-特殊软元件功能" tabindex="-1"><a class="header-anchor" href="#_3-特殊软元件功能" aria-hidden="true">#</a> 3.特殊软元件功能</h2><p>特殊软元件的功能包含特殊辅助继电器和特殊辅助寄存器，三菱PLC特殊辅助继电器共512点(M8000~M8511),它们用来表示PLC的某些状态，提供时钟脉冲和标志（如进位、借位标志），设定PLC运行方式，或者用于步进顺控、禁止中断、设定计数器是加计数还是减计数等；特殊辅助继电器分为两类：</p><ul><li><p><strong>触点利用型</strong> 由PLC的系统程序来驱动触点利用型特殊辅助继电器的线圈，在用户程序中直接使用其触点，但是不能出现它们的线圈，下面是几个例子： M8000(运行监视)：当PLC执行用户程序时，M8000为ON;停止执行时，M8000为OFF。 M8002(初始化脉冲)：M8002仅在M8000由OFF变为ON状态的一个扫描周期内为ON(见图3-8)，可以用M8002的常开触点来使有断电保持功能的元件初始化复位或给它们置初始值。 M8011~M8014分别是10ms,100ms,1s和1min时钟脉冲。 M8005(锂电池电压降低)：电池电压下降至规定值时变为ON,可以用它的触点驱动输出继电器和外部指示灯，提醒工作人员更换锂电池。</p></li><li><p><strong>线圈驱动型</strong> 由用户程序驱动其线圈，使PLC执行特定的操作，用户并不使用它们的触点。例如： M8030的线圈“通电”后，“电池电压降低”发光二极管熄灭； M8033的线圈“通电”时，PLC进入STOP状态后，所有输出继电器的状态保持不变； M8034的线圈“通电”时，禁止所有的输出； M8039的线圈“通电”时，PLC以D8039中指定的扫描时间工作。</p></li></ul><h2 id="_4-plc数据类型" tabindex="-1"><a class="header-anchor" href="#_4-plc数据类型" aria-hidden="true">#</a> 4.plc数据类型</h2><h3 id="主要几种数据类型" tabindex="-1"><a class="header-anchor" href="#主要几种数据类型" aria-hidden="true">#</a> 主要几种数据类型</h3><p>首先说一说“位（bit）”。前一篇文章在讲解数制的时候（参考：PLC基础篇之数制及其表示方法），曾多次提到“位”的概念。“位”，英文名称为“bit”，它是PLC（计算机）的最小存储单位，其取值范围为“0”和“1”两种。</p><p>“位”是存储单位，按位存放的数据，在数据类型中，被称为“布尔型”（Bool）。布尔型数据的取值范围为“0”和“1”，可用英文“TRUE”（真）和“FALSE”（假）表示。</p><p>在PLC的编程中，布尔型的数据使用频率是很高的。对于数字量的输入或输出，都是以“位”（布尔型）的方式进行操作。比如“I0.0”就是一个布尔型变量，它表示输入缓冲区（Input）的第0个字节的第0位。“位”，也俗称“点”，常把输入通道称为“I点”，把输出通道称为“Q点”。</p><p>第二种类型：字节（Byte）。八个“位”组成一个“字节（Byte）”，如下图：</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在PLC中，输入模块和输出模块的通道也是按照字节的顺序来存放的。比如“I0.0~I0.7”，这8个输入“位”组成“IB0”。对于S7-300/400的PLC，Byte类型是无符号数，其取值范围内为 0<sub>255（0xFF）。对于S7-1200/1500PLC的编程（博途平台），Byte类型可以作为有符号数或者无符号数。当作为有符号数时，其取值范围为“-128</sub>+127”；当作为无符号数时，其取值范围为0~255（0xFF）。</p><p>第三种类型：字符型（CHAR）。字符型类型的数据也占用一个字节，它内部存放的是该字符的ASCII码值。比如字符“A”，其ASCII码值为66（0x42）。当程序查询到该数据属于字符型，并且内部存储的值为66时，将会在屏幕上显示大写的字符：“A”。</p>',22)),n("p",null,[t[1]||(t[1]=e("第四种类型：整型（INT）。整型数据占用两个字节（Byte），属于有符号数，其取值范围为：-32768~+32767。整形数据的最高位为符号位，“0”表示正数，“1”表示负数。既然整形数据由两个字节组成，就有字节顺序的问题，哪个字节是高字节呢？西门子S7系列PLC采用大端（Big-Enidan）的存放方式，如下图（关于字节序，请参考文章：")),n("a",_,[t[0]||(t[0]=e("给你讲个来自《格列佛游记》的计算机故事")),s(l)]),t[2]||(t[2]=e("）："))]),t[4]||(t[4]=d('<figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>第五种类型：字（WORD）。“字”类型也占用两个字节，但是它表示无符号数，其取值范围为：0~65535（0xFFFF）。与整型数据一样，也采用Big-Endina的方式存放。</p><p>在PLC中，用“W”来表示一个“字”类型的变量。比如变量“MW0”，其中“M”表示该变量存放在“M”区，“W”表示它是一个“字”类型的变量，“0”表示其起始地址为0。“MW0”由“MB0”和“MB1”组成，其中“MB0”为高字节（Big-Endian字节序）。</p><p>第六种类型：双字（Double WORD）。“双字”由两个“字”组成，因此它包含四个字节，其取值范围为：0~4294967295（0xFFFFFFFF）。在PLC中，“双字”用“D”表示。比如“MD0”，它表示M存储区从地址0开始的4个字节，即：MB0、MB1、MB2和MB3，字节序依然为大端（Big-Endina）。</p><p>第六种类型：双整型（Double INT）。“双整型”类型由两个“整型”组成，也占用四个字节，不过它表示的是有符号数，其取值范围为：-2147483648~+2147483648。在PLC中，表示为“DINT”。</p><p>第七种类型：实型（Real）。“实型”数据占用四个字节，用来表示浮点数。实型数据总计32个“位”，被分成三个部分：</p><p>1）符号位（Sign）：最高位（第31位），正数为“0”，负数为“1”。</p><p>2）指数位（Exponent）：第23位到第30位，用于存储科学计数法中的指数数据，并且采用移位存储；</p><p>3）尾数部分（Mantissa）：第0位到第22位，表示浮点数的尾数部分；</p><p>对于“指数位”，为了处理负指数的需要，其存储的值为实际指数加上偏移量“127”。比如，若实际指数为“0”，则存储值为“127”；若实际指数为“-64”，则存储值为“63”。</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>实型数据（浮点数）可以使用4个字节的空间，可以表示非常大（10的38次方）和非常小（10的负38次方）的数，但是浮点数的运算速度相对整型会慢一些。在PLC编程中，可以输入小数点来表示浮点数。比如“10”表示整数，“10.0”表示浮点数。</p><p>IEC 61131-3 规约了 PLC 中的数据类型，包括21种基本数据类型（basic datatype）、用于函数重载的泛化数据类型（general datatype）、以及自定义数据类型（derived datatype）。</p><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><table><thead><tr><th style="text-align:center;">编号</th><th style="text-align:center;">关键字</th><th style="text-align:center;">数据类型</th><th style="text-align:center;">长度</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;"><code>BOOL</code></td><td style="text-align:center;">布尔</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;"><code>SINT</code></td><td style="text-align:center;">短整数</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"><code>INT</code></td><td style="text-align:center;">整数</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;"><code>DINT</code></td><td style="text-align:center;">双精度整数</td><td style="text-align:center;">32</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;"><code>LINT</code></td><td style="text-align:center;">长整数</td><td style="text-align:center;">64</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"><code>USINT</code></td><td style="text-align:center;">无符号短整数</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"><code>UINT</code></td><td style="text-align:center;">无符号整数</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;"><code>UDINT</code></td><td style="text-align:center;">无符号双精度整数</td><td style="text-align:center;">32</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;"><code>ULINT</code></td><td style="text-align:center;">无符号长整数</td><td style="text-align:center;">64</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;"><code>REAL</code></td><td style="text-align:center;">实数</td><td style="text-align:center;">32</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><code>LREAL</code></td><td style="text-align:center;">长实数</td><td style="text-align:center;">64</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;"><code>TIME</code></td><td style="text-align:center;">持续时间</td><td style="text-align:center;">–</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><code>DATE</code></td><td style="text-align:center;">如期</td><td style="text-align:center;">–</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;"><code>TIME_OF_DAY</code>/<code>TOD</code></td><td style="text-align:center;">时间（当日）</td><td style="text-align:center;">–</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;"><code>DATE_AND_TIME</code>/<code>DT</code></td><td style="text-align:center;">时间与日期</td><td style="text-align:center;">–</td></tr><tr><td style="text-align:center;">16</td><td style="text-align:center;"><code>STRING</code></td><td style="text-align:center;">可变长度单字节字符串</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">17</td><td style="text-align:center;"><code>WSTRING</code></td><td style="text-align:center;">可变长度双字节字符串</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:center;">18</td><td style="text-align:center;"><code>BYTE</code></td><td style="text-align:center;">长为8的位串</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">19</td><td style="text-align:center;"><code>WORD</code></td><td style="text-align:center;">长为16的位串</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:center;">20</td><td style="text-align:center;"><code>DWORD</code></td><td style="text-align:center;">长为32的位串</td><td style="text-align:center;">32</td></tr><tr><td style="text-align:center;">21</td><td style="text-align:center;"><code>LWORD</code></td><td style="text-align:center;">长为64的位串</td><td style="text-align:center;">64</td></tr></tbody></table>',15))])}const C=i(m,[["render",u],["__file","03.plc编程入门.html.vue"]]);export{C as default};
