import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c,o as l,a as o,d as e,b as t,w as p,e as n}from"./app-DBc2jY3V.js";const d={},u={id:"片段访问",tabindex:"-1"};function b(k,a){const s=i("font");return l(),c("div",null,[a[10]||(a[10]=o(`<h2 id="poke指令" tabindex="-1"><a class="header-anchor" href="#poke指令" aria-hidden="true">#</a> poke指令</h2><p>PEEK：读取存储地址<br> 说明</p><p>“读取存储地址”指令用于在不指定数据类型的情况下从存储区读取存储地址。</p><p>使用以下语法更改指令的数据类型：</p><p>PEEK_();</p><p>使用存储区 16#84：DB</p><p>如果将数据块用作存储区且在创建程序代码时未知，则可通过 EN/ENO 机制识别可能的访问错误：</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/png/21683645/1736312251333-5222fecd-9783-45dd-a6dd-05aa0aa976f2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="byteoffset-src" tabindex="-1"><a class="header-anchor" href="#byteoffset-src" aria-hidden="true">#</a> byteOffset_src：</h4><p>是读取的起始地址</p><p>此处是我们的相机返回数据地址</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/png/21683645/1736590339043-dbc5eced-21f7-4a73-bc44-c21d3d5ac20e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>故该数据为68</p><h4 id="写入db区" tabindex="-1"><a class="header-anchor" href="#写入db区" aria-hidden="true">#</a> #写入DB区；</h4><p>指的是我们要将数据写入位置。<img src="https://cdn.nlark.com/yuque/0/2025/png/21683645/1736590404275-95aa1f98-8494-460d-b3cf-fd7cfd58e591.png" alt="" loading="lazy"></p><p>故写1000.</p><h4 id="读取字节长度" tabindex="-1"><a class="header-anchor" href="#读取字节长度" aria-hidden="true">#</a> #读取字节长度</h4><p>：指的是要复制数据的长度。相机数据从68-139一共72个数据。故写入72.</p><h3 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">POKE_BLK</span><span class="token punctuation">(</span>area_src<span class="token operator">:</span><span class="token operator">=</span><span class="token number">16</span>#<span class="token number">81</span><span class="token punctuation">,</span>
         dbNumber_src<span class="token operator">:</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>
         byteOffset_src<span class="token operator">:</span><span class="token operator">=</span>#读取起始地址<span class="token punctuation">,</span>
         area_dest<span class="token operator">:</span><span class="token operator">=</span><span class="token number">16</span>#<span class="token number">84</span><span class="token punctuation">,</span>
         dbNumber_dest<span class="token operator">:</span><span class="token operator">=</span>#写入DB区<span class="token punctuation">,</span>
         byteOffset_dest<span class="token operator">:</span><span class="token operator">=</span>#写入起始地址<span class="token punctuation">,</span>
         count<span class="token operator">:</span><span class="token operator">=</span>#读取字节长度<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="move-blk-variant指令" tabindex="-1"><a class="header-anchor" href="#move-blk-variant指令" aria-hidden="true">#</a> MOVE_BLK_VARIANT指令</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>IF #enable <span class="token operator">=</span> <span class="token number">1</span> THEN
    
    <span class="token comment">// src源操作数</span>
    <span class="token comment">// count：数据长度</span>
    <span class="token comment">// </span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">Read_Error <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">MOVE_BLK_VARIANT</span><span class="token punctuation">(</span>SRC <span class="token operator">:</span><span class="token operator">=</span> #Read_in<span class="token punctuation">,</span></span></span>
                                    COUNT <span class="token operator">:</span><span class="token operator">=</span> #Read_length<span class="token punctuation">,</span>
                                    SRC_INDEX <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                    DEST_INDEX <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                    DEST <span class="token operator">=</span><span class="token operator">&gt;</span> #Read_Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>src：源操作数</p><p>count：数据长度</p>`,24)),e(s,{style:{color:"rgb(35, 41, 48)","background-color":"rgb(250, 250, 250)"}},{default:p(()=>a[0]||(a[0]=[n("SRC_INDEX：如果src源操作数是数组array类型，则该参数用来指定起始元素，否则为0.我们使用地址寻址，故此次为0")])),_:1}),e(s,{style:{color:"rgb(35, 41, 48)","background-color":"rgb(250, 250, 250)"}},{default:p(()=>a[1]||(a[1]=[n("DEST_INDEX：目标操作数起始地址")])),_:1}),e(s,{style:{color:"rgb(35, 41, 48)","background-color":"rgb(250, 250, 250)"}},{default:p(()=>a[2]||(a[2]=[n("DEST：目标位置")])),_:1}),t("h2",u,[a[4]||(a[4]=t("a",{class:"header-anchor",href:"#片段访问","aria-hidden":"true"},"#",-1)),a[5]||(a[5]=n()),e(s,{style:{color:"rgb(35, 41, 48)","background-color":"rgb(250, 250, 250)"}},{default:p(()=>a[3]||(a[3]=[n("片段访问")])),_:1})]),a[11]||(a[11]=o(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//推送次数</span>
<span class="token comment">//</span>
<span class="token comment">//错误写法：#推送次数 := #Read_Data[0] + #Read_Data[1];</span>
#推送次数<span class="token punctuation">.</span><span class="token operator">%</span>B0 <span class="token operator">:</span><span class="token operator">=</span> #Read_Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
#推送次数<span class="token punctuation">.</span><span class="token operator">%</span>B1 <span class="token operator">:</span><span class="token operator">=</span> #Read_Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#推送次数:是一个int类型数据在plc占2个byte。所以当需要获取2个byte中数据合成一个int时可以使用片段访问，来访问int的两个byte位</p><h1 id="getio-setio使用" tabindex="-1"><a class="header-anchor" href="#getio-setio使用" aria-hidden="true">#</a> getIO，setIO使用</h1><p>注：拿到相机后自己试一试</p><figure><img src="https://cdn.nlark.com/yuque/0/2025/png/21683645/1736573366199-e78e1434-49d9-4b8a-b5e0-bd89e300b999.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="读码器触发方式" tabindex="-1"><a class="header-anchor" href="#读码器触发方式" aria-hidden="true">#</a> 读码器触发方式</h2><p>多帧：一个命令拍多次</p><p>单帧：一个命令拍一次：常用</p><p>电平：手动触发时，比较好用，当电平被触发时，拍照（多次），电平恢复结束拍照</p><h2 id="溢出解决方式" tabindex="-1"><a class="header-anchor" href="#溢出解决方式" aria-hidden="true">#</a> 溢出解决方式</h2><p>E.g</p><p>设定：拍照次数：10次</p><p>寄存器范围：0-65535</p><p>寄存器溢出值：=寄存器MAX-拍照次数设定值</p><p>65535-10=65525</p><p>寄存器溢出问题：</p><p>不可忽视，开发，合理的避开溢出区间（方法）</p><p>65534次，记忆，65535,0</p><p>10</p><p>执行次数：=翻滚次数-65534</p><p>缓存校验，10次，Array【0.9 String】</p><p>解决思路：</p><p>1、确定你的拍照次数：10-50；a</p><p>2、确定翻滚次数的区间：0-65535：b</p><p>3、需要将相机设置为单帧触发</p><p>用b-a=c</p><p>这个c就是溢出门槛值。当</p><h2 id="数组越界问题" tabindex="-1"><a class="header-anchor" href="#数组越界问题" aria-hidden="true">#</a> 数组越界问题</h2><pre><code>act_step	UInt	0	非保持	True	True	True	False	

step	Int	0	非保持	True	True	True	False	
</code></pre><p>当这两个数比较时如果act_step = 65525,step = 700</p><p>次数在scl中比较时</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> step <span class="token operator">&lt;</span> actep then

end_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)),t("p",null,[a[7]||(a[7]=t("strong",null,"上述表达式中if判断会变为false。因为两个数的数据类型不同，在比较时博图会把这两个数统一为相同数据类型在比较。而因为setp在前，所以act_step的数据类型也会变成int，而",-1)),a[8]||(a[8]=n("**")),e(s,{style:{color:"rgb(38, 38, 38)"}},{default:p(()=>a[6]||(a[6]=[n("65525转换成int类型是一个负数。故在编程时最好统一数据类型。")])),_:1}),a[9]||(a[9]=n("**"))])])}const g=r(d,[["render",b],["__file","10.读码器.html.vue"]]);export{g as default};
