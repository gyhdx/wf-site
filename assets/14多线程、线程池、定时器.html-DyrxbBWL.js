import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,a as e}from"./app-DBc2jY3V.js";const p="/wf-site/assets/202302262317726-CYxS86fA.png",o="/wf-site/assets/202302262316532-IAjcSaMC.png",i="/wf-site/assets/202303140004082-YU-1dIfk.png",c={};function l(u,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_14-多线程、线程池、定时器" tabindex="-1"><a class="header-anchor" href="#_14-多线程、线程池、定时器" aria-hidden="true">#</a> 14.多线程、线程池、定时器</h1><p>在一般情况下，应用程序都是单线程运行的，但是对于 GUI程序来说，单线程有时满足不了需求。</p><p>例如，如果需要执行一个特别耗时的操作，在执行过程中整个程序就会卡顿，此时用户可能以为程序出错，所以就把程序关闭了;</p><p>或者 Widows 系统也认为程序出错，自动关闭程序。要解决这种问题就涉及多线程的知识。</p><p>一般来说，多线程技术涉及3种方法:</p><ul><li>一是使用计时器模块QTimer</li><li>二是使用多线程模块QThread</li><li>三是使用事件处理功能。</li></ul><h2 id="定时器qtimer" tabindex="-1"><a class="header-anchor" href="#定时器qtimer" aria-hidden="true">#</a> 定时器QTimer</h2><p>定时器 QTimer 像个闹钟,其作用是经过一个固定的时间间隔发送一个信号,执行与信号连接的槽函数,实现自动完成某些功能。</p><p>可以设置定时器只发送一次信号,或多次发送信号;</p><p>可以启动发送信号,也可以停止发送信号。</p><p>用QTimer 创建定时器的方法如下所示,其中parent 是继承自QObejct 的对象。QTimer 是不可见的,当父类删除时,定时器也同时删除。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QTimer

QTimer<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在应用程序中周期性地执行某个操作，如周期性地检测主机的 CPU值，则需要使用QTimer(定时器)，QTimer 类提供了重复的和单次的定时器。</p><p>要使用定时器，需要先创建一个QTimer实例，将其 timeout 信号连接到相应的槽，并调用start()函数。</p><p>然后定时器会以恒定的间隔发射 timeout 信号。start(2000)表示设置时间间隔为2秒并启动定时器，代码如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QTimer

<span class="token comment"># 初始化一个定时器</span>
self<span class="token punctuation">.</span>timer <span class="token operator">=</span> QTimer<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
<span class="token comment"># 计时结束并调用 operate()</span>
<span class="token comment"># 设置时间间隔并启动定时器</span>
self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>operate<span class="token punctuation">)</span>
self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在默认情况下，isSingleShot0返回 False，如果返回 True，则计时器信号只会触发一次，可以通过 setSingleShot(True)修改默认值</p><p>计时器的另一种使用方法是延迟计时，这种方法要使用 sigleShot 信号(前者是timeout 信号)，如 singleShot(5000,receiver)表示5 秒之后会触发 receiver 信号。</p><h3 id="定时器qtimer的常用方法" tabindex="-1"><a class="header-anchor" href="#定时器qtimer的常用方法" aria-hidden="true">#</a> 定时器QTimer的常用方法</h3><p>定时器QTimer的常用方法如表所示,主要方法介绍如下</p><table><thead><tr><th>QTimer的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setInterval(msec:int)</td><td>None</td><td>设置信号发送的时间间隔(毫秒)</td></tr><tr><td>interval()</td><td>int</td><td>获取信号发送的时间间隔(毫秒)</td></tr><tr><td>isActive()</td><td>bool</td><td>获取定时器是否激活</td></tr><tr><td>remainingTime()</td><td>int</td><td>获取距下次发送信号的时间(毫秒)</td></tr><tr><td>setSingleShot(bool)</td><td>None</td><td>设置定时器是否为单次发送</td></tr><tr><td>isSingleShot()</td><td>bool</td><td>获取定时器是否为单次发送</td></tr><tr><td>setTimerType(atype: Qt.TimerType)</td><td>None</td><td>设置定时器的类型</td></tr><tr><td>timerType()</td><td>Qt.TimerType</td><td>获取定时器的类型</td></tr><tr><td>[slot]start(msec:int)</td><td>None</td><td>经过msec毫秒后启动定时器</td></tr><tr><td>[slot]start()</td><td>None</td><td>启动或重新启动定时器，时间间隔的单位为毫秒。<br>如果定时器已经运行，那么它将被停止并重新启动。<br>如果isSingleShot0为True，那么定时器将仅被激活一次</td></tr><tr><td>[slot]stop()</td><td>None</td><td>停止定时器</td></tr><tr><td>timerId()</td><td>int</td><td>获取定时器的ID号</td></tr><tr><td>[static]singleShot(int,Callable)</td><td>None</td><td>经过int毫秒后,调用Python的可执行函数 Callable</td></tr><tr><td>[static]singleShot(msec: int, receiver: QObject,member: bytes)</td><td>None</td><td>经过int毫秒后,执行receiver的槽函数 member</td></tr><tr><td>[static]singleShot(msec: int, timerType: Qt.TimerType, receiver:QObject,member: bytes)</td><td>None</td><td>经过int毫秒后,执行receiver的槽函数 member</td></tr></tbody></table><ul><li><p>定时器的使用</p><ul><li>一般是先建立定时器对象,用setInterval(int)方法设置定时器发送信号的时间间隔,然后将定时器的信号 timeout 与某个槽函数关联最后用start()方法启动定时器。</li><li>如果只需要定时器发送1次信号,可以设置 setSingleShot(bool)为True,否则将会连续不断地发送信号,可以用stop()方法停止定时器信号的发送</li><li>如果只是 1次发送信号,也可以不用创建定时器对象,用定时器类的静态方法singleShot()直接连接某个控件的槽函数。</li><li>如果定义了多个定时器,可以用timeld()方法获取定时器的编号。</li></ul></li><li><p>定时器的精度</p><ul><li><p>与系统和硬件有关用setTimerType(QtTimerType)方法可以设置定时器的精度,其中参数Qt.TimerType 的取值如表所示</p><table><thead><tr><th>Qt.TimerType的取值</th><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>Qt.PreciseTimer</td><td>0</td><td>精确的定时器,保持1毫秒精度</td></tr><tr><td>Qt.CoarseTimer</td><td>1</td><td>精确度差的定时器,精度保持在时间间隔的5%范围内</td></tr><tr><td>Qt.VeryCoarseTimer</td><td>2</td><td>精确度非常差的定时器,精度是500毫秒</td></tr></tbody></table></li></ul></li></ul><h3 id="定时器qtimer的信号" tabindex="-1"><a class="header-anchor" href="#定时器qtimer的信号" aria-hidden="true">#</a> 定时器QTimer的信号</h3><p>定时器只有一个信号 timeout(),每经过固定的时间间隔发送一次信号,或者只发送1次信号</p><p>也可以自定义信号，给定时间间隔后，在调用一个槽函数时发射信号</p><h3 id="定时器qtimer-的应用实例" tabindex="-1"><a class="header-anchor" href="#定时器qtimer-的应用实例" aria-hidden="true">#</a> 定时器QTimer 的应用实例</h3><p>下面的程序定义了两个定时器,第1个定时器用于窗口背景图片的切换,第2个定时器用于设置按钮激活的时间,并改变按钮显示的文字,这里设置单击按钮后 10 秒激活按钮</p><p><img src="`+p+'" alt="image-20230226231742643" loading="lazy"> <img src="'+o+`" alt="image-20230226231641526" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/2/28 22:00</span>
<span class="token comment"># File_name: 定时器QTimer 的应用实例.py</span>
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QPushButton
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPainter<span class="token punctuation">,</span> QPixmap<span class="token punctuation">,</span> QBitmap
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QRect<span class="token punctuation">,</span> QTimer
<span class="token keyword">import</span> sys


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">&quot;定时器&quot;</span><span class="token punctuation">)</span>
        path <span class="token operator">=</span> <span class="token string">r&quot;../../Resources/animal//m1.png&quot;</span>
        self<span class="token punctuation">.</span>pix <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bit <span class="token operator">=</span> QBitmap<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>rect <span class="token operator">=</span> QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pix<span class="token punctuation">.</span>height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>timer_1 <span class="token operator">=</span> QTimer<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 第1个定时器</span>
        self<span class="token punctuation">.</span>timer_1<span class="token punctuation">.</span>setInterval<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment"># 第1个定时器的时间间隔连接</span>
        self<span class="token punctuation">.</span>timer_1<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timer_1_slot<span class="token punctuation">)</span>  <span class="token comment"># 第1个定时器信号与槽函数的</span>

        self<span class="token punctuation">.</span>timer_1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 启动第1个定时器</span>
        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 指示变量</span>
        self<span class="token punctuation">.</span>timer_2 <span class="token operator">=</span> QTimer<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 第2个定时器</span>
        self<span class="token punctuation">.</span>timer_2<span class="token punctuation">.</span>setInterval<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment"># 第2个定时器的时间间隔</span>
        self<span class="token punctuation">.</span>timer_2<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pushButton_enable<span class="token punctuation">)</span>  <span class="token comment"># 第2个定时器信号与槽函数的连接</span>

        self<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">9</span>  <span class="token comment"># 按钮激活时间</span>
        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;单击发送验证码&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timer_2<span class="token punctuation">.</span>start<span class="token punctuation">)</span>  <span class="token comment"># 按钮单击信号与槽函数的#连接</span>

    <span class="token keyword">def</span> <span class="token function">timer_1_slot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>status
        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 更新窗口会发paintEvent(),调用paintEvent()函数</span>

    <span class="token keyword">def</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># paintEvent 事件</span>
        painter <span class="token operator">=</span> QPainter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>status<span class="token punctuation">:</span>
            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pix<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            painter<span class="token punctuation">.</span>drawPixmap<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rect<span class="token punctuation">,</span> self<span class="token punctuation">.</span>bit<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">timer_2_start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 按钮的槽函数</span>
        self<span class="token punctuation">.</span>timer_2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>duration <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;后可重新发送验证码&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pushButton_enable</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>duration <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>duration<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;后可重新发送验证码&quot;</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>duration <span class="token operator">=</span> self<span class="token punctuation">.</span>duration <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">&quot;单击发送验证码&quot;</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>timer_2<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 停止定时器</span>
            self<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">9</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qthread多线程" tabindex="-1"><a class="header-anchor" href="#qthread多线程" aria-hidden="true">#</a> QThread多线程</h2><p>Qt中多线程最常用的方法是QThread，QThread是Ot中所有线程控制的基础，每个QThread实例代表并控制一个线程。</p><p>QThread 有两种使用方式，子类化或实例化。</p><ul><li>子类化QThread 需要重写run0函数并在该函数中进行多线程运算，这种方式相对简单一些;</li><li>实例化QThread 需要通过QObject.moveToThread(targetThread:QThread)函数接管多线程类</li></ul><h3 id="官方介绍" tabindex="-1"><a class="header-anchor" href="#官方介绍" aria-hidden="true">#</a> 官方介绍</h3><p>QThread 对象管理程序中的一个控制线程。QThreads 在 run() 中开始执行。默认情况下，run() 通过调用 exec() 来启动事件循环，并在线程内运行 Qt 事件循环。</p><p>您可以通过使用 moveToThread() 将工作器对象移动到线程来使用工作线程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>

    Q_OBJECT
<span class="token comment"># public slots</span>
    <span class="token keyword">def</span> <span class="token function">doWork</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> QString<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> here <span class="token keyword">is</span> the expensive <span class="token keyword">or</span> blocking operation <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span>
        resultReady<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment"># signals</span>
    <span class="token keyword">def</span> <span class="token function">resultReady</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token keyword">class</span> <span class="token class-name">Controller</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>

    Q_OBJECT
    workerThread <span class="token operator">=</span> QThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># public</span>
    Controller<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        worker <span class="token operator">=</span> Worker<span class="token punctuation">(</span><span class="token punctuation">)</span>
        worker<span class="token punctuation">.</span>moveToThread<span class="token punctuation">(</span>workerThread<span class="token punctuation">)</span>
        workerThread<span class="token punctuation">.</span>finished<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>deleteLater<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>operate<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>doWork<span class="token punctuation">)</span>
        worker<span class="token punctuation">.</span>resultReady<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handleResults<span class="token punctuation">)</span>
        workerThread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token operator">~</span>Controller<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        workerThread<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        workerThread<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># public slots</span>
    <span class="token keyword">def</span> <span class="token function">handleResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment"># signals</span>
    <span class="token keyword">def</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，Worker 插槽中的代码将在单独的线程中执行。</p><p>可以自由地将工人的插槽连接到任何线程中来自任何对象的任何信号。跨不同线程连接信号和插槽是安全的，这要归功于一种称为 queued 的机制。</p><p>使代码在单独的线程中运行的另一种方法是子类QThread并重新实现run()。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>

    Q_OBJECT
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> QString<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> here <span class="token keyword">is</span> the expensive <span class="token keyword">or</span> blocking operation <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span>
        resultReady<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment"># signals</span>
    <span class="token keyword">def</span> <span class="token function">resultReady</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token keyword">def</span> <span class="token function">startWorkInAThread</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

    workerThread <span class="token operator">=</span> WorkerThread<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    workerThread<span class="token punctuation">.</span>resultReady<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handleResults<span class="token punctuation">)</span>
    workerThread<span class="token punctuation">.</span>finished<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>workerThread<span class="token punctuation">.</span>deleteLater<span class="token punctuation">)</span>
    workerThread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该示例中，线程将在 run 函数返回后退出。线程中不会运行任何事件循环，除非调用 exec()。</p><p>重要的是要记住，QThread 实例是实例化它的旧线程，而不是在调用 run() 的新线程中。这意味着 QThread 的所有排队插槽和调用的方法都将在旧线程中执行。因此，希望在新线程中调用槽的开发人员必须使用工作线程-对象方法;新插槽不应直接实现到子类化的 QThread 中。lives in</p><p>与排队的插槽或调用的方法不同，直接在 QThread 对象上调用的方法将在调用该方法的线程中执行。当子类化 QThread 时，请记住构造函数在旧线程中执行，而 run() 在新线程中执行。如果从两个函数访问成员变量，则从两个不同的线程访问该变量。检查这样做是否安全。</p><h3 id="管理线程" tabindex="-1"><a class="header-anchor" href="#管理线程" aria-hidden="true">#</a> 管理线程</h3><ul><li>QThread 会在线程start() 和 done() 时发送信号，或者可以使用 isDone() 和 isRunning() 来查询线程的状态。</li><li>可以通过调用 exit() 或 quit() 来停止线程。在极端情况下，您可能希望强制终止()正在执行的线程。但是，这样做是危险且不鼓励的。有关详细信息，请阅读 terminate() 和 setTerminationEnabled() 的文档。</li></ul><p>从Qt 4.8开始，可以通过将finish()信号连接到deleteLater()来释放刚刚结束的线程中的对象。</p><p>使用 wait() 阻止调用线程，直到另一个线程完成执行(或直到指定的时间过去)。</p><p>QThread 还提供静态的、独立于平台的睡眠函数：sleep()、msleep() 和 usleep() 分别允许全秒、毫秒和微秒分辨率。这些功能在Qt 5.0中公开。</p><ul><li>静态函数和 currentThread() 返回当前正在执行的线程的标识符。前者返回线程的平台特定 ID;后者返回一个 QThread 指针。</li><li>currentThreadId()要选择将为您的线程指定的名称(例如，由 Linux 上的命令标识)，您可以在启动线程之前调用 setObjectName()。如果不调用 setObjectName() ，则为线程指定的名称将是线程对象的运行时类型的类名(例如，在 Mandelbrot 示例的情况下，因为这是 QThread 子类的名称)。请注意，这目前不适用于 Windows 上的发布版本。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">WorkThread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    countSignal <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>WorkThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>countSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># 上述代码的启动方式如下:</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>thread <span class="token operator">=</span> WorkThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>threadcountSignal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>flush<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">flush</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法介绍" tabindex="-1"><a class="header-anchor" href="#用法介绍" aria-hidden="true">#</a> 用法介绍</h3><p>实例化代码也需要新建一个类实例化之后需要通过moveToThread()函数让QThread接管，标准模板如下.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/13 21:52</span>
<span class="token comment"># File_name: 01-实例化多线程模板.py</span>
<span class="token keyword">import</span> time

<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QObject<span class="token punctuation">,</span> Signal<span class="token punctuation">,</span> QThread


<span class="token keyword">class</span> <span class="token class-name">work</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    conuntSignal <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>conuntSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


    worker <span class="token operator">=</span> work<span class="token punctuation">(</span><span class="token punctuation">)</span>
    thread <span class="token operator">=</span> QThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
    worker<span class="token punctuation">.</span>moveToThread<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>
    worker<span class="token punctuation">.</span>conuntSignal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>flush<span class="token punctuation">)</span>
    thread<span class="token punctuation">.</span>started<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>work<span class="token punctuation">)</span>
    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是QThread的最基础的用法。 QThread会在线程启动和结束时发射 started 信号和 finished 信号，也可以使用函数isFinished0和isRunning0查询线程的状态。</p><p>从Qt4.8开始，可以通过将inished信号连接到 QObject.deleteLater()函数来释放刚刚结束的线程中的对象。</p><p>如果要终止线程，则可以使用函数exit()或quit()。</p><ul><li>在极端情况下，要使用terminate0函数强制终止正在运行的线程非常危险(并不鼓励这样做) <ul><li>同时要确保在terminate0函数之后使用wait()函数</li></ul></li><li>使用wait()函数可以阻塞调用线程，直到另一个线程完成执行(或直到经过指定的时间)。 <ul><li>从 Qt 5.0 开始，QThread 还提供了静态的、与平台无关的睡眠函数，如 sleep()、msleep()和 usleep()，分别允许整秒、毫秒和微秒计时。</li><li>需要注意的是，一般不使用函数wait()和sleep()，因为Qt是一个事件驱动的框架。 <ul><li>可以使用finished 信号代替 wait()函数</li><li>使用QTimer代替 sleep0函数。</li></ul></li></ul></li><li>使用静态函数currentThreadId()和 currentThread()可以返回当前执行线程的标识符 <ul><li>前者返回线程的平台特定ID，后者返回一个 QThread 指针。</li></ul></li></ul><h3 id="qthread类中常用方法" tabindex="-1"><a class="header-anchor" href="#qthread类中常用方法" aria-hidden="true">#</a> QThread类中常用方法</h3><table><thead><tr><th>方法</th><th>参数/返回值类型</th><th>说明</th></tr></thead><tbody><tr><td><code>eventDispatcher()</code></td><td>PySide6.QtCore.QAbstractEventDispatcher</td><td>返回线程的事件分派器对象的指针。如果线程不存在事件分派器，则此函数返回None。</td></tr><tr><td><code>exec()</code></td><td>int</td><td>进入事件循环并等待，直到调用exit()，返回传递给exit(的值。如果通过quit()调用exit()，则返回的值为0。<br>此函数旨在从run()内调用。需要调用此函数来启动事件处理。</td></tr><tr><td><code>exec_()</code></td><td>int</td><td>已经启用调用exec()</td></tr><tr><td><code>isFinished()</code></td><td>bool</td><td>如果线程完成，则返回true；否则返回false。</td></tr><tr><td><code>isInterruptionRequested()</code></td><td>bool</td><td>如果应停止此线程上运行的任务，则返回true。<br>可以通过requestInterrupt()请求中断。<br>此函数可用于使长时间运行的任务完全可中断。从不检查或执行此函数返回的值是安全的，但建议在长时间运行的函数中定期执行此操作。注意不要经常打电话，以保持开销低。</td></tr><tr><td><code>isRunning()</code></td><td>bool</td><td>如果线程正在运行，则返回true；否则返回false。</td></tr><tr><td><code>loopLevel()</code></td><td>int</td><td>返回线程的当前事件循环级别。</td></tr><tr><td><code>priority()</code></td><td>priority</td><td>返回正在运行的线程的优先级(见下表)。如果线程未运行，则此函数返回InheritPriority。</td></tr><tr><td><code>requestInterruption()</code></td><td></td><td>请求线程中断。该请求是建议性的，由线程上运行的代码决定是否以及如何响应该请求。此函数不会停止线程上运行的任何事件循环，也不会以任何方式终止它。</td></tr><tr><td><code>setEventDispatcher(eventDispatcher)</code></td><td>eventDispatcher – PySide6.QtCore.QAbstractEventDispatcher</td><td>将线程的事件分派器设置为eventDispatcher。只有在尚未为线程安装事件分派器的情况下，这才是可能的。<br>当QCoreApplication被实例化时，会自动为主线程创建事件分派器，并在辅助线程的start()上创建事件分派程序。<br>此方法获取对象的所有权。</td></tr><tr><td><code>setPriority(priority)</code></td><td>priority – Priority</td><td>此函数设置正在运行的线程的优先级。如果线程未运行，则此函数不执行任何操作并立即返回。使用start()启动具有特定优先级的线程。<br>优先级参数可以是QThread:：priority枚举中的任何值，InheritPriority除外。<br>优先级参数的效果取决于操作系统的调度策略。特别是，在不支持线程优先级的系统上(例如在Linux上，请参见</td></tr><tr><td><code>setStackSize(stackSize)</code></td><td><strong>stackSize</strong> – <code>uint</code></td><td>将线程的最大堆栈大小设置为stackSize。如果stackSize大于零，则最大堆栈大小设置为stackSize字节，否则最大堆栈大小由操作系统自动确定。</td></tr><tr><td><code>stackSize()</code></td><td>uint</td><td>返回线程的最大堆栈大小(如果使用setStackSize()设置)；否则返回零。</td></tr><tr><td><code>wait([deadline=QDeadlineTimer(QDeadlineTimer.Forever)])</code></td><td>PARAMETERS<br>deadline – PySide6.QtCore.QDeadlineTimer<br><br>RETURN TYPE<br>bool</td><td>阻塞线程，直到满足以下任一条件：<br>与此QThread对象关联的线程已完成执行(即，当它从run()返回时)。如果线程完成，此函数将返回true。如果线程尚未启动，它也会返回true。<br>截止日期已到。如果达到最后期限，此函数将返回false。<br>设置为QDeadlineTimer:：Forever(默认值)的截止时间计时器永远不会超时：在这种情况下，该函数仅在线程从run()返回或线程尚未启动时返回。<br>这提供了与POSIX pthread_join()函数类似的功能。</td></tr><tr><td><code>wait(time)</code></td><td>PARAMETERS<br>deadline – PySide6.QtCore.QDeadlineTimer<br><br>RETURN TYPE<br>bool</td><td>阻塞线程，直到满足以下任一条件：其他同上</td></tr><tr><td><code>run()</code></td><td></td><td>线程的起点。调用start()后，新创建的线程将调用此函数。默认实现只调用exec()。<br>您可以重新实现此函数以促进高级线程管理。从该方法返回将结束线程的执行。</td></tr><tr><td>[Slots]<code>exit([retcode=0])</code></td><td>retcode – int</td><td>告诉线程的事件循环退出并返回代码。<br>调用此函数后，线程离开事件循环，并从对exec()的调用中返回。exec()函数返回returnCode。<br>按照惯例，returnCode为0表示成功，任何非零值表示错误。<br>请注意，与同名的C库函数不同，此函数确实会返回到调用者——停止的是事件处理。<br>在再次调用exec()之前，此线程中不会再启动QEventLoops。如果exec()中的事件循环未运行，那么下一次对exec(的调用也将立即返回。</td></tr><tr><td>[Slots]<code>quit()</code></td><td></td><td>告诉线程的事件循环退出，返回代码为0(成功)。相当于调用出口(0)。<br>如果线程没有事件循环，则此函数不起作用。</td></tr><tr><td>[Slots]<code>start([priority=QThread.Priority.InheritPriority])</code></td><td>priority – Priority</td><td>通过调用run()开始执行线程。操作系统将根据优先级参数调度线程。如果线程已经在运行，则此函数不执行任何操作。<br>优先级参数的效果取决于操作系统的调度策略。特别是，在不支持线程优先级的系统上(如在Linux上，请参阅sched_setscheduler文档以了解更多详细信息)，优先级将被忽略。</td></tr><tr><td>[Slots]<code>terminate()</code></td><td></td><td>终止线程的执行。根据操作系统的调度策略，线程可能会立即终止，也可能不会立即终止。请务必在terminate()之后使用wait()。<br>当线程终止时，等待线程完成的所有线程都将被唤醒。<br>此功能很危险，不鼓励使用。线程可以在其代码路径的任何位置终止。修改数据时可以终止线程。线程没有机会自行清理、解锁任何持有的互斥锁等。简而言之，只有在绝对必要时才使用此函数。<br>可以通过调用setTerminationEnabled()显式启用或禁用终止。在禁用终止时调用此函数会导致延迟终止，直到重新启用终止。有关详细信息，请参阅setTerminationEnabled()的文档。</td></tr><tr><td>[Static]<code>currentThread()</code></td><td>PySide6.QtCore.QThread</td><td>返回指向管理当前执行线程的QThread的指针。</td></tr><tr><td>[Static]<code>idealThreadCount()</code></td><td>int</td><td>返回此进程可以并行运行的理想线程数。这是通过查询此进程可用的逻辑处理器的数量(如果此操作系统支持)或系统中逻辑处理器的总数来完成的。如果两个值都无法确定，则此函数返回1。</td></tr><tr><td>[Static]<code>msleep(arg__1)</code></td><td>arg__1 – int</td><td>强制当前线程休眠毫秒。<br>如果需要等待给定条件发生变化，请避免使用此函数。相反，将插槽连接到指示更改的信号或使用事件处理程序(请参阅event())。<br>此功能不能保证准确性。在重载条件下，应用程序的休眠时间可能超过毫秒。一些操作系统可能将毫秒舍入为10毫秒或15毫秒。</td></tr><tr><td>[Static]<code>setTerminationEnabled([enabled=true])</code></td><td>enabled – bool</td><td>根据启用的参数启用或禁用当前线程的终止。该线程必须已由QThread启动。<br>如果启用为false，则禁用终止。以后对terminate()的调用将立即返回而不起作用。相反，将延迟终止，直到启用终止。<br>如果启用为true，则启用终止。以后调用terminate()将正常终止线程。如果终止被延迟(即，在禁用终止的情况下调用terminate())，则此函数将立即终止调用线程。请注意，在这种情况下，此函数不会返回。</td></tr><tr><td>[Static]<code>sleep(arg__1)</code></td><td><strong>arg__1</strong> – int</td><td>强制当前线程休眠秒。<br>如果需要等待给定条件发生变化，请避免使用此函数。相反，将插槽连接到指示更改的信号或使用事件处理程序(请参阅event())。<br>此功能不能保证准确性。在重载条件下，应用程序可能会休眠超过秒。</td></tr><tr><td>[Static]<code>usleep(arg__1)</code></td><td><strong>arg__1</strong> – int</td><td>强制当前线程休眠usecs微秒。<br>如果需要等待给定条件发生变化，请避免使用此函数。相反，将插槽连接到指示更改的信号或使用事件处理程序(请参阅event())。<br>此功能不能保证准确性。在重载条件下，应用程序可能比usecs休眠更长时间。一些操作系统可能将usecs舍入到10ms或15ms；在Windows上，它将舍入为1ms的倍数。</td></tr><tr><td>[Static]<code>yieldCurrentThread()</code></td><td></td><td>将当前线程的执行交给另一个可运行的线程(如果有的话)。<br>注意，操作系统决定切换到哪个线程。</td></tr></tbody></table><ul><li><p>优先级枚举值PySide6.QtCore.QThread.Priority 此枚举类型指示操作系统应如何调度新创建的线程。</p><table><thead><tr><th>Constant</th><th>Description</th></tr></thead><tbody><tr><td>QThread.IdlePriority</td><td>仅在没有其他线程运行时计划。</td></tr><tr><td>QThread.LowestPriority</td><td>计划频率低于低优先级。</td></tr><tr><td>QThread.LowPriority</td><td>计划频率低于正常优先级。</td></tr><tr><td>QThread.NormalPriority</td><td>操作系统的默认优先级。</td></tr><tr><td>QThread.HighPriority</td><td>比正常优先级更频繁地安排。</td></tr><tr><td>QThread.HighestPriority</td><td>比高优先级更频繁地安排。</td></tr><tr><td>QThread.TimeCriticalPriority</td><td>尽可能频繁地安排。</td></tr><tr><td>QThread.InheritPriority</td><td>使用与创建线程相同的优先级。这是默认值。</td></tr></tbody></table></li></ul><h3 id="qthread类信号" tabindex="-1"><a class="header-anchor" href="#qthread类信号" aria-hidden="true">#</a> QThread类信号</h3><table><thead><tr><th>信号</th><th>说明</th></tr></thead><tbody><tr><td><code>finished()</code></td><td>该信号在相关线程完成执行之前从其发出。<br>发出此信号时，事件循环已停止运行。除延迟删除事件外，线程中不会再处理其他事件。该信号可以连接到deleteLater()，以释放该线程中的对象。<br>如果使用terminate()终止了关联的线程，则不确定该信号是从哪个线程发出的。</td></tr><tr><td><code>started()</code></td><td>当相关线程开始执行时，在调用run()函数之前，该信号从该线程发出。</td></tr></tbody></table><h3 id="qthread的使用方法" tabindex="-1"><a class="header-anchor" href="#qthread的使用方法" aria-hidden="true">#</a> QThread的使用方法</h3><p>本案例涉及两个文件，两个脚本的功能是一样的，只是实现方法稍微不同，前者采用子类化的方式，后者采用实例化的方式，内容稍微不同，</p><h4 id="qthread-子类化的使用" tabindex="-1"><a class="header-anchor" href="#qthread-子类化的使用" aria-hidden="true">#</a> QThread 子类化的使用</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/13 22:33</span>
<span class="token comment"># File_name: 02- QThread 子类化的使用.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Signal<span class="token punctuation">,</span> QThread<span class="token punctuation">,</span> Qt
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QHBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QFont
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time


<span class="token keyword">class</span> <span class="token class-name">WorkThread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    countSignal <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>WorkThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>countSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MainWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">&#39;QThread demo&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">515</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>widget <span class="token operator">=</span> QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStop <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QFont<span class="token punctuation">(</span><span class="token string">&quot;Adobe Arabic&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        layout <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonStop<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layout<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>widget<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onStart<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStop<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onStop<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>thread <span class="token operator">=</span> WorkThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>countSignal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>flush<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>started<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;多线程started信号&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>finished<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>finished<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">flush</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">onStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;button start.&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;button start.&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">onStop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;button stop.&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">finished</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;多线程finish信号&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    demo <span class="token operator">=</span> MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>
    demo<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="qthread实例化" tabindex="-1"><a class="header-anchor" href="#qthread实例化" aria-hidden="true">#</a> QThread实例化</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/13 22:33</span>
<span class="token comment"># File_name: 03- QThread实例化.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Signal<span class="token punctuation">,</span> QObject<span class="token punctuation">,</span> QThread<span class="token punctuation">,</span> Qt
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QMainWindow<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QHBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QFont
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time


<span class="token keyword">class</span> <span class="token class-name">Work</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    countSignal <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Work<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>countSignal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MainWindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">&#39;QThread demo&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">515</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>widget <span class="token operator">=</span> QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStop <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QFont<span class="token punctuation">(</span><span class="token string">&quot;Adobe Arabic&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        layout <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>buttonStop<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layout<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>widget<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onStart<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStop<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>onStop<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>thread <span class="token operator">=</span> QThread<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>worker <span class="token operator">=</span> Work<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>worker<span class="token punctuation">.</span>countSignal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>flush<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>worker<span class="token punctuation">.</span>moveToThread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>started<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>worker<span class="token punctuation">.</span>work<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>finished<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>finished<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">flush</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">onStart</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;button start.&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">onStop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;button stop.&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>worker<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">finished</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>statusBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&#39;多线程finish.&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>buttonStart<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    demo <span class="token operator">=</span> MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>
    demo<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><p>Q为事件处理提供了两种机制：高级的信号/槽机制，低级的事件处理机制。</p><p>本节只介绍事件处理机制的processEvents()函数的使用方法，因为这个函数能够实现实时刷新，表现形式就像多线程一样。详细介绍信号/槽机制和事件处理机制的具体用法可以在其他章节查看。</p><p>虽然使用processEvents()函数可以刷新页面，但是一般不建议这样操作，而是把耗时的操作放到子线程中。</p><p>对于执行很耗时的程序来说，PySide6需要等待程序执行完毕才能进行下一步，这个过程表现在界面上就是卡顿；</p><p>如果在执行这个耗时的程序时不断运行 QApplication processEvents()函数，那么就可以实现一边执行耗时的程序，一边刷新页面的功能，给人的感觉就是程序运行很流畅。</p><p>因此，QApplication.processEvents)函数的使用方法就是，在主函数执行耗时操作的地方加入 QApplication.processEvents()函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/13 23:13</span>
<span class="token comment"># File_name: 04-processEvents例子.py</span>


<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QApplication<span class="token punctuation">,</span> QListWidget<span class="token punctuation">,</span> QGridLayout
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> time


<span class="token keyword">class</span> <span class="token class-name">WinForm</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>WinForm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">&quot;实时刷新界面例子&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>listFile <span class="token operator">=</span> QListWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btnStart <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span>
        layout <span class="token operator">=</span> QGridLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btnStart<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btnStart<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>slotAdd<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layout<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">slotAdd</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            str_n <span class="token operator">=</span> <span class="token string">&#39;File index {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>listFile<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>str_n<span class="token punctuation">)</span>
            QApplication<span class="token punctuation">.</span>processEvents<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    form <span class="token operator">=</span> WinForm<span class="token punctuation">(</span><span class="token punctuation">)</span>
    form<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h2><h3 id="qthreadpool" tabindex="-1"><a class="header-anchor" href="#qthreadpool" aria-hidden="true">#</a> QThreadPool</h3><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>QThreadPool管理和回收单个QThread对象，以帮助减少使用线程的程序中的线程创建成本。</p><p>每个Qt应用程序都有一个全局QThreadPool对象，可以通过调用globalInstance()来访问该对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QThreadPool

QThreadPool<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用QThreadPool线程之一，请子类QRunable并实现run()虚拟函数。然后创建该类的对象并将其传递给start()。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">HelloWorldTask</span><span class="token punctuation">(</span>QRunnable<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world from thread&quot;</span><span class="token punctuation">,</span> QThread<span class="token punctuation">.</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


hello <span class="token operator">=</span> HelloWorldTask<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># QThreadPool takes ownership and deletes &#39;hello&#39; automatically</span>
QThreadPool<span class="token punctuation">.</span>globalInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span>hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>默认情况下，QThreadPool 会自动删除 QRunnable。使用 setAutoDelete() 更改自动删除标志。</p></li><li><p>QThreadPool 支持通过从 run() 中调用 tryStart(this) 多次执行相同的 QRunnable。</p><ul><li>如果启用了自动删除，则当最后一个线程退出运行函数时，将删除 QRunnable。</li><li>启用自动删除时，使用相同的 QRunnable 多次调用 start() 会产生争用条件，不建议这样做。</li></ul></li><li><p>在一定时间内未使用的线程将过期。默认到期超时为 30000 毫秒(30 秒)。这可以使用 setExpiryTimeout() 进行更改。设置负到期超时将禁用到期机制。</p></li><li><p>调用 maxThreadCount() 查询要使用的最大线程数。如果需要，您可以使用 setMaxThreadCount() 更改限制。默认的 maxThreadCount() 是 idealThreadCount() 。activeThreadCount() 函数返回当前正在工作的线程数。</p></li><li><p>reserveThread() 函数保留一个线程供外部使用。当你完成线程时，请使用 releaseThread()，以便可以重用它。从本质上讲，这些功能会暂时增加或减少活动线程计数，并且在实现 QThreadPool 不可见的耗时操作时很有用。</p></li></ul><p>请注意，QThreadPool 是用于管理线程的低级类，有关更高级别的替代方案，请参阅 Qt 并发模块。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>activeThreadCount()</td><td>此属性保存线程池中活动线程的数量。。</td></tr><tr><td>clear()</td><td>从队列中删除尚未启动的可运行文件。runnable-&gt;autoDelete()返回true的可运行文件将被删除。</td></tr><tr><td>contains(thread)</td><td>如果线程是由该线程池管理的线程，则返回true。</td></tr><tr><td>expiryTimeout()</td><td>此属性以毫秒为单位保存线程过期超时值。。<br>在expiryTimeout毫秒内未使用的线程被视为已过期并将退出。这些线程将根据需要重新启动。默认expiryTimeout为30000毫秒(30秒)。如果expiryTimeout为负，则新创建的线程不会过期，例如，在线程池被销毁之前，它们不会退出。<br>注意，设置expiryTimeout对已经运行的线程没有影响。只有新创建的线程才会使用新的expiryTimeout。我们建议在创建线程池之后，但在调用start()之前立即设置expiryTimeout</td></tr><tr><td>maxThreadCount()</td><td>此属性保存线程池使用的最大线程数。在创建QThreadPool对象时，此属性将默认为idealThreadCount()的值。</td></tr><tr><td>releaseThread()</td><td>释放先前通过调用reservedThread()保留的线程。</td></tr><tr><td>reserveThread()</td><td>保留一个线程，忽略activeThreadCount()和maxThreadCount(()。完成线程后，调用releaseThread()以允许重用它。<br>即使保留maxThreadCount()线程或更多线程，线程池仍将允许至少一个线程。<br>此函数将增加报告的活动线程数。这意味着通过使用此函数，activeThreadCount()可以返回一个大于maxThreadCount(()的值。</td></tr><tr><td>setExpiryTimeout(expiryTimeout)</td><td>此属性以毫秒为单位保存线程过期超时值。。<br>在expiryTimeout毫秒内未使用的线程被视为已过期并将退出。这些线程将根据需要重新启动。默认expiryTimeout为30000毫秒(30秒)。如果expiryTimeout为负，则新创建的线程不会过期，例如，在线程池被销毁之前，它们不会退出。<br>注意，设置expiryTimeout对已经运行的线程没有影响。只有新创建的线程才会使用新的expiryTimeout。我们建议在创建线程池之后，但在调用start()之前立即设置expiryTimeout</td></tr><tr><td>setMaxThreadCount(maxThreadCount)</td><td>此属性保存线程池使用的最大线程数。在创建QThreadPool对象时，此属性将默认为idealThreadCount()的值。<br>线程池将始终至少使用1个线程，即使maxThreadCount限制为零或负。</td></tr><tr><td>setStackSize(stackSize)</td><td>此属性保存线程池工作线程的堆栈大小。。<br>该属性的值仅在线程池创建新线程时使用。更改它对已创建或正在运行的线程无效。<br>默认值为0，这使QThread使用操作系统默认堆栈大小。</td></tr><tr><td>setThreadPriority(priority)</td><td>此属性保存新工作线程的线程优先级。。<br>该属性的值仅在线程池启动新线程时使用。更改它对已经运行的线程没有影响。<br>默认值为InheritPriority，这使QThread使用与QThreadPool对象所在的优先级相同的优先级。</td></tr><tr><td>stackSize()</td><td>此属性保存线程池工作线程的堆栈大小。。<br>该属性的值仅在线程池创建新线程时使用。更改它对已创建或正在运行的线程无效。<br>默认值为0，这使QThread使用操作系统默认堆栈大小。</td></tr><tr><td>start(arg__1[, priority=0])</td><td>arg__1 – PyCallable<br>priority – int</td></tr><tr><td>start(runnable[, priority=0])</td><td>runnable – PySide6.QtCore.QRunnable<br>priority – int<br>保留一个线程并使用它来运行可运行的线程，除非该线程将使当前线程计数超过maxThreadCount()。在这种情况下，runable将被添加到运行队列中。优先级参数可用于控制运行队列的执行顺序。<br>注意，如果runnable-&gt;autoDelete()返回true，线程池将拥有可运行文件的所有权，并且在runnable-&gt;run()返回后，线程池会自动删除可运行文件。如果runnable-&gt;autoDelete()返回false，则runnable的所有权仍属于调用者。请注意，在调用此函数后更改runable上的自动删除会导致未定义的行为。</td></tr><tr><td>startOnReservedThread(runnable)</td><td>runnable – PySide6.QtCore.QRunnable<br>释放先前使用reserveThread()保留的线程，并使用它运行可运行的线程。<br>注意，如果runnable-&gt;autoDelete()返回true，线程池将拥有可运行文件的所有权，并且在runnable-&gt;run()返回后，线程池会自动删除可运行文件。如果runnable-&gt;autoDelete()返回false，则runnable的所有权仍属于调用者。请注意，在调用此函数后更改runable上的自动删除会导致未定义的行为。</td></tr><tr><td>threadPriority()</td><td>此属性保存新工作线程的线程优先级。。<br>该属性的值仅在线程池启动新线程时使用。更改它对已经运行的线程没有影响。<br>默认值为InheritPriority，这使QThread使用与QThreadPool对象所在的优先级相同的优先级。</td></tr><tr><td>tryStart(arg__1)</td><td>RETURN TYPE bool</td></tr><tr><td>tryStart(runnable)</td><td>arg__1 – PyCallable<br>RETURN TYPE bool</td></tr><tr><td>tryTake(runnable)</td><td>PARAMETERS runnable – PySide6.QtCore.QRunnable<br>RETURN TYPE bool<br>如果指定的可运行文件尚未启动，则尝试将其从队列中删除。如果runnable尚未启动，则返回true，runnable的所有权将转移给调用者(即使runnable-&gt;autoDelete()=true)。否则返回false。<br>如果runnable-&gt;autoDelete()=true，则此函数可能会删除错误的runnable。这被称为ABA问题：原始的可运行文件可能已经执行，并且已经被删除。内存被重新用于另一个可运行文件，然后将其移除，而不是预期的。因此，我们建议仅对非自动删除的可运行文件调用此函数。</td></tr><tr><td>waitForDone([msecs=-1])</td><td><strong>msecs</strong> – int<br>RETURN TYPE bool<br>等待所有线程退出并从线程池中删除所有线程，最长为毫秒。如果删除了所有线程，则返回true；否则返回false。如果毫秒为-1(默认值)，则忽略超时(等待最后一个线程退出)。</td></tr><tr><td>[Static]globalInstance()</td><td>RETURN TYPE PySide6.QtCore.QThreadPool<br>返回全局QThreadPool实例。</td></tr></tbody></table><h3 id="qrunnable" tabindex="-1"><a class="header-anchor" href="#qrunnable" aria-hidden="true">#</a> QRunnable</h3><p>QRunnable 类是所有可运行对象的基类。</p><p>QRunnable 类是一个接口，用于表示需要执行的任务或代码段，由 run() 函数的重新实现表示。</p><p>您可以使用 QThreadPool 在单独的线程中执行代码。如果 autoDelete() 返回(默认值)，QThreadPool 会自动删除 QRunnable。使用 setAutoDelete() 更改自动删除标志。true</p><p>QThreadPool 支持通过在 run() 函数中调用 tryStart(this) 多次执行相同的 QRunnable。如果启用了自动删除，则当最后一个线程退出运行函数时，将删除 QRunnable。启用自动删除时，使用相同的 QRunnable 多次调用 start() 会产生争用条件，不建议这样做。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QRunnable

QRunnable<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>autoDelete()</td><td>RETURN TYPE bool<br>如果启用自动删除，则返回true；否则为false。<br>如果启用了自动删除，QThreadPool将在调用run()后自动删除此可运行文件；否则，所有权仍属于应用程序程序员。</td></tr><tr><td>setAutoDelete(autoDelete:bool)</td><td>如果autoDelete为true，则启用自动删除；否则将禁用自动删除。<br>如果启用了自动删除，QThreadPool将在调用run()后自动删除此可运行文件；否则，所有权仍属于应用程序程序员。<br>注意，必须在调用start()之前设置此标志。在start()之后调用此函数会导致未定义的行为。</td></tr><tr><td>run()</td><td>在子类中实现这个纯虚拟函数。</td></tr></tbody></table>`,95)]))}const k=s(c,[["render",l],["__file","14多线程、线程池、定时器.html.vue"]]);export{k as default};
