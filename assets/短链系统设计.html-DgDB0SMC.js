import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as i,o as c,a as t,b as a,e as s,d as e}from"./app-DBc2jY3V.js";const u={},r={href:"https://link.juejin.cn?target=http%3A%2F%2Fgk.link%2Fa%2F3002604296",target:"_blank",rel:"noopener noreferrer"},d={href:"https://link.juejin.cn?target=http%3A%2F%2Fgk.link%2Fa%2F3hcCxy",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const p=l("ExternalLinkIcon");return c(),i("div",null,[n[33]||(n[33]=t(`<h1 id="过滤器知识。" tabindex="-1"><a class="header-anchor" href="#过滤器知识。" aria-hidden="true">#</a> 过滤器知识。</h1><p>在程序的世界中，布隆过滤器是程序员的一把利器，利用它可以快速地解决项目中一些比较棘手的问题。如网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题。<br>布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。<strong>它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难</strong>。</p><h3 id="一、布隆过滤器简介" tabindex="-1"><a class="header-anchor" href="#一、布隆过滤器简介" aria-hidden="true">#</a> 一、布隆过滤器简介</h3><p>当你往简单数组或列表中插入新数据时，将不会根据插入项的值来确定该插入项的索引值。这意味着新插入项的索引值与数据值之间没有直接关系。这样的话，当你需要在数组或列表中搜索相应值的时候，你必须遍历已有的集合。若集合中存在大量的数据，就会影响数据查找的效率。<br>针对这个问题，你可以考虑使用哈希表。<strong>利用哈希表你可以通过对 “值” 进行哈希处理来获得该值对应的键或索引值</strong>，然后把该值存放到列表中对应的索引位置。这意味着索引值是由插入项的值所确定的，当你需要判断列表中是否存在该值时，只需要对值进行哈希处理并在相应的索引位置进行搜索即可，这时的搜索速度是非常快的。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401400-5fcd9979-81ec-4228-9bb5-df7f98c8e55c.jpeg#averageHue=%23f7e3c7&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u15acaae6&amp;originHeight=274&amp;originWidth=800&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u643da15a-3f76-4354-a24f-e20d147f905&amp;title=" alt="" loading="lazy"><br>根据定义，布隆过滤器可以检查值是 <strong>“可能在集合中”</strong> 还是 <strong>“绝对不在集合中”</strong>。“可能” 表示有一定的概率，也就是说可能存在一定为误判率。那为什么会存在误判呢？下面我们来分析一下具体的原因。<br>布隆过滤器（Bloom Filter）本质上是由长度为 m 的位向量或位列表（仅包含 0 或 1 位值的列表）组成，最初所有的值均设置为 0，如下图所示。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401438-1cde1971-6a56-456a-bf65-45b464d665ce.jpeg#averageHue=%23f7e7d0&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u41550a9e&amp;originHeight=156&amp;originWidth=800&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u748a5ea2-5a46-43fc-9f98-c0f1540dc79&amp;title=" alt="" loading="lazy"><br>为了将数据项添加到布隆过滤器中，我们会提供 K 个不同的哈希函数，并将结果位置上对应位的值置为 “1”。在前面所提到的哈希表中，我们使用的是单个哈希函数，因此只能输出单个索引值。而对于布隆过滤器来说，我们将使用多个哈希函数，这将会产生多个索引值。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401373-d83ca99d-4791-4545-bef8-a45e7bde94e3.jpeg#averageHue=%23f5e4c9&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u20017619&amp;originHeight=200&amp;originWidth=616&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua43fb580-d9db-4c23-bc6d-cd0475aa9c6&amp;title=" alt="" loading="lazy"><br>如上图所示，当输入 “semlinker” 时，预设的 3 个哈希函数将输出 2、4、6，我们把相应位置 1。假设另一个输入 ”kakuqo“，哈希函数输出 3、4 和 7。你可能已经注意到，索引位 4 已经被先前的 “semlinker” 标记了。此时，我们已经使用 “semlinker” 和 ”kakuqo“ 两个输入值，填充了位向量。当前位向量的标记状态为：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401419-3df97cd1-722c-4506-ad9b-1c01e6a4ba4c.jpeg#averageHue=%23faefd9&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u3ea3e808&amp;originHeight=198&amp;originWidth=614&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2470dd69-21d4-413b-a3d5-075be792454&amp;title=" alt="" loading="lazy"><br>当对值进行搜索时，与哈希表类似，我们将使用 3 个哈希函数对 ”搜索的值“ 进行哈希运算，并查看其生成的索引值。假设，当我们搜索 ”fullstack“ 时，3 个哈希函数输出的 3 个索引值分别是 2、3 和 7：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401401-9dca57db-1065-46a6-bba0-d9a9d4b8180a.jpeg#averageHue=%23f4e2c7&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=ubdbffc5d&amp;originHeight=200&amp;originWidth=616&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uc1642987-8a30-45a8-8303-8d5450db649&amp;title=" alt="" loading="lazy"><br>从上图可以看出，相应的索引位都被置为 1，这意味着我们可以说 ”fullstack“ 可能已经插入到集合中。事实上这是误报的情形，产生的原因是由于哈希碰撞导致的巧合而将不同的元素存储在相同的比特位上。幸运的是，布隆过滤器有一个可预测的误判率（FPP）：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401929-686ec979-891e-4379-a28c-c654c2501ba2.jpeg#averageHue=%23f1f2ec&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=ud178c662&amp;originHeight=98&amp;originWidth=328&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2a6f43c0-8c3f-4220-baae-01b73585f99&amp;title=" alt="" loading="lazy"></p><ul><li>n 是已经添加元素的数量；</li><li>k 哈希的次数；</li><li>m 布隆过滤器的长度（如比特数组的大小）；</li></ul><p>极端情况下，当布隆过滤器没有空闲空间时（满），每一次查询都会返回 true 。这也就意味着 m 的选择取决于期望预计添加元素的数量 n ，并且 m 需要远远大于 n 。<br>实际情况中，布隆过滤器的长度 m 可以根据给定的误判率（FFP）的和期望添加的元素个数 n 的通过如下公式计算：<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/21683645/1676117401998-ac2c5bfe-76af-4f35-b65b-d40b8dfd2a8e.jpeg#averageHue=%23eeefe9&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u9718bfb6&amp;originHeight=122&amp;originWidth=250&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf8b5d6a0-198e-4047-aa52-615e884f83c&amp;title=" alt="" loading="lazy"><br>了解完上述的内容之后，我们可以得出一个结论，<strong>当我们搜索一个值的时候，若该值经过 K 个哈希函数运算后的任何一个索引位为 ”0“，那么该值肯定不在集合中。但如果所有哈希索引值均为 ”1“，则只能说该搜索的值可能存在集合中</strong>。</p><h3 id="二、布隆过滤器应用" tabindex="-1"><a class="header-anchor" href="#二、布隆过滤器应用" aria-hidden="true">#</a> 二、布隆过滤器应用</h3><p>在实际工作中，布隆过滤器常见的应用场景如下：</p><ul><li>网页爬虫对 URL 去重，避免爬取相同的 URL 地址；</li><li>反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱；</li><li>Google Chrome 使用布隆过滤器识别恶意 URL；</li><li>Medium 使用布隆过滤器避免推荐给用户已经读过的文章；</li><li>Google BigTable，Apache HBbase 和 Apache Cassandra 使用布隆过滤器减少对不存在的行和列的查找。 除了上述的应用场景之外，布隆过滤器还有一个应用场景就是解决缓存穿透的问题。所谓的缓存穿透就是服务调用方每次都是查询不在缓存中的数据，这样每次服务调用都会到数据库中进行查询，如果这类请求比较多的话，就会导致数据库压力增大，这样缓存就失去了意义。</li></ul><p>利用布隆过滤器我们可以预先把数据查询的主键，比如用户 ID 或文章 ID 缓存到过滤器中。当根据 ID 进行数据查询的时候，我们先判断该 ID 是否存在，若存在的话，则进行下一步处理。若不存在的话，直接返回，这样就不会触发后续的数据库查询。需要注意的是缓存穿透不能完全解决，我们只能将其控制在一个可以容忍的范围内。</p><h3 id="三、布隆过滤器实战" tabindex="-1"><a class="header-anchor" href="#三、布隆过滤器实战" aria-hidden="true">#</a> 三、布隆过滤器实战</h3><p>布隆过滤器有很多实现和优化，由 Google 开发著名的 Guava 库就提供了布隆过滤器（Bloom Filter）的实现。在基于 Maven 的 Java 项目中要使用 Guava 提供的布隆过滤器，只需要引入以下坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>28.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在导入 Guava 库后，我们新建一个 BloomFilterDemo 类，在 main 方法中我们通过 BloomFilter.create 方法来创建一个布隆过滤器，接着我们初始化 1 百万条数据到过滤器中，然后在原有的基础上增加 10000 条数据并判断这些数据是否存在布隆过滤器中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">BloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnels</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment">// 总数量</span>
        <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CharSequence</span><span class="token punctuation">&gt;</span></span> bf <span class="token operator">=</span> 
            <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">stringFunnel</span><span class="token punctuation">(</span><span class="token class-name">Charsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化 1000000 条数据到过滤器中</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 判断值是否存在过滤器中</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bf<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已匹配数量 &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当以上代码运行后，控制台会输出以下结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>已匹配数量 1000309
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很明显以上的输出结果已经出现了误报，因为相比预期的结果多了 309 个元素，误判率为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>309/(1000000 + 10000) * 100 ≈ 0.030594059405940593
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要提高匹配精度的话，我们可以在创建布隆过滤器的时候设置误判率 fpp：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CharSequence</span><span class="token punctuation">&gt;</span></span> bf <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
    <span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">stringFunnel</span><span class="token punctuation">(</span><span class="token class-name">Charsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token punctuation">,</span> <span class="token number">0.0002</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 BloomFilter 内部，误判率 fpp 的默认值是 0.03：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com/google/common/hash/BloomFilter.class</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> funnel<span class="token punctuation">,</span> <span class="token keyword">long</span> expectedInsertions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">create</span><span class="token punctuation">(</span>funnel<span class="token punctuation">,</span> expectedInsertions<span class="token punctuation">,</span> <span class="token number">0.03D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在重新设置误判率为 0.0002 之后，我们重新运行程序，这时控制台会输出以下结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>已匹配数量 1000003
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过观察以上的结果，可知误判率 fpp 的值越小，匹配的精度越高。当减少误判率 fpp 的值，需要的存储空间也越大，所以在实际使用过程中需要在误判率和存储空间之间做个权衡。</p><h3 id="四、简易版布隆过滤器" tabindex="-1"><a class="header-anchor" href="#四、简易版布隆过滤器" aria-hidden="true">#</a> 四、简易版布隆过滤器</h3><p>为了便于大家理解布隆过滤器，我们来看一下下面简易版布隆过滤器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>semlinker<span class="token punctuation">.</span>bloomfilter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">BitSet</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBloomFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_SIZE</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seeds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">BitSet</span> bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">[</span><span class="token punctuation">]</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">[</span>seeds<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建多个哈希函数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> seeds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            func<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SIZE</span><span class="token punctuation">,</span> seeds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 添加元素到布隆过滤器中
     *
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleHash</span> f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 判断布隆过滤器中是否包含指定元素
     *
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">boolean</span> ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleHash</span> f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> bits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleBloomFilter</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 判断值是否存在过滤器中</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bf<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已匹配数量 &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 简单哈希类
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHash</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> seed <span class="token operator">*</span> result <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SimpleBloomFilter 类的实现中，我们使用到了 Java util 包中的 BitSet，BitSet 是位操作的对象，值只有 0 或 1 ，内部维护了一个 long 数组，初始只有一个 long，所以 BitSet 最小的容量是 64 位。当随着存储的元素越来越多，BitSet 内部会动态扩容，最终内部是由 N 个 long 值来存储。默认情况下，BitSet 的所有位都是 0。</p><h3 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结" aria-hidden="true">#</a> 五、总结</h3><p>本文主要介绍的布隆过滤器的概念和常见的应用场合，在实战部分我们演示了 Google 著名的 Guava 库所提供布隆过滤器（Bloom Filter）的基本使用，同时我们也介绍了布隆过滤器出现误报的原因及如何提高判断准确性。最后为了便于大家理解布隆过滤器，我们介绍了一个简易版的布隆过滤器 SimpleBloomFilter。</p><h1 id="短链设计知识" tabindex="-1"><a class="header-anchor" href="#短链设计知识" aria-hidden="true">#</a> 短链设计知识</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>今天，我们来谈谈如何设计一个高性能短链系统，短链系统设计看起来很简单，但每个点都能展开很多知识点，也是在面试中非常适合考察侯选人的一道设计题，本文将会结合我们生产上稳定运行两年之久的高性能短链系统给大家简单介绍下设计这套系统所涉及的一些思路，希望对大家能有一些帮助。<br>本文将会从以下几个方面来讲解，每个点包含的信息量都不少，相信大家看完肯定有收获</p><ul><li>短链有啥好处，为啥要设计它，用长链不香吗</li><li>短链跳转的基本原理</li><li>短链生成的几种方法</li><li>短链的架构支撑</li></ul><p>CREATE TABLE <code>short_url_map</code> ( <code>id</code> int(11) unsigned NOT NULL AUTO_INCREMENT, <code>lurl</code> varchar(160) DEFAULT NULL COMMENT &#39;长地址&#39;, <code>surl</code> varchar(10) DEFAULT NULL COMMENT &#39;短地址&#39;, <code>gmt_create</code> int(11) DEFAULT NULL COMMENT &#39;创建时间&#39;, PRIMARY KEY (<code>id</code>) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 复制代码CREATE TABLE <code>short_url_map</code> ( <code>id</code> int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;短链 id&#39;, <code>lurl</code> varchar(10) DEFAULT NULL COMMENT &#39;长链&#39;, <code>md5</code> char(32) DEFAULT NULL COMMENT &#39;长链md5&#39;, <code>gmt_create</code> int(11) DEFAULT NULL COMMENT &#39;创建时间&#39;, PRIMARY KEY (<code>id</code>) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 复制代码<br><strong>注：里面涉及到不少布隆过滤器，snowflake 等技术，由于不是本文重点，所以建议大家看完后再自己去深入了解，不然展开讲篇幅会很长</strong></p><h2 id="短链有啥好处-用长链不香吗" tabindex="-1"><a class="header-anchor" href="#短链有啥好处-用长链不香吗" aria-hidden="true">#</a> 短链有啥好处，用长链不香吗</h2><p>来看下以下极客时间发我的营销短信，点击下方蓝色的链接（短链）<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117317983-88037639-edc6-40c1-88c2-7dd83fb6d68c.webp#averageHue=%23adb2ba&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=ue7c047a9&amp;originHeight=504&amp;originWidth=1002&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u3066fb8f-f612-41bb-ad67-538bd53034a&amp;title=" alt="" loading="lazy"><br>浏览器的地址栏上最终会显示一条如下的长链。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318044-088c6515-faa0-440c-9f49-d49944b86858.webp#averageHue=%23dddfe1&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u88751489&amp;originHeight=35&amp;originWidth=809&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=udfe1cb5c-97b3-4a4d-bbeb-c8d1524a299&amp;title=" alt="" loading="lazy"><br>那么为啥要用短链表示，直接用长链不行吗，用短链的话有如下好外<br>1、链接变短，在对内容长度有限制的平台发文，可编辑的文字就变多了<br>最典型的就是微博，限定了只能发 140 个字，如果一串长链直接怼上去，其他可编辑的内容就所剩无几了，用短链的话，链接长度大大减少，自然可编辑的文字多了不少。<br>再比如一般短信发文有长度限度，如果用长链，一条短信很可能要拆分成两三条发，本来一条一毛的短信费变成了两三毛，何苦呢。另外用短链在内容排版上也更美观。<br>2、我们经常需要将链接转成二维码的形式分享给他人，如果是长链的话二维码密集难识别，短链就不存在这个问题了,如图示<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318025-909413ff-26a4-4b86-b0a3-43c2dc59d07c.webp#averageHue=%23bfbfbf&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u26cc5299&amp;originHeight=321&amp;originWidth=665&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u19eae79f-bd6d-4ab3-b612-15068ee679d&amp;title=" alt="" loading="lazy"><br>3、链接太长在有些平台上无法自动识别为超链接<br>如图示，在钉钉上，就无法识别如下长链接，只能识别部分，用短地址无此问题<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318022-665873e5-644d-4b03-b83d-c389b5862742.webp#averageHue=%23bcdbf7&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=uadc858dc&amp;originHeight=96&amp;originWidth=649&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2cbc2712-c525-4568-a373-01ecabb7697&amp;title=" alt="" loading="lazy"></p><h2 id="短链跳转的基本原理" tabindex="-1"><a class="header-anchor" href="#短链跳转的基本原理" aria-hidden="true">#</a> 短链跳转的基本原理</h2><p>从上文可知，短链好处多多，那么它是如何工作的呢。我们在浏览器抓下包看看<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318071-d46bbe43-14cd-4806-8323-80d6d70fd711.webp#averageHue=%23f3f0ef&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u5d09b61f&amp;originHeight=301&amp;originWidth=1092&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uc95a4022-2a30-43bf-9c3a-0806edd1732&amp;title=" alt="" loading="lazy"><br>可以看到请求后，返回了状态码 302（重定向）与 location 值为长链的响应，然后浏览器会再请求这个长链以得到最终的响应,整个交互流程图如下<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318572-f03612f6-1fac-49aa-835c-b3d73e8ae123.webp#averageHue=%23fcfbfb&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u3547a388&amp;originHeight=559&amp;originWidth=851&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u699ac9fd-5875-4a72-9101-5eced170ba4&amp;title=" alt="" loading="lazy"><br>主要步骤就是访问短网址后重定向访问 B，那么问题来了，301 和 302 都是重定向，到底该用哪个，这里需要注意一下 301 和 302 的区别</p><ul><li>301，代表 <strong>永久重定向</strong>，也就是说第一次请求拿到长链接后，下次浏览器再去请求短链的话，不会向短网址服务器请求了，而是直接从浏览器的缓存里拿，这样在 server 层面就无法获取到短网址的点击数了，如果这个链接刚好是某个活动的链接，也就无法分析此活动的效果。所以我们一般不采用 301。</li><li><strong>302</strong>，代表 <strong>临时重定向</strong>，也就是说每次去请求短链都会去请求短网址服务器（除非响应中用 Cache-Control 或 Expired 暗示浏览器缓存）,这样就便于 server 统计点击数，所以虽然用 302 会给 server 增加一点压力，但在数据异常重要的今天，这点代码是值得的，所以推荐使用 302！</li></ul><h2 id="短链生成的几种方法" tabindex="-1"><a class="header-anchor" href="#短链生成的几种方法" aria-hidden="true">#</a> 短链生成的几种方法</h2><h3 id="_1、哈希算法" tabindex="-1"><a class="header-anchor" href="#_1、哈希算法" aria-hidden="true">#</a> 1、哈希算法</h3>`,44)),a("p",null,[n[2]||(n[2]=s("怎样才能生成短链，仔细观察上例中的短链，显然它是由固定短链域名 + 长链映射成的一串字母组成，那么长链怎么才能映射成一串字母呢，哈希函数不就用来干这事的吗，于是我们有了以下设计思路")),n[3]||(n[3]=a("br",null,null,-1)),n[4]||(n[4]=a("img",{src:"https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318536-23280ddc-9f13-41d3-8007-8f94bf783101.webp#averageHue=%23fefbf6&clientId=u757d78e8-d135-4&from=paste&id=u853bd175&originHeight=215&originWidth=445&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=u4065928d-d462-4ba7-a731-547960f2443&title=",alt:"",loading:"lazy"},null,-1)),n[5]||(n[5]=a("br",null,null,-1)),n[6]||(n[6]=s("那么这个哈希函数该怎么取呢，相信肯定有很多人说用 MD5，SHA 等算法，其实这样做有点杀鸡用牛刀了，而且既然是加密就意味着性能上会有损失，我们其实不关心反向解密的难度，反而更关心的是哈希的运算速度和冲突概率。")),n[7]||(n[7]=a("br",null,null,-1)),n[8]||(n[8]=s("能够满足这样的哈希算法有很多，这里推荐 Google 出品的 MurmurHash 算法，MurmurHash 是一种")),n[9]||(n[9]=a("strong",null,"非加密型",-1)),n[10]||(n[10]=s("哈希函数，适用于一般的哈希检索操作。与其它流行的哈希函数相比，对于规律性较强的 key，MurmurHash 的随机分布特征表现更良好。非加密意味着着相比 MD5，SHA 这些函数它的性能肯定更高（实际上性能是 MD5 等加密算法的十倍以上），也正是由于它的这些优点，所以虽然它出现于 2008，但目前已经广泛应用到 Redis、MemCache、Cassandra、HBase、Lucene 等众多著名的软件中。")),n[11]||(n[11]=a("br",null,null,-1)),n[12]||(n[12]=a("strong",null,[s("画外音：这里有个小插曲，MurmurHash 成名后，作者拿到了 Google 的 offer，所以多做些开源的项目，说不定成名后你也能不经意间收到 Google 的 offer "),a("sup",null,"_"),s("。")],-1)),n[13]||(n[13]=a("br",null,null,-1)),n[14]||(n[14]=s("MurmurHash 提供了两种长度的哈希值，32 bit，128 bit，为了让网址尽可通地短，我们选择 32 bit 的哈希值，32 bit 能表示的最大值近 43 亿，对于中小型公司的业务而言绰绰有余。对上文提到的极客长链做 MurmurHash 计算，得到的哈希值为 3002604296，于是我们现在得到的短链为 固定短链域名+哈希值 = ")),a("a",r,[n[0]||(n[0]=s("gk.link/a/300260429…")),e(p)]),n[15]||(n[15]=a("br",null,null,-1)),n[16]||(n[16]=a("strong",null,"如何缩短域名？",-1)),n[17]||(n[17]=a("br",null,null,-1)),n[18]||(n[18]=s("有人说人这个域名还是有点长，还有一招，3002604296 得到的这个哈希值是十进制的，那我们把它转为 62 进制可缩短它的长度，10 进制转 62 进制如下：")),n[19]||(n[19]=a("br",null,null,-1)),n[20]||(n[20]=a("img",{src:"https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318579-db660e7f-ee0c-47fe-a170-22c6bdadeb17.webp#averageHue=%23fafafa&clientId=u757d78e8-d135-4&from=paste&id=ua4511929&originHeight=375&originWidth=589&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=uba0b9570-613f-4695-9051-2b7d2b7b22e&title=",alt:"",loading:"lazy"},null,-1)),n[21]||(n[21]=a("br",null,null,-1)),n[22]||(n[22]=s("于是我们有 (3002604296)10 = (3hcCxy)10，一下从 10 位缩短到了 6 位！于是现在得到了我们的短链为 ")),a("a",d,[n[1]||(n[1]=s("gk.link/a/3hcCxy")),e(p)]),n[23]||(n[23]=a("br",null,null,-1)),n[24]||(n[24]=a("strong",null,"画外音：6 位 62 进制数可表示 568 亿的数，应付长链转换绰绰有余",-1)),n[25]||(n[25]=a("br",null,null,-1)),n[26]||(n[26]=a("strong",null,"如何解决哈希冲突的问题？",-1)),n[27]||(n[27]=a("br",null,null,-1)),n[28]||(n[28]=s("既然是哈希函数，不可避免地会产生哈希冲突（尽管概率很低），该怎么解决呢。")),n[29]||(n[29]=a("br",null,null,-1)),n[30]||(n[30]=s("我们知道既然访问访问短链能跳转到长链，那么两者之前这种映射关系一定是要保存起来的，可以用 Redis 或 Mysql 等，这里我们选择用 Mysql 来存储。表结构应该如下所示")),n[31]||(n[31]=a("br",null,null,-1)),n[32]||(n[32]=s("于是我们有了以下设计思路。"))]),n[34]||(n[34]=t('<ol><li>将长链（lurl）经过 MurmurHash 后得到短链。</li><li>再根据短链去 short_url_map 表中查找看是否存在相关记录，如果不存在，将长链与短链对应关系插入数据库中，存储。</li><li>如果存在，说明已经有相关记录了，此时在长串上拼接一个自定义好的字段，比如「DUPLICATE」，然后再对接接的字段串「lurl + DUPLICATE」做第一步操作，如果最后还是重复呢，再拼一个字段串啊，只要到时根据短链取出长链的时候把这些自定义好的字符串移除即是原来的长链。</li></ol><p>以上步骤显然是要优化的，插入一条记录居然要经过两次 sql 查询（根据短链查记录，将长短链对应关系插入数据库中），如果在高并发下，显然会成为瓶颈。<br><strong>画外音：一般数据库和应用服务（只做计算不做存储）会部署在两台不同的 server 上，执行两条 sql 就需要两次网络通信，这两次网络通信与两次 sql 执行是整个短链系统的性能瓶颈所在！</strong><br>所以该怎么优化呢</p><ol><li>首先我们需要给短链字段 surl 加上唯一索引</li><li>当长链经过 MurmurHash 得到短链后，直接将长短链对应关系插入 db 中，如果 db 里不含有此短链的记录，则插入，如果包含了，说明违反了唯一性索引，此时只要给长链再加上我们上文说的自定义字段「DUPLICATE」,重新 hash 再插入即可，看起来在违反唯一性索引的情况下是多执行了步骤，但我们要知道 MurmurHash 发生冲突的概率是非常低的，基本上不太可能发生，所以这种方案是可以接受的。</li></ol><p>当然如果在数据量很大的情况下，冲突的概率会增大，此时我们可以加布隆过滤器来进行优化。<br>用所有生成的短网址构建布隆过滤器，当一个新的长链生成短链后，先将此短链在布隆过滤器中进行查找，如果不存在，说明 db 里不存在此短网址，可以插入！<br><strong>画外音：布隆过滤器是一种非常省内存的数据结构，长度为 10 亿的布隆过滤器，只需要 125 M 的内存空间。</strong><br>综上，如果用哈希函数来设计，总体的设计思路如下<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318821-2bdc48a9-ca05-4ad7-ab95-1876ac1be275.webp#averageHue=%23f7f7f7&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u0bd37a4f&amp;originHeight=472&amp;originWidth=708&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua0d430e0-4400-480c-a6d2-fbe598ed718&amp;title=" alt="" loading="lazy"><br>用哈希算法生成的短链其实已经能满足我们的业务需求，接下来我们再来看看如何用自增序列的方式来生成短链</p><h3 id="_2、自增序列算法" tabindex="-1"><a class="header-anchor" href="#_2、自增序列算法" aria-hidden="true">#</a> 2、自增序列算法</h3><p>我们可以维护一个 ID 自增生成器，比如 1，2，3 这样的整数递增 ID，当收到一个长链转短链的请求时，ID 生成器为其分配一个 ID，再将其转化为 62 进制，拼接到短链域名后面就得到了最终的短网址，那么这样的 ID 自增生成器该如何设计呢。如果在低峰期发号还好，高并发下，ID 自增生成器的的 ID 生成可能会系统瓶颈，所以它的设计就显得尤为重要。<br>主要有以下四种获取 id 的方法<br>1、类 uuid<br>简单地说就是用 <strong>UUID uuid = UUID.randomUUID();</strong> 这种方式生成的 UUID，UUID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，但这种方式生成的 id 比较长，且无序，在插入 db 时可能会频繁导致<strong>页分裂</strong>，影响插入性能。<br>2、Redis<br>用 Redis 是个不错的选择，性能好，单机可支撑 10 w+ 请求，足以应付大部分的业务场景，但有人说如果一台机器扛不住呢，可以设置多台嘛，比如我布置 10 台机器，每台机器分别只生成尾号0，1，2，... 9 的 ID, 每次加 10即可，只要设置一个 ID 生成器代理随机分配给发号器生成 ID 就行了。<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318972-2dfd4c00-353d-4b28-bf35-36aa36076aa7.webp#averageHue=%23fafafa&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u44f1cc35&amp;originHeight=437&amp;originWidth=508&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u9bf9727e-ad1d-41a3-9e12-027443363a7&amp;title=" alt="" loading="lazy"><br>不过用 Redis 这种方案，需要考虑持久化（短链 ID 总不能一样吧），灾备，成本有点高。<br>3、Snowflake<br>用 Snowflake 也是个不错的选择，不过 Snowflake 依赖于系统时钟的一致性。如果某台机器的系统时钟回拨，有可能造成 ID 冲突，或者 ID 乱序。<br>4、Mysql 自增主键<br>这种方式使用简单，扩展方便，所以我们使用 Mysql 的自增主键来作为短链的 id。简单总结如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117319012-4fe7801c-3e5c-438f-9dca-53e99f4a208e.webp#averageHue=%23d6efdb&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u05be0683&amp;originHeight=858&amp;originWidth=1204&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf839b0f9-bd34-4154-929b-e36aceb8246&amp;title=" alt="" loading="lazy"><br>那么问题来了，如果用 Mysql 自增 id 作为短链 ID，在高并发下，db 的写压力会很大，这种情况该怎么办呢。<br>考虑一下，一定要在用到的时候去生成 id 吗，是否可以提前生成这些自增 id ?<br>方案如下：<br>设计一个专门的发号表，每插入一条记录，为短链 id 预留 （主键 id * 1000 - 999） 到 (主键 id * 1000) 的号段，如下<br>发号表：url_sender_num<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117318971-2b3df6f5-29f1-4a81-9abb-ebb57b8099b8.webp#averageHue=%23343434&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=ucc192f38&amp;originHeight=408&amp;originWidth=811&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u8da817e2-e28c-4f2e-8080-0ed2942557c&amp;title=" alt="" loading="lazy"><br><strong>如图示：tmp_start_num 代表短链的起始 id，tmp_end_num 代表短链的终止 id。</strong><br>当长链转短链的请求打到某台机器时，先看这台机器是否分配了短链号段，未分配就往发号表插入一条记录，则这台机器将为短链分配范围在 tmp_start_num 到 tmp_end_num 之间的 id。从 tmp_start_num 开始分配，一直分配到 tmp_end_num，如果发号 id 达到了 tmp_end_num，说明这个区间段的 id 已经分配完了，则再往发号表插入一条记录就又获取了一个发号 id 区间。<br><strong>画外音：思考一下这个自增短链 id 在机器上该怎么实现呢， 可以用 redis, 不过更简单的方案是用 AtomicLong，单机上性能不错，也保证了并发的安全性，当然如果并发量很大，AtomicLong 的表现就不太行了，可以考虑用 LongAdder，在高并发下表现更加优秀。</strong><br>整体设计图如下<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117319096-a6a7b3af-5b3d-4d60-a59d-0ea86b084701.webp#averageHue=%23f8f8f8&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=u62d8bfe9&amp;originHeight=663&amp;originWidth=860&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue22af924-27b9-4c66-9573-3f075cf27f9&amp;title=" alt="" loading="lazy"><br>解决了发号器问题，接下来就简单了，从发号器拿过来的 id ，即为短链 id，接下来我们再创建一个长短链的映射表即可， 短链 id 即为主键，不过这里有个需要注意的地方，我们可能需要防止多次相同的长链生成不同的短链 id 这种情况，这就需要每次先根据长链来查找 db 看是否存在相关记录，一般的做法是根据长链做索引，但这样的话索引的空间会很大，所以我们可以对长链适当的压缩，比如 MD5，再对长链的 MD5 字段做索引，这样索引就会小很多。这样只要根据长链的 md5 去表里查是否存在相同的记录即可。所以我们设计的表如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>short_url_map<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;短链 id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>lurl<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;长链&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>md5<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;长链md5&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然了，数据量如果很大的话，后期就需要分区或分库分表了。</p><h2 id="请求短链的高并发架构设计" tabindex="-1"><a class="header-anchor" href="#请求短链的高并发架构设计" aria-hidden="true">#</a> 请求短链的高并发架构设计</h2><p>在电商公司，经常有很多活动，秒杀，抢红包等等，在某个时间点的 QPS 会很高，考虑到这种情况，我们引入了 openResty，它是一个基于 Nginx 与 Lua 的高性能 Web 平台，由于 Nginx 的非阻塞IO模型，使用 openResty 可以轻松支持 100 w + 的并发数，一般情况下你只要部署一台即可，同时 openResty 也自带了缓存机制，集成了 redis 这些缓存模块，也可以直接连 mysql。不需要再通过业务层连这些中间件，性能自然会高不少<br><img src="https://cdn.nlark.com/yuque/0/2023/webp/21683645/1676117319237-355a979e-a229-421e-a0fc-d012660a8157.webp#averageHue=%23f6f6f6&amp;clientId=u757d78e8-d135-4&amp;from=paste&amp;id=ufca5b427&amp;originHeight=879&amp;originWidth=865&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u60ac6ffd-37d9-449d-adc5-6bf8e26da29&amp;title=" alt="" loading="lazy"><br>如图示，使用 openResty 省去了业务层这一步，直达缓存层与数据库层，也提升了不少性能。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文对短链设计方案作了详细地剖析，旨在给大家提供几种不同的短链设计思路，文中涉及到挺多像布隆过滤器，openRestry 等技术，文中没有展开讲，建议大家回头可以去再详细了解一下。再比如文中提到的 Mysql 页分裂也需要对底层使用的 B+ tree 数据结构，操作系统按页获取等知识有比较详细地了解，相信大家各个知识点都吃透后会收获不小。</p>',12))])}const g=o(u,[["render",k],["__file","短链系统设计.html.vue"]]);export{g as default};
