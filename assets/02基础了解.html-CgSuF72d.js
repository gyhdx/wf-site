import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,c as i,o as r,b as t,a as o,e as s,d as e}from"./app-DBc2jY3V.js";const d="/wf-site/assets/202302262108915-D7yJU51r.png",u="/wf-site/assets/202302051823260-Dt4_dK1l.png",c="/wf-site/assets/202302272114701-DBu_b2qH.png",k="/wf-site/assets/202302272114703-7P8GKyvy.png",g="/wf-site/assets/202302272114704-BHwVfRAT.png",m="/wf-site/assets/202302272114705-Cs2CepPr.png",b="/wf-site/assets/202302272114706-4gb0EbAx.gif",v="/wf-site/assets/202302272114707-Cn4EBV8L.gif",q="/wf-site/assets/202302272114708-b8s69kJJ.gif",f="/wf-site/assets/202302272114709-CMyLaGYw.gif",y={},Q={href:"https://doc.qt.io/qtforpython/overviews/metaobjects.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.gnu.org/licenses/fdl-1.3.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://muzing.top/about/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://doc.qt.io/qt-6/metaobjects.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://doc.qt.io/qtforpython/overviews/signalsandslots.html#signals-slots",target:"_blank",rel:"noopener noreferrer"},W={href:"https://doc.qt.io/qt-6/object.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.gnu.org/licenses/fdl-1.3.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://muzing.top/about/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://doc.qt.io/qt-6/signalsandslots.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://doc.qt.io/qt-6/properties.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://doc.qt.io/qt-6/eventsandfilters.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://doc.qt.io/qt-6/internationalization.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://doc.qt.io/qt-6/timers.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://doc.qt.io/qt-6/objecttrees.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://doc.qt.io/qt-6/qpointer.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://doc.qt.io/qt-6/metaobjects.html#qobjectcast",target:"_blank",rel:"noopener noreferrer"},D={href:"https://doc.qt.io/qt-6/custom-types.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://doc.qt.io/qt-6/moc.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://doc.qt.io/qt-6/metaobjects.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://doc.qt.io/qt-6/qmetaclassinfo.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://doc.qt.io/qt-6/qmetaenum.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://doc.qt.io/qt-6/qmetamethod.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://doc.qt.io/qt-6/qmetaobject.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://doc.qt.io/qt-6/qmetaproperty.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://doc.qt.io/qt-6/qmetasequence.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://doc.qt.io/qt-6/qmetatype.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://doc.qt.io/qt-6/qobjectcleanuphandler.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://doc.qt.io/qt-6/qpointer.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://doc.qt.io/qt-6/qsignalblocker.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://doc.qt.io/qt-6/qsignalmapper.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://doc.qt.io/qt-6/qvariant.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://doc.qt.io/qt-6/qobject.html#objectName-prop",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://doc.qt.io/qt-6/objecttrees.html",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://doc.qt.io/qt-6/properties.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},en={href:"https://doc.qt.io/qt-6/qobject.html#no-copy-constructor",target:"_blank",rel:"noopener noreferrer"},on={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://doc.qt.io/qt-6/qobject.html#children",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://doc.qt.io/qt-6/qshortcut.html",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://doc.qt.io/qt-6/qquickitem.html",target:"_blank",rel:"noopener noreferrer"},un={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://doc.qt.io/qt-6/qtquick-visualcanvas-visualparent.html",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://doc.qt.io/qt-6/qwidget.html",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://doc.qt.io/qt-6/qtoolbar.html",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://doc.qt.io/qt-6/qmainwindow.html",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://doc.qt.io/qt-6/qobject.html#dumpObjectTree",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://doc.qt.io/qt-6/qobject.html#dumpObjectInfo",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://doc.qt.io/qt-6/qpushbutton.html",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://doc.qt.io/qt-6/qwidget.html",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://doc.qt.io/qt-6/qwidget.html",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://doc.qt.io/qt-6/qobject.html",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://doc.qt.io/qt-6/qt.html",target:"_blank",rel:"noopener noreferrer"},jn={id:"alignment",tabindex:"-1"},Mn={href:"https://doc.qt.io/qt-6/qt.html#AlignmentFlag-enum",target:"_blank",rel:"noopener noreferrer"},Tn={id:"cursormovestyle",tabindex:"-1"},An={href:"https://doc.qt.io/qt-6/qt.html#CursorMoveStyle-enum",target:"_blank",rel:"noopener noreferrer"},Bn={id:"focuspolicy",tabindex:"-1"},On={href:"https://doc.qt.io/qt-6/qt.html#FocusPolicy-enum",target:"_blank",rel:"noopener noreferrer"},In={id:"layoutdirection",tabindex:"-1"},En={href:"https://doc.qt.io/qt-6/qt.html#LayoutDirection-enum",target:"_blank",rel:"noopener noreferrer"},Dn={id:"scrollbarpolicy",tabindex:"-1"},Rn={href:"https://doc.qt.io/qt-6/qt.html#ScrollBarPolicy-enum",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://doc.qt.io/qt-6/qabstractscrollarea.html",target:"_blank",rel:"noopener noreferrer"},Hn={id:"textelidemode",tabindex:"-1"},zn={href:"https://doc.qt.io/qt-6/qt.html#TextElideMode-enum",target:"_blank",rel:"noopener noreferrer"},Ln={id:"textformat",tabindex:"-1"},Gn={href:"https://doc.qt.io/qt-6/qt.html#TextFormat-enum",target:"_blank",rel:"noopener noreferrer"},Nn={id:"textinteractionflag",tabindex:"-1"},Un={href:"https://doc.qt.io/qt-6/qt.html#TextFormat-enum",target:"_blank",rel:"noopener noreferrer"},Vn={id:"windowmodality",tabindex:"-1"},$n={href:"https://doc.qt.io/qt-6/qt.html#WindowModality-enum",target:"_blank",rel:"noopener noreferrer"},Jn={id:"windowtype",tabindex:"-1"},Xn={href:"https://doc.qt.io/qt-6/qt.html#WindowType-enum",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://doc.qt.io/qt-6/qwidget.html",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://doc.qt.io/qt-6/qdialog.html",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://doc.qt.io/qt-6/qwidget.html#windowModality-prop",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://doc.qt.io/qt-6/qwidget.html#windowModality-prop",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://doc.qt.io/qt-6/qdialog.html#open",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://developer.apple.com/documentation/appkit/nspanel",target:"_blank",rel:"noopener noreferrer"},st={href:"https://doc.qt.io/qt-6/qt.html#WidgetAttribute-enum",target:"_blank",rel:"noopener noreferrer"},at={href:"https://doc.qt.io/qt-6/qsplashscreen.html",target:"_blank",rel:"noopener noreferrer"},et={href:"https://doc.qt.io/qt-6/qmdisubwindow.html",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://doc.qt.io/qt-6/qwidget.html#activateWindow",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://doc.qt.io/qt-6/qscreen.html#availableGeometry-prop",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://muzing.top/posts/75a2283d/",target:"_blank",rel:"noopener noreferrer"},it={href:"https://doc.qt.io/qt-6/resources.html",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://muzing.top/posts/28a1d80f/",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://www.wikiwand.com/en/XML",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://doc.qt.io/qt-6/rcc.html",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://doc.qt.io/qt-6/qfile.html",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://doc.qt.io/qt-6/qdir.html",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://doc.qt.io/qt-6/qfile.html",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://doc.qt.io/qt-6/qdir.html",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://doc.qt.io/qt-6/qicon.html",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://doc.qt.io/qt-6/qimage.html",target:"_blank",rel:"noopener noreferrer"},qt={href:"https://doc.qt.io/qt-6/qpixmap.html",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://marketplace.visualstudio.com/items?itemName=seanwu.vscode-qt-for-python",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://blog.csdn.net/anbuqi/article/details/120455219",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://www.qt.io/product/development-tools",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://doc.qt.io/qt-6/resources.html#compression",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://doc.qt.io/qt-6/resources.html",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://doc.qt.io/qt-6/rcc.html",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://doc.qt.io/qtforpython/tutorials/basictutorial/qrcfiles.html",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://blog.csdn.net/anbuqi/article/details/120455219",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://stackoverflow.com/questions/66099225",target:"_blank",rel:"noopener noreferrer"};function St(jt,n){const a=p("ExternalLinkIcon");return r(),i("div",null,[n[344]||(n[344]=t("h1",{id:"_02-基础了解",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_02-基础了解","aria-hidden":"true"},"#"),s(" 02.基础了解")],-1)),n[345]||(n[345]=t("h2",{id:"元对象系统",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#元对象系统","aria-hidden":"true"},"#"),s(" 元对象系统")],-1)),t("blockquote",null,[n[10]||(n[10]=t("p",null,"翻译信息:",-1)),t("p",null,[n[1]||(n[1]=s("本文翻译自 PySide6 官方文档 ")),t("em",null,[t("a",Q,[n[0]||(n[0]=s("The Meta-Object System")),e(a)])])]),t("p",null,[n[3]||(n[3]=s("协议:本翻译遵守原文档使用的")),t("a",x,[n[2]||(n[2]=s("GNU Free Documentation License version 1.3")),e(a)]),n[4]||(n[4]=s(" 授权"))]),t("p",null,[n[6]||(n[6]=s("译者:")),t("a",h,[n[5]||(n[5]=s("muzing")),e(a)])]),n[11]||(n[11]=t("p",null,"翻译时间:2022.06",-1)),t("p",null,[n[8]||(n[8]=s("译者注:本文原文由")),t("a",w,[n[7]||(n[7]=s("Qt 6(C++) 文档")),e(a)]),n[9]||(n[9]=s("直接转换而来,似乎代码部分并未完全替换为有效的 Python 代码,建议与 C++ 原版文档对比阅读"))])]),n[346]||(n[346]=o("<p>Qt 的元对象系统(meta-object system)和自省(introspection)功能的概述。</p><p>Qt 的元对象系统为对象间通信、运行时类型信息和动态属性系统提供了信号与槽机制。</p><p>元对象系统基于三件事:</p><p>1.<code>QObject</code> 类为可以利用元对象系统的对象提供基类。 2.类声明私有部分中的 <code>Q_OBJECT</code> 宏用于启用元对象特性,例如动态属性、信号和槽。 3.元对象编译器(<code>moc</code>) 为每个 <code>QObject</code> 子类提供实现元对象功能所需的代码。</p><p><code>moc</code> 工具读取 C++ 源文件。如果它找到一个或多个包含 <code>Q_OBJECT</code> 宏的类声明,它会生成另一个 C++ 源文件,其中包含每个类的元对象代码。这个生成的源文件要么是 <code>#include</code> 被包含在类的源文件中,要么(更常见地)是被编译并与类的实现链接。</p>",5)),t("p",null,[n[13]||(n[13]=s("除了提供对象间通信的")),t("a",P,[n[12]||(n[12]=s("信号与槽")),e(a)]),n[14]||(n[14]=s("机制(这是引入系统的主要原因),元对象代码还提供以下附加功能:"))]),n[347]||(n[347]=o(`<ul><li><code>metaObject()</code> 返回类的关联 <code>meta-object</code></li><li><code>className()</code> 在运行时将类名作为字符串返回,无需通过 C++ 编译器支持本机运行时类型信息(RTTI)</li><li><code>inherits()</code> 函数返回对象是否继承 <code>QObject</code> 继承树中指定类的类的实例</li><li><code>tr()</code> 翻译字符以进行国际化</li><li><code>setProperty()</code> 和 <code>property()</code> 按名称动态设置和获取属性</li><li><code>newInstance()</code> 构造一个新的类实例</li></ul><p>也可以在 <code>QObject</code> 类上使用<code>qobject_cast()</code> 执行动态转换。<code>qobject_cast()</code> 函数的行为类似于 标准 C++ 的 <code>dynamic_cast()</code>,其优点是不需要 RTTI 支持,并且可以跨动态库边界工作。它尝试将其参数转换为尖括号中指定的指针类型,如果对象的类型正确(在运行时确定),则返回非零指针；如果对象的类型不兼容,则返回 <code>None</code>。</p><p>例如,假设 <code>MyWidget</code> 继承自 <code>QWidget</code> 并使用<code>Q_OBJECT</code> 宏声明:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>obj <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>QObject *</code> 类型的 <code>obj</code> 变量实际上是指 <code>MyWidget</code> 对象,所以我们可以适当地转换它:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>widget <span class="token operator">=</span> QWidget<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功从 <code>QObject</code> 转换到 <code>QWidget</code>,因为对象其实是一个 <code>MyWidget</code>,它是 <code>QWidget</code> 的子类。由于我们知道 <code>obj</code> 是一个 <code>MyWidget</code>,所以也可以将其转换为 <code>MyWidget *</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myWidget <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转换至 <code>MyWidget</code> 成功,因为 <code>qobject_cast()</code> 没有区分内置 Qt 类型和自定义类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment"># label is 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另一方面,转换为 <code>QLabel</code> 失败。指针然后被设置为 0。这使得可以在运行时根据类型以不同的方式处理不同类型的对象:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span><span class="token punctuation">(</span>QLabel label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>tr<span class="token punctuation">(</span><span class="token string">&quot;Ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>QPushButton button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    button<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>tr<span class="token punctuation">(</span><span class="token string">&quot;Pong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然可以在没有 <code>Q_OBJECT</code> 宏和元对象代码的情况下使用<code>QObject</code> 作为基类,但如果不使用<code>Q_OBJECT</code> 宏,则信号和槽、以及此处描述的其他功能都将不可用。从元对象系统的角度来看,没有元代码的 <code>QObject</code> 子类等价于最接近的具有元对象代码的祖先 。这意味着,例如,<code>className()</code> 不会返回类的实际名称,而是这个祖先的类名。</p><p>因此,我们强烈建议 <code>QObject</code> 的所有子类都使用<code>Q_OBJECT</code> 宏,无论它们是否真的使用信号、槽和属性。</p><h2 id="对象模型" tabindex="-1"><a class="header-anchor" href="#对象模型" aria-hidden="true">#</a> 对象模型</h2>`,15)),t("blockquote",null,[n[22]||(n[22]=t("p",null,[t("strong",null,"翻译信息"),s(":")],-1)),t("p",null,[n[16]||(n[16]=s("本文翻译自 Qt6 官方文档 ")),t("em",null,[t("a",W,[n[15]||(n[15]=s("Object Model")),e(a)])])]),t("p",null,[n[18]||(n[18]=s("协议:本翻译遵守原文档使用的")),t("a",C,[n[17]||(n[17]=s("GFDLv1.3")),e(a)]),n[19]||(n[19]=s(" 授权"))]),t("p",null,[n[21]||(n[21]=s("译者:")),t("a",S,[n[20]||(n[20]=s("muzing")),e(a)])]),n[23]||(n[23]=t("p",null,"翻译时间:2022.06",-1))]),n[348]||(n[348]=t("p",null,"标准 C++ 对象模型为对象范例提供了非常有效的运行时支持。但它的静态性质在某些具体问题领域不够灵活。GUI 编程是一个需要运行时效率和高灵活性的领域。Qt 通过将 C++ 的速度与 Qt 对象模型的灵活性相结合,来实现这一点。",-1)),n[349]||(n[349]=t("p",null,"Qt 为 C++ 添加了如下特性:",-1)),t("ul",null,[t("li",null,[n[25]||(n[25]=s("一种非常强大的无缝对象通信机制,称为")),t("a",j,[n[24]||(n[24]=s("信号与槽")),e(a)])]),t("li",null,[n[27]||(n[27]=s("可查询和可设计的")),t("a",M,[n[26]||(n[26]=s("对象属性")),e(a)])]),t("li",null,[n[29]||(n[29]=s("强大的")),t("a",T,[n[28]||(n[28]=s("事件与事件过滤器")),e(a)])]),t("li",null,[n[31]||(n[31]=s("上下文相关的")),t("a",A,[n[30]||(n[30]=s("用于国际化的字符串翻译")),e(a)])]),t("li",null,[n[33]||(n[33]=s("精巧的间隔驱动")),t("a",B,[n[32]||(n[32]=s("计时器")),e(a)]),n[34]||(n[34]=s(",可以在事件驱动的 GUI 中优雅地集成许多任务"))]),t("li",null,[n[36]||(n[36]=s("以自然方式组织对象所有权的,分层和可查询的")),t("a",O,[n[35]||(n[35]=s("对象树")),e(a)])]),t("li",null,[n[38]||(n[38]=s("受保护的指针(")),t("a",I,[n[37]||(n[37]=s("QPointer")),e(a)]),n[39]||(n[39]=s(")在被引用的对象被销毁时自动设置为 0。这与普通的 C++ 指针不同,后者在其对象被销毁时变成空指针"))]),t("li",null,[n[41]||(n[41]=s("跨库边界工作的")),t("a",E,[n[40]||(n[40]=s("动态转换")),e(a)])]),t("li",null,[n[43]||(n[43]=s("支持创建")),t("a",D,[n[42]||(n[42]=s("自定义类型")),e(a)])])]),t("p",null,[n[47]||(n[47]=s("这些 Qt 特性中的许多是基于从")),t("a",R,[n[44]||(n[44]=s("QObject")),e(a)]),n[48]||(n[48]=s(" 的继承,用标准 C++ 技术实现。其他的,比如对象通信机制和动态属性系统,需要由 Qt 自带的")),t("a",F,[n[45]||(n[45]=s("元对象编译器(moc)")),e(a)]),n[49]||(n[49]=s("提供的")),t("a",H,[n[46]||(n[46]=s("元对象系统")),e(a)]),n[50]||(n[50]=s("。"))]),n[350]||(n[350]=t("p",null,"元对象系统是一种 C++ 扩展,使得该语言更适合真正的组件 GUI 编程。",-1)),n[351]||(n[351]=t("h3",{id:"重要的类",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#重要的类","aria-hidden":"true"},"#"),s(" 重要的类")],-1)),n[352]||(n[352]=t("p",null,"这些类构成了 Qt 对象模型的基础。",-1)),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,[t("a",z,[n[51]||(n[51]=s("QMetaClassInfo")),e(a)])]),n[52]||(n[52]=t("th",null,"关于类的附加信息",-1))])]),t("tbody",null,[t("tr",null,[t("td",null,[t("a",L,[n[53]||(n[53]=s("QMetaEnum")),e(a)])]),n[54]||(n[54]=t("td",null,"关于枚举器的元数据",-1))]),t("tr",null,[t("td",null,[t("a",G,[n[55]||(n[55]=s("QMetaMethod")),e(a)])]),n[56]||(n[56]=t("td",null,"关于成员函数的元数据",-1))]),t("tr",null,[t("td",null,[t("a",N,[n[57]||(n[57]=s("QMetaObject")),e(a)])]),n[58]||(n[58]=t("td",null,"包含有关 Qt 对象的元信息",-1))]),t("tr",null,[t("td",null,[t("a",U,[n[59]||(n[59]=s("QMetaProperty")),e(a)])]),n[60]||(n[60]=t("td",null,"关于属性的元数据",-1))]),t("tr",null,[t("td",null,[t("a",V,[n[61]||(n[61]=s("QMetaSequence")),e(a)])]),n[62]||(n[62]=t("td",null,"允许对顺序容器进行类型擦除访问",-1))]),t("tr",null,[t("td",null,[t("a",$,[n[63]||(n[63]=s("QMetaType")),e(a)])]),n[64]||(n[64]=t("td",null,"管理元对象系统中的具名类型",-1))]),t("tr",null,[t("td",null,[t("a",J,[n[65]||(n[65]=s("QObject")),e(a)])]),n[66]||(n[66]=t("td",null,"所有 Qt 对象的基类",-1))]),t("tr",null,[t("td",null,[t("a",X,[n[67]||(n[67]=s("QObjectCleanupHandler")),e(a)])]),n[68]||(n[68]=t("td",null,"监视多个 QObject 的生命周期",-1))]),t("tr",null,[t("td",null,[t("a",K,[n[69]||(n[69]=s("QPointer")),e(a)])]),n[70]||(n[70]=t("td",null,"模板类,提供受保护的指向 QObject 的指针",-1))]),t("tr",null,[t("td",null,[t("a",Y,[n[71]||(n[71]=s("QSignalBlocker")),e(a)])]),n[72]||(n[72]=t("td",null,"包裹 QObject::blockSignals() 的异常安全包装器",-1))]),t("tr",null,[t("td",null,[t("a",Z,[n[73]||(n[73]=s("QSignalMapper")),e(a)])]),n[74]||(n[74]=t("td",null,"绑定来自可识别发送者的信号",-1))]),t("tr",null,[t("td",null,[t("a",_,[n[75]||(n[75]=s("QVariant")),e(a)])]),n[76]||(n[76]=t("td",null,"行为类似于最常见的 Qt 数据类型的集合",-1))])])]),n[353]||(n[353]=t("h3",{id:"qt-对象-身份-值",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qt-对象-身份-值","aria-hidden":"true"},"#"),s(" Qt 对象:身份？值？")],-1)),n[354]||(n[354]=t("p",null,"上面列出的 Qt 对象模型的一些附加功能要求我们将 Qt 对象视为身份(identities),而不是值(values)。值被复制或分配,身份被克隆。克隆意味着创建一个新的身份,而不是旧身份的精确复制品。例如,双胞胎有不同的身份。他们可能看起来相同,但名称不同、位置不同,并且可能有完全不同的社交圈子。",-1)),n[355]||(n[355]=t("p",null,"克隆身份是比复制或分配更复杂的操作。我们可以在 Qt 对象模型中看到这意味着什么。",-1)),n[356]||(n[356]=t("p",null,[t("strong",null,"一个 Qt 对象"),s("……")],-1)),t("ul",null,[t("li",null,[n[78]||(n[78]=s("可能有一个唯一的")),t("a",nn,[n[77]||(n[77]=s("QObject::objectName")),e(a)]),n[79]||(n[79]=s("()。如果我们复制一个 Qt 对象,该给这个副本起什么名字呢？"))]),t("li",null,[n[81]||(n[81]=s("在")),t("a",tn,[n[80]||(n[80]=s("对象层次结构")),e(a)]),n[82]||(n[82]=s("中占据一个位置。如果我们复制一个 Qt 对象,副本应该放在哪里？"))]),n[86]||(n[86]=t("li",null,"可以连接到其他 Qt 对象以向它们发出信号或接收它们发出的信号。如果我们复制一个 Qt 对象,该如何将这些连接转移到副本中呢？",-1)),t("li",null,[n[84]||(n[84]=s("可以在运行时添加未在 C++ 类中声明的")),t("a",sn,[n[83]||(n[83]=s("新属性")),e(a)]),n[85]||(n[85]=s("。如果我们复制一个 Qt 对象,副本是否应该包括添加到原始对象的属性？"))])]),t("p",null,[n[89]||(n[89]=s("出于这些原因,Qt 对象应该被视为身份而不是值。身份是克隆的,而不是复制或分配的,克隆身份是比复制或分配值更复杂的操作。因此,")),t("a",an,[n[87]||(n[87]=s("QObject")),e(a)]),n[90]||(n[90]=s(" 及其所有直接或间接继承的子类,都被禁用了")),t("a",en,[n[88]||(n[88]=s("复制构造函数和赋值运算符")),e(a)]),n[91]||(n[91]=s("。"))]),n[357]||(n[357]=t("h2",{id:"对象树与所有状态",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#对象树与所有状态","aria-hidden":"true"},"#"),s(" 对象树与所有状态")],-1)),n[358]||(n[358]=t("h3",{id:"概述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),s(" 概述")],-1)),t("p",null,[t("a",on,[n[92]||(n[92]=s("QObjects")),e(a)]),n[96]||(n[96]=s(" 在对象树(object trees)中组织自身。当创建一个以另一个对象为父对象的")),t("a",ln,[n[93]||(n[93]=s("QObject")),e(a)]),n[97]||(n[97]=s(" 时,它会被添加到父对象的")),t("a",pn,[n[94]||(n[94]=s("children")),e(a)]),n[98]||(n[98]=s("() 列表中,并在父对象被销毁时销毁。事实证明,这种方式非常适合 GUI 对象的需求。例如,一个")),t("a",rn,[n[95]||(n[95]=s("QShortcut")),e(a)]),n[99]||(n[99]=s("(键盘快捷键)是相关窗口的子对象,因此当用户关闭该窗口时,快捷键也会被销毁。"))]),t("p",null,[t("a",dn,[n[100]||(n[100]=s("QQuickItem")),e(a)]),n[105]||(n[105]=s(" 是 Qt Quick 模块的基本视觉元素,继承自")),t("a",un,[n[101]||(n[101]=s("QObject")),e(a)]),n[106]||(n[106]=s(",但有一个与 ")),t("em",null,[t("a",cn,[n[102]||(n[102]=s("QObject")),e(a)]),n[103]||(n[103]=s(" 父对象"))]),n[107]||(n[107]=s("不同的")),n[108]||(n[108]=t("em",null,"视觉父项",-1)),n[109]||(n[109]=s("的概念。一个项目的视觉父项可能并不是其父对象。参阅")),t("a",kn,[n[104]||(n[104]=s("Concepts - Visual Parent in Qt Quick")),e(a)]),n[110]||(n[110]=s(" 获取更多详细信息。"))]),t("p",null,[t("a",gn,[n[111]||(n[111]=s("QWidget")),e(a)]),n[112]||(n[112]=s(",即 Qt Widgets 模块的基础类,扩展了父子关系。一个普通子对象也成为一个子控件,也就是说,它会被显示在父级的坐标系中,并被其父级的边界按图形方式裁剪。例如,当应用程序在关闭消息框后销毁它时,正如我们所希望的那样,消息框的按钮和标签也被销毁,这是因为按钮和标签是消息框的子控件。"))]),t("p",null,[n[115]||(n[115]=s("您也可以自行删除子对象,它们会自动从其父控件中移除自己。例如,当用户移除一项工具栏时,可能会导致应用程序删除其")),t("a",mn,[n[113]||(n[113]=s("QToolBar")),e(a)]),n[116]||(n[116]=s(" 对象之一,在这种情况下,工具栏的父对象")),t("a",bn,[n[114]||(n[114]=s("QMainWindow")),e(a)]),n[117]||(n[117]=s(" 将检测到变化,并相应地重新配置其屏幕空间。"))]),t("p",null,[n[120]||(n[120]=s("当应用程序视觉上或行为上表现异常时,调试函数")),t("a",vn,[n[118]||(n[118]=s("QObject::dumpObjectTree")),e(a)]),n[121]||(n[121]=s("() 和")),t("a",qn,[n[119]||(n[119]=s("QObject::dumpObjectInfo")),e(a)]),n[122]||(n[122]=s("() 通常很有用。"))]),n[359]||(n[359]=t("h3",{id:"qobjects-的构造-销毁顺序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qobjects-的构造-销毁顺序","aria-hidden":"true"},"#"),s(" QObjects 的构造/销毁顺序")],-1)),t("p",null,[n[126]||(n[126]=s("当")),t("a",fn,[n[123]||(n[123]=s("QObjects")),e(a)]),n[127]||(n[127]=s(" 在堆上创建(即,使用")),n[128]||(n[128]=t("em",null,"new",-1)),n[129]||(n[129]=s(" 创建)时,可以以任意顺序从它们构建对象树,稍后,可以以任意顺序销毁树中的对象。当任何")),t("a",yn,[n[124]||(n[124]=s("QObjects")),e(a)]),n[130]||(n[130]=s(" 被删除时,如果该对象有父对象,则析构函数会自动从其父对象中删除该对象。如果该对象有子对象,则析构函数会自动删除每个子对象。不管销毁的顺序,没有")),t("a",Qn,[n[125]||(n[125]=s("QObjects")),e(a)]),n[131]||(n[131]=s(" 会被删除两次。"))]),t("p",null,[n[133]||(n[133]=s("当")),t("a",xn,[n[132]||(n[132]=s("QObjects")),e(a)]),n[134]||(n[134]=s(" 在栈上创建时,适用相同的行为。通常,破坏顺序仍不会造成问题。考虑一下代码段:"))]),n[360]||(n[360]=o(`<div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int main()
{
    QWidget window;
    QPushButton quit(&quot;Quit&quot;, &amp;window);
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("p",null,[n[140]||(n[140]=s("父对象 ")),n[141]||(n[141]=t("code",null,"window",-1)),n[142]||(n[142]=s(" 和子对象 ")),n[143]||(n[143]=t("code",null,"quit",-1)),n[144]||(n[144]=s(" 都是")),t("a",hn,[n[135]||(n[135]=s("QObjects")),e(a)]),n[145]||(n[145]=s(",因为")),t("a",wn,[n[136]||(n[136]=s("QPushButton")),e(a)]),n[146]||(n[146]=s(" 继承自")),t("a",Pn,[n[137]||(n[137]=s("QWidget")),e(a)]),n[147]||(n[147]=s(",")),t("a",Wn,[n[138]||(n[138]=s("QWidget")),e(a)]),n[148]||(n[148]=s(" 又继承自")),t("a",Cn,[n[139]||(n[139]=s("QObjects")),e(a)]),n[149]||(n[149]=s("。这段代码是正确的:")),n[150]||(n[150]=t("code",null,"quit",-1)),n[151]||(n[151]=s(" 的析构函数")),n[152]||(n[152]=t("em",null,"没有",-1)),n[153]||(n[153]=s("被调用两次,因为 C++ 语言标准 ")),n[154]||(n[154]=t("em",null,"(ISO/IEC 14882:2003)",-1)),n[155]||(n[155]=s(" 指定本地对象的析构函数按其构造函数的相反顺序调用。因此,先调用子对象 ")),n[156]||(n[156]=t("code",null,"quit",-1)),n[157]||(n[157]=s(" 的析构函数,然后将自己从其父对象 ")),n[158]||(n[158]=t("code",null,"window",-1)),n[159]||(n[159]=s(" 中移除,再调用")),n[160]||(n[160]=t("code",null,"window",-1)),n[161]||(n[161]=s(" 的析构函数。"))]),n[361]||(n[361]=o(`<p>但是考虑一下如果交换构造顺序会发生什么,如第二个片段所示:</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int main()
{
    QPushButton quit(&quot;Quit&quot;);
    QWidget window;

    quit.setParent(&amp;window);
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下,破坏顺序会引发问题。首先调用父对象的析构函数,因为它是最后被创建的。然后调用其子对象 <code>quit</code> 的析构函数,但这是不正确的,因为 <code>quit</code> 是一个局部变量。当 <code>quit</code> 随后超出作用域时,其析构函数再次被调用,这一次是正确的,但已经发生了破坏。</p><h2 id="继承关系图" tabindex="-1"><a class="header-anchor" href="#继承关系图" aria-hidden="true">#</a> 继承关系图</h2><figure><img src="`+d+'" alt="QtWidgets" tabindex="0" loading="lazy"><figcaption>QtWidgets</figcaption></figure><p>所有可视控件都继承自QWidget类</p><figure><img src="'+u+`" alt="QtWidgets" tabindex="0" loading="lazy"><figcaption>QtWidgets</figcaption></figure><p>可利用<code>__subclasses__</code>魔法方法获取各个组件的继承关系</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_direct_inherited</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;获取组件被直接继承的子类,不包含多层继承的&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> widget<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_inherit_subclass</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;&quot;获取组件被继承以及多层继承的所有子类&quot;&quot;&quot;</span>
    all_inherit_list<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_subclass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_widget_all_inherit</span><span class="token punctuation">(</span>_subclass<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> all_inherit_list

        <span class="token keyword">if</span> get_subclass<span class="token punctuation">(</span>_subclass<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> subclass <span class="token keyword">in</span> get_subclass<span class="token punctuation">(</span>_subclass<span class="token punctuation">)</span><span class="token punctuation">:</span>
                all_inherit_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;-----------------&quot;</span><span class="token punctuation">)</span>
                all_inherit_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subclass<span class="token punctuation">)</span>
                get_widget_all_inherit<span class="token punctuation">(</span>subclass<span class="token punctuation">)</span>

    cls_inherit_list<span class="token operator">=</span>get_subclass<span class="token punctuation">(</span>widget<span class="token punctuation">)</span>
    <span class="token keyword">for</span> subclass_inherit <span class="token keyword">in</span> cls_inherit_list<span class="token punctuation">:</span>
        all_inherit_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subclass_inherit<span class="token punctuation">)</span>
        get_widget_all_inherit<span class="token punctuation">(</span>subclass_inherit<span class="token punctuation">)</span>

    <span class="token keyword">return</span> all_inherit_list


<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QWidget

    get_direct_inherited<span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span>
    <span class="token comment"># get_inherit_subclass(QWidget)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qt-命名空间" tabindex="-1"><a class="header-anchor" href="#qt-命名空间" aria-hidden="true">#</a> Qt 命名空间</h2>`,10)),t("p",null,[t("a",Sn,[n[162]||(n[162]=s("QtCore.Qt 命名空间")),e(a)]),n[163]||(n[163]=s("下包含了整个 Qt 库中所使用的各种标识符。"))]),n[362]||(n[362]=t("p",null,"这些标识符大多为枚举(enum)或标志(flags)类型。本文收录部分标识符文档的中文翻译,按字母顺序排列。",-1)),t("h3",jn,[n[165]||(n[165]=t("a",{class:"header-anchor",href:"#alignment","aria-hidden":"true"},"#",-1)),n[166]||(n[166]=s()),t("a",Mn,[n[164]||(n[164]=s("Alignment")),e(a)])]),n[363]||(n[363]=o("<p>Qt.AlignmentFlag 中又分为水平对齐方式与垂直对齐方式,具体有如下数种:</p><p>水平对齐:</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.AlignLeft</td><td>0x0001</td><td>与左边缘对齐</td></tr><tr><td>Qt.AlignRight</td><td>0x0002</td><td>与右边缘对齐</td></tr><tr><td>Qt.AlignHCenter</td><td>0x0004</td><td>在可用空间中水平居中</td></tr><tr><td>Qt.AlignJustify</td><td>0x0008</td><td>两端对齐(尽可能使文字占满横向空间)</td></tr></tbody></table><p>垂直对齐:</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.AlignTop</td><td>0x0020</td><td>与顶部对齐</td></tr><tr><td>Qt.AlignBottom</td><td>0x0040</td><td>与底部对齐</td></tr><tr><td>Qt.AlignVCenter</td><td>0x0080</td><td>在可用空间中垂直居中</td></tr><tr><td>Qt.AlignBaseline</td><td>0x0100</td><td>与基线对齐</td></tr></tbody></table><p>若需同时设置水平、垂直两个维度的对齐方式,只需将两个Flags用或运算符连接,例如: <code>Qt.AlignCenter</code> 等价于 <code>Qt.AlignVCenter | Qt.AlignHCenter</code></p>",6)),t("h3",Tn,[n[168]||(n[168]=t("a",{class:"header-anchor",href:"#cursormovestyle","aria-hidden":"true"},"#",-1)),n[169]||(n[169]=s()),t("a",An,[n[167]||(n[167]=s("CursorMoveStyle")),e(a)])]),n[364]||(n[364]=o("<p>此枚举值描述文本光标移动的风格。逻辑风格中,键盘左箭头意味着光标向文本的前方移动(对于从右至左的文本,前方意味着右方)；而视觉风格中,键盘左箭头意味着光标向视觉上的左侧移动,而不考虑文本书写方向。</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.LogicalMoveStyle</td><td>0</td><td>在从左至右的文本块内,按下键盘左方向键时减少光标位置,右方向键增加光标位置；在从右向左的文本块内相反。</td></tr><tr><td>Qt.VisualMoveStyle</td><td>1</td><td>无论书写方向如何,按下键盘左方向键光标总会向左移动,按下右方向键光标向右移动。</td></tr></tbody></table>",2)),t("h3",Bn,[n[171]||(n[171]=t("a",{class:"header-anchor",href:"#focuspolicy","aria-hidden":"true"},"#",-1)),n[172]||(n[172]=s()),t("a",On,[n[170]||(n[170]=s("FocusPolicy")),e(a)])]),n[365]||(n[365]=o("<table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.TabFocus</td><td>0x1</td><td>通过键盘Tab键获取焦点</td></tr><tr><td>Qt.ClickFocus</td><td>0x2</td><td>通过鼠标点击获取焦点</td></tr><tr><td>Qt.StrongFocus</td><td>TabFocus | ClickFocus | 0x8</td><td>通过键盘Tab或鼠标点击获取焦点</td></tr><tr><td>Qt.WheelFocus</td><td>StrongFocus | 0x4</td><td>在StrongFocus基础上,还支持鼠标滚轮滚动获取焦点</td></tr><tr><td>Qt.NoFocus</td><td>0</td><td>该控件不接受焦点,QLabel等不需要用户键盘操作的控件的默认值</td></tr></tbody></table>",1)),t("h3",In,[n[174]||(n[174]=t("a",{class:"header-anchor",href:"#layoutdirection","aria-hidden":"true"},"#",-1)),n[175]||(n[175]=s()),t("a",En,[n[173]||(n[173]=s("LayoutDirection")),e(a)])]),n[366]||(n[366]=o("<p>控制 Qt 的布局与文字方向。</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.LeftToRight</td><td>0</td><td>从左至右布局</td></tr><tr><td>Qt.RightToLeft</td><td>1</td><td>从右至左布局</td></tr><tr><td>Qt.LayoutDirectionAuto</td><td>2</td><td>自动布局</td></tr></tbody></table><p>对于阿拉伯语、希伯来语等特定语言,需要从右至左布局。</p>",3)),t("h3",Dn,[n[177]||(n[177]=t("a",{class:"header-anchor",href:"#scrollbarpolicy","aria-hidden":"true"},"#",-1)),n[178]||(n[178]=s()),t("a",Rn,[n[176]||(n[176]=s("ScrollBarPolicy")),e(a)])]),t("p",null,[n[180]||(n[180]=s("此枚举类型描述了")),t("a",Fn,[n[179]||(n[179]=s("QAbstractScrollArea")),e(a)]),n[181]||(n[181]=s(" 滚动条的各种模式。水平滚动条与垂直滚动条的模式相互独立。"))]),n[367]||(n[367]=o("<table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.ScrollBarAsNeeded</td><td>0</td><td>只有当内容太大而无法容纳时,QAbstractScrollArea 才显示滚动条。此为默认值。</td></tr><tr><td>Qt.ScrollBarAlwaysOff</td><td>1</td><td>QAbstractScrollArea 永不显示滚动条。</td></tr><tr><td>Qt.ScrollBarAlwaysOn</td><td>2</td><td>QAbstractScrollArea 总显示一个滚动条。此属性在具有瞬态滚动条的操作系统上被忽略。</td></tr></tbody></table>",1)),t("h3",Hn,[n[183]||(n[183]=t("a",{class:"header-anchor",href:"#textelidemode","aria-hidden":"true"},"#",-1)),n[184]||(n[184]=s()),t("a",zn,[n[182]||(n[182]=s("TextElideMode")),e(a)])]),n[368]||(n[368]=o("<p>此枚举值指定显示需省略的文本时省略号应出现的位置:</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.ElideLeft</td><td>0</td><td>省略号应出现在文本的开头。</td></tr><tr><td>Qt.ElideRight</td><td>1</td><td>省略号应出现在文本的末尾。</td></tr><tr><td>Qt.ElideMiddle</td><td>2</td><td>省略号应出现在文本的中间。</td></tr><tr><td>Qt.ElideNone</td><td>3</td><td>省略号不应出现在文本中。</td></tr></tbody></table><p><code>Qt.ElideMiddle</code> 通常是最适合 URL 的选择(例如,&quot;http://bugreports.qt.../QTWEBSITE-13/&quot;),而 <code>Qt.ElideRight</code> 适合其他字符串。</p>",3)),t("h3",Ln,[n[186]||(n[186]=t("a",{class:"header-anchor",href:"#textformat","aria-hidden":"true"},"#",-1)),n[187]||(n[187]=s()),t("a",Gn,[n[185]||(n[185]=s("TextFormat")),e(a)])]),n[369]||(n[369]=o("<table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.PlaintText</td><td>0</td><td>将文本字符串解析为纯文本</td></tr><tr><td>Qt.RichText</td><td>1</td><td>将文本字符串解析为富文本</td></tr><tr><td>Qt.AutoText</td><td>2</td><td>自动识别为纯文本或富文本</td></tr><tr><td>Qt.MarkdownText</td><td>3</td><td>将文本字符串解析为Markdown格式的文本</td></tr></tbody></table>",1)),t("h3",Nn,[n[189]||(n[189]=t("a",{class:"header-anchor",href:"#textinteractionflag","aria-hidden":"true"},"#",-1)),n[190]||(n[190]=s()),t("a",Un,[n[188]||(n[188]=s("TextInteractionFlag")),e(a)])]),n[370]||(n[370]=o("<table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.NoTextInteraction</td><td>0</td><td>不能与文本进行交互</td></tr><tr><td>Qt.TextSelectableByMouse</td><td>1</td><td>可以使用鼠标选择文本,并用上下文菜单或标准键盘快捷键复制到剪贴板</td></tr><tr><td>Qt.TextSelectableByKeyboard</td><td>2</td><td>可以用键盘上的光标键选择文本,会显示一个文本光标</td></tr><tr><td>Qt.LinksAccessibleByMouse</td><td>4</td><td>链接高亮显示,并可用鼠标激活</td></tr><tr><td>Qt.LinksAccessibleByKeyboard</td><td>8</td><td>链接可以使用Tab键获得焦点,并通过Enter键激活</td></tr><tr><td>Qt.TextEditable</td><td>16</td><td>文本完全可编辑</td></tr><tr><td>Qt.TextEditorInteraction</td><td>TextSelectableByMouse | TextSelectableByKeyboard | TextEditable</td><td>文本编辑器的默认值</td></tr><tr><td>Qt.TextBrowserInteraction</td><td>TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard</td><td>QTextBrowser的默认值</td></tr></tbody></table>",1)),t("h3",Vn,[n[192]||(n[192]=t("a",{class:"header-anchor",href:"#windowmodality","aria-hidden":"true"},"#",-1)),n[193]||(n[193]=s()),t("a",$n,[n[191]||(n[191]=s("WindowModality")),e(a)])]),n[371]||(n[371]=o("<p>此枚举值用于控制窗口的模态行为。对话框窗口大多为模态窗口。</p><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>Qt.NonModal</td><td>0</td><td>窗口为非模态,不阻塞其他窗口的输入</td></tr><tr><td>Qt.WindowModal</td><td>1</td><td>窗口对单个窗口结构层次为模态,阻塞对其父窗口(及其的兄弟窗口)、祖父窗口(及其兄弟窗口)的输入</td></tr><tr><td>Qt.ApplicationModal</td><td>2</td><td>窗口对应用程序为模态,阻塞对所有窗口的输入</td></tr></tbody></table>",2)),t("h3",Jn,[n[195]||(n[195]=t("a",{class:"header-anchor",href:"#windowtype","aria-hidden":"true"},"#",-1)),n[196]||(n[196]=s()),t("a",Xn,[n[194]||(n[194]=s("WindowType")),e(a)])]),n[372]||(n[372]=t("p",null,"此枚举值用于为控件指定各种窗口系统(window-system)属性。它们一般比较少见,但在少数情况下是必要的。其中一些标志取决于底层窗口管理器是否支持。",-1)),n[373]||(n[373]=t("p",null,"主要类型包括:",-1)),t("table",null,[n[237]||(n[237]=t("thead",null,[t("tr",null,[t("th",null,"常量"),t("th",null,"值"),t("th",null,"描述")])],-1)),t("tbody",null,[t("tr",null,[n[199]||(n[199]=t("td",null,"Qt.Widget",-1)),n[200]||(n[200]=t("td",null,"0x00000000",-1)),t("td",null,[t("a",Kn,[n[197]||(n[197]=s("QWidget")),e(a)]),n[198]||(n[198]=s(" 的默认类型。这种类型的控件如果有父控件则作为子控件,若没有父控件则为独立窗口。参见 Qt.Window 和 Qt.SubWindow。"))])]),n[232]||(n[232]=t("tr",null,[t("td",null,"Qt.Window"),t("td",null,"0x00000001"),t("td",null,"表示该控件是一个窗口,不管该控件是否有父控件,一般带有一个窗口系统框架和一个标题栏。注意如果控件没有父对象,则无法取消设置此标志。")],-1)),t("tr",null,[n[206]||(n[206]=t("td",null,"Qt.Dialog",-1)),n[207]||(n[207]=t("td",null,"0x00000002 | Window",-1)),t("td",null,[n[203]||(n[203]=s("表示该控件是一个应装饰为对话框的窗口(即,一般在标题栏中没有最大化最小化按钮)。这是")),t("a",Yn,[n[201]||(n[201]=s("QDialog")),e(a)]),n[204]||(n[204]=s(" 的默认类型。如果想用它作为模态对话框,它应该从另一个窗口启动,或者有父窗口并与")),t("a",Zn,[n[202]||(n[202]=s("QWidget.windowModality")),e(a)]),n[205]||(n[205]=s(" 属性一起使用。如果将其设置为模态,对话框将阻止应用程序中的其他顶级窗口获得任何输入。我们将具有父控件的顶级窗口称为次要窗口(secondary window)。"))])]),t("tr",null,[n[213]||(n[213]=t("td",null,"Qt.Sheet",-1)),n[214]||(n[214]=t("td",null,"0x00000004 | Window",-1)),t("td",null,[n[210]||(n[210]=s("表示窗口是 macOS 上的 sheet。由于使用sheet 意味着窗口模式,因此推荐的方法是使用")),t("a",_n,[n[208]||(n[208]=s("QWidget.setWindowModality")),e(a)]),n[211]||(n[211]=s("() 或")),t("a",nt,[n[209]||(n[209]=s("QDialog::open")),e(a)]),n[212]||(n[212]=s("() 替代。"))])]),n[233]||(n[233]=t("tr",null,[t("td",null,"Qt.Popup"),t("td",null,"0x00000008 | Window"),t("td",null,"表示该控件是一个弹出式顶级窗口,即它是模态的,但具有适合弹出式菜单的窗口系统框架。")],-1)),t("tr",null,[n[220]||(n[220]=t("td",null,"Qt.Tool",-1)),n[221]||(n[221]=t("td",null,"Popup | Dialog",-1)),t("td",null,[n[217]||(n[217]=s("表示该控件是一个工具窗口。工具窗口通常是一个小窗口,具有比一般窗口更小的标题栏和装饰,一般用于工具按钮的集合。如果有父控件,则工具窗口将始终保留在其顶部。如果没有父级,也可以考虑使用Qt.:WindowStaysOnTopHint。如果窗口系统支持,工具窗口可以用更轻量的框架来装饰。它也可以与 Qt.:FramelessWindowHint 结合使用。在 macOS 上,工具窗口对应于窗口的")),t("a",tt,[n[215]||(n[215]=s("NSPanel")),e(a)]),n[218]||(n[218]=s(" 类。这意味着窗口位于普通窗口之上,因此无法在其上层放置普通窗口。默认情况下,当应用程序处于非活动状态时,工具窗口将消失。这可以通过")),t("a",st,[n[216]||(n[216]=s("Qt.WA_MacAlwaysShowToolWindow")),e(a)]),n[219]||(n[219]=s(" 属性来控制。"))])]),n[234]||(n[234]=t("tr",null,[t("td",null,"Qt.ToolTip"),t("td",null,"Popup | Sheet"),t("td",null,"表明该控件是工具提示。这在内部用于实现工具提示。")],-1)),t("tr",null,[n[225]||(n[225]=t("td",null,"Qt.SplashScreen",-1)),n[226]||(n[226]=t("td",null,"ToolTip | Dialog",-1)),t("td",null,[n[223]||(n[223]=s("表明该窗口是闪屏(splash screen)。这是")),t("a",at,[n[222]||(n[222]=s("QSplashScreen")),e(a)]),n[224]||(n[224]=s(" 的默认类型。"))])]),t("tr",null,[n[230]||(n[230]=t("td",null,"Qt.SubWindow",-1)),n[231]||(n[231]=t("td",null,"0x00000012",-1)),t("td",null,[n[228]||(n[228]=s("表明此控件是子窗口,例如")),t("a",et,[n[227]||(n[227]=s("QMdiSubWindow")),e(a)]),n[229]||(n[229]=s(" 控件。"))])]),n[235]||(n[235]=t("tr",null,[t("td",null,"Qt.ForeignWindow"),t("td",null,"0x00000020 | Window"),t("td",null,"表明此窗口对象是一个句柄,表示由另一个进程或手动使用本地代码创建的本地平台窗口。")],-1)),n[236]||(n[236]=t("tr",null,[t("td",null,"Qt.CoverWindow"),t("td",null,"0x00000040 | Window"),t("td",null,"表示该窗口代表一个覆盖窗口,在某些平台上最小化应用程序时显示。")],-1))])]),n[374]||(n[374]=t("p",null,"还有许多标志可用于自定义顶级窗口的外观。这对其他窗口没有影响:",-1)),t("table",null,[n[271]||(n[271]=t("thead",null,[t("tr",null,[t("th",null,"常量"),t("th",null,"值"),t("th",null,"描述")])],-1)),t("tbody",null,[n[248]||(n[248]=t("tr",null,[t("td",null,"Qt.MSWindowsFixedSizeDialogHint"),t("td",null,"0x00000100"),t("td",null,"在微软 Windows 上为窗口提供一个细对话框边框。这种风格传统上用于固定大小的对话框。注意:不建议在多显示器环境中使用此标志,因为系统将强制窗口在跨屏幕移动时保持其原始大小,这在使用具有不同分辨率的显示器时尤其不受欢迎。")],-1)),n[249]||(n[249]=t("tr",null,[t("td",null,"Qt.MSWindowsOwnDC"),t("td",null,"0x00000200"),t("td",null,"在微软 Windows 上为窗口提供自己的显示上下文。")],-1)),n[250]||(n[250]=t("tr",null,[t("td",null,"Qt.BypassWindowManagerHint"),t("td",null,"0x00000400"),t("td",null,'此标志可用于向平台插件指示应禁用"所有"窗口管理器协议。根据应用程序运行的操作系统和窗口管理器运行的情况,该标志的行为会有所不同。该标志可用于获取未设置配置的本机窗口。')],-1)),t("tr",null,[n[241]||(n[241]=t("td",null,"Qt.X11BypassWindowManagerHint",-1)),n[242]||(n[242]=t("td",null,"BypassWindowManagerHint",-1)),t("td",null,[n[239]||(n[239]=s("完全绕过窗口管理器。这会导致一个完全不受管理的无边框窗口(即,除非手动调用")),t("a",ot,[n[238]||(n[238]=s("QWidget.activateWindow")),e(a)]),n[240]||(n[240]=s("(),否则没有键盘输入)。"))])]),n[251]||(n[251]=t("tr",null,[t("td",null,"Qt.FramelessWindowHint"),t("td",null,"0x00000800"),t("td",null,"生成无边框窗口。用户不能通过窗口系统移动或调整无边框窗口的大小。在 X11 上,标志的结果取决于窗口管理器及其理解 Motif 和/或 NETWM 的能力。大多数现有的现代窗口管理器都可以处理这个问题。")],-1)),n[252]||(n[252]=t("tr",null,[t("td",null,"Qt.NoDropShadowWindowHint"),t("td",null,"0x40000000"),t("td",null,"禁用在支持的平台上的窗口投影。")],-1)),n[253]||(n[253]=t("tr",null,[t("td",null,"Qt.CustomizeWindowHint"),t("td",null,"0x02000000"),t("td",null,"关闭默认窗口标题 hints。")],-1)),n[254]||(n[254]=t("tr",null,[t("td",null,"Qt.WindowTitleHint"),t("td",null,"0x00001000"),t("td",null,"为窗口添加标题栏。")],-1)),n[255]||(n[255]=t("tr",null,[t("td",null,"Qt.WindowSystemMenuHint"),t("td",null,"0x00002000"),t("td",null,"为窗口添加系统菜单,很可能是一个关闭按钮。如果想要隐藏/显示关闭按钮,更好的做法是使用WindowCloseButtonHint。")],-1)),n[256]||(n[256]=t("tr",null,[t("td",null,"Qt.WindowMinimizeButtonHint"),t("td",null,"0x00004000"),t("td",null,"为窗口添加最小化按钮。在某些平台上,这意味着 WindowSystemMenuHint 也已生效。")],-1)),n[257]||(n[257]=t("tr",null,[t("td",null,"Qt.WindowMaximizeButtonHint"),t("td",null,"0x00008000"),t("td",null,"为窗口添加最大化按钮。在某些平台上,这意味着 WindowSystemMenuHint 也已生效。")],-1)),n[258]||(n[258]=t("tr",null,[t("td",null,"Qt.WindowMinMaxButtonsHint"),t("td",null,"WindowMinimizeButtonHint | WindowMaximizeButtonHint"),t("td",null,"为窗口添加最大化、最小化按钮。在某些平台上,这意味着 WindowSystemMenuHint 也已生效。")],-1)),n[259]||(n[259]=t("tr",null,[t("td",null,"Qt.WindowCloseButtonHint"),t("td",null,"0x08000000"),t("td",null,"为窗口添加关闭按钮。在某些平台上,这意味着 WindowSystemMenuHint 也已生效。")],-1)),n[260]||(n[260]=t("tr",null,[t("td",null,"Qt.WindowContextHelpButtonHint"),t("td",null,"0x00010000"),t("td",null,"为对话框添加上下文帮助按钮。在某些平台上,这意味着 WindowSystemMenuHint 也已生效。")],-1)),n[261]||(n[261]=t("tr",null,[t("td",null,"Qt.MacWindowToolBarButtonHint"),t("td",null,"0x10000000"),t("td",null,"在 macOS 上添加一个工具栏按钮(即,在有工具栏的窗口的右上方的椭圆形按钮)")],-1)),n[262]||(n[262]=t("tr",null,[t("td",null,"Qt.WindowFullscreenButtonHint"),t("td",null,"0x80000000"),t("td",null,"在 macOS 上添加一个全屏按钮")],-1)),n[263]||(n[263]=t("tr",null,[t("td",null,"Qt.BypassGraphicsProxyWidget"),t("td",null,"0x20000000"),t("td",null,"如果父控件已经嵌入,则阻止窗口及其子窗口自动将自己嵌入到 QGraphicsProxyWidget 中。如果希望控件始终是桌面上的顶级控件,则可以设置此标志,无论父控件是否已嵌入场景中。")],-1)),n[264]||(n[264]=t("tr",null,[t("td",null,"Qt.WindowShadeButtonHint"),t("td",null,"0x00020000"),t("td",null,"如果底层窗口管理器支持,则添加一个阴影按钮替代最小化按钮。")],-1)),n[265]||(n[265]=t("tr",null,[t("td",null,"Qt.WindowStaysOnTopHint"),t("td",null,"0x00040000"),t("td",null,"通知窗口系统该窗口应位于所有其他窗口之上。注意,在某些基于 X11 的窗口管理器上,还必须传递 Qt.X11BypassWindowManagerHint 才能使此标志正常工作。")],-1)),n[266]||(n[266]=t("tr",null,[t("td",null,"Qt.WindowStaysOnBottomHint"),t("td",null,"0x04000000"),t("td",null,"通知窗口系统该窗口应位于所有其他窗口之下。")],-1)),n[267]||(n[267]=t("tr",null,[t("td",null,"Qt.WindowTransparentForInput"),t("td",null,"0x00080000"),t("td",null,"通知窗口系统该窗口仅用于输出(显示某些内容)而不接受输入。因此输入事件应该像不存在一样略过。")],-1)),n[268]||(n[268]=t("tr",null,[t("td",null,"Qt.WindowOverridesSystemGestures"),t("td",null,"0x00100000"),t("td",null,"通知窗口系统该窗口实现了自己的一组手势,系统级的手势(例如三指切换屏幕)应当被禁用。")],-1)),n[269]||(n[269]=t("tr",null,[t("td",null,"Qt.WindowDoesNotAcceptFocus"),t("td",null,"0x00200000"),t("td",null,"通知窗口系统该窗口不接受输入焦点。")],-1)),t("tr",null,[n[246]||(n[246]=t("td",null,"Qt.MaximizeUsingFullscreenGeometryHint",-1)),n[247]||(n[247]=t("td",null,"0x00400000",-1)),t("td",null,[n[244]||(n[244]=s("通知窗口系统在最大化窗口时应尽可能多地使用可用的屏幕几何空间,包括可能被UI覆盖的区域(例如状态栏或应用程序启动器)。这可能会导致窗口被置于这些系统UI之下,具体情况取决于平台是否支持。启用该标志后,用户负责将")),t("a",lt,[n[243]||(n[243]=s("QScreen.availableGeometry")),e(a)]),n[245]||(n[245]=s("() 也考虑在内,以便应用程序中需要用户交互的任何UI元素都不会被系统UI覆盖。"))])]),n[270]||(n[270]=t("tr",null,[t("td",null,"Qt.WindowType_Mask"),t("td",null,"0x000000ff"),t("td",null,"用于从窗口标志中提取窗口类型的掩码。")],-1))])]),n[375]||(n[375]=o(`<h2 id="模块简介" tabindex="-1"><a class="header-anchor" href="#模块简介" aria-hidden="true">#</a> 模块简介</h2><p>PySide是Qt在Python的绑定,是将C++开发环境下的Qt移植到Python环境下。由于Python 语句简单,用Python语言开发Qt应用程序就变得相对容易。</p><p>下面内容是PySide几个主要模块的简介,其中 QtWidgets、QtCore和QtGui 是基本模块,开发GUI时都会用这三个模块,其他模块是扩展模块。模块有 QtWidgets、QtCore、QtGui,QtWebEngineWidgets、QtChart、QtMultimedia、QtSql 和 QtPrintSupport。</p><ul><li>QtWidgets是窗口模块,提供窗口类和窗口上的各种控件(按钮、菜单、输人框、列表框等)类。</li><li>QtCore 是核心模块,是其他模块的应用基础,包括五大模块:元对象系统、属性系统、对象模型、对象树、信号与槽。QtCore 模块涵盖了 PySide 核心的非 GUI 功能,此模块被用于处理程序中涉及的时间、文件、目录、数据类型、文本流、链接、MIME.线程或进程等对象。</li><li>QtGui 模块涵盖多种基本图形功能的类,包括事件处理、2D图形、基本的图像和字体文本等。</li><li>QtSql模块提供了常用关系型数据库的接口和数据库模型,方便读写数据库中的数据。</li><li>QtMultimedia 模块包含处理多媒体事件的类库,通过调用API接口访问摄像头、语音设备,播放音频和视频,录制音频和视频及拍照等。</li><li>QtChart 和QtDataVisualization 模块用于数据可视化,可以绘制二维和三维数据图表。</li><li>QtPrintSupport 模块提供打印支持,能识别系统中安装的打印机并进行打印,可以对打印参数进行设置,提供打印对话框和打印预览对话框。</li><li>QtBluetooth 模块包含了处理蓝牙的类库,它的功能包括扫描设备、连接、交互等。QtNetwork 模块包含用于网络编程的类库,这组类库通过提供便捷的TCP/IP及UDP的c/s程式码集合,使得网络编程更容易。</li><li>QtWebEngine 和 QtWebEngineWidgets 模块借助开源的Chromium浏览器,在应用程序中嵌入 Web 浏览功能。</li><li>QtXml模块包含了用于处理XML的类库,提供实现SAX和DOMAPI的方法。· QtOpenGL、QtOpenGLFunctions 和 QtOpenGLWidgets 模块使用OpenGL 库来渲染3D和2D图形,该模块使得Qt GUI库和OpenGL库无缝集成。</li><li>QtDesigner模块可以为Qt Designer 创建白定义控件。</li><li>QtSvg 模块为显示矢量图形文件的内容提供了函数。</li><li>QtTest模块包含了可以通过单元测试调试PySide应用程序的功能。</li><li>QtStateMachine 模块可以创建和执行状态图。</li><li>QtHelp 模块可以为应用程序集成在线帮助。</li><li>QtConcurrent 模块支持多线程程序。</li><li>Qt3DCore、Qt3DInput、Qt3DRender、Qt3DAnimation、Qt3DLogic、Qt3DExtras等模块提供三维渲染、三维实时动画。</li></ul><h2 id="qwidget窗口的创建" tabindex="-1"><a class="header-anchor" href="#qwidget窗口的创建" aria-hidden="true">#</a> QWidget窗口的创建</h2><p>PySide6的窗口类主要有三种,分别为QWidget、QMainWindow 和QDialog,其中QMainWindow 和 QDialog 从QWidget类继承而来。要创建和显示窗口,需要用这3个类中的任意一个类实例化对象,并让窗口对象显示并运行起来。窗口类在PySide6的QtWidgets 模块中,使用窗口类之前,需要用&quot;from PySide6.QtWidgets import QWidget,QMainWindow,QDialog&quot;语句把它们导人进来。</p><p>下面的代码创建一个空白的QWidget 窗口,读者需要理解这段代码,这是整个PySide6</p><p>可视化编程最基础的知识。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget

app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>  <span class="token comment"># 创建应用程序实例对象</span>
myWindow <span class="token operator">=</span> QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建窗口实例对象</span>
myWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示窗口</span>
n <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 执行 exec()方法,进入事件循环,若遇到窗口退出命令,返回整数工</span>
sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment"># 通知Python系统,结束程序运行</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.第1行导入系统模块sys,这个系统模块是指Python系统,而不是操作系统。 2.第2行导入QApplication 类和 QWidget 类,PySide6 的类都是以大写字母&quot;Q&quot;开始。 3.第4行创建OAnnlicatinn 类的实例对象ann.为窗口的创建进行初始化、其中svs. 4.argv是字符串列表,记录启动程序时的程序文件名和运行参数,可以通过print(sys.argv)函数输出sys.argv的值,sys.argv的第1个元素的值是程序文件名及路径,也可以不输入参数sys.argv 创建 QApplication 实例对象app。QApplication可以接受的两个参数是-nograb 和-dograb,-nograb告诉Python禁止获取鼠标和键盘事件,dograb则忽略-nograb选项功能,而不管-nograb参数是否存在于命令行参数中。一个程序中只能创建一个QApplication 实例,并且要在创建窗口前创建。 5.第5行用不带参数的QWidget 类创建QWidget 窗口实例对象myWindow,该窗口是独立窗口,有标题栏。 6.第6行用show()方法显示窗口,这时窗口是可见的。 7.第7行执行QApplication实例对象的exec()方法,开始窗口的事件循环,从而保证窗口一直处于显示状态。如果窗口上有其他控件,并为控件的消息编写了处理程序,则可以完成相应的动作。如果用户单击窗口右上角的关闭窗口按钮×正常退出界面,或者因程序崩溃而非正常终止窗口的运行,都将引发关闭窗口(closeA1lWindows())事件,这时app的方法exec()会返回一个整数,如果这个整数是0表示正常退出,如果非0表示非正常退出。请注意,当执行到app的exec()方法时,会停止后续语句的执行,直到所有可视化窗体都关闭(退出)后才执行后续的语句。需要注意的是,还有一个与exec()方法功能相同的方法exec_(),但exec_()方法已过时。 8.第8行调用系统模块的exit()方法,通知Python解释器程序已经结束,如果是sys.exit(0)状态,则Python 认为是正常退出；如果不是sys.exit(0)状态,则Python 认为是非正常退出。无论什么情况,sys.exit()都会抛出一个异常SystemExit,这时可以使用try…except语句捕获这个异常,并执行except中的语句,例如清除程序运行过程中的临时文件；如果没有try…except语句,则 Python解释器终止 sys.exit()后续语句的执行。第7行和第8行可以合并成一行sys.exit(app.exec())来执行。运行上面的程序,会得到一个窗口,这还只是一个空白窗口,在窗口上没有放置任何控件。 9.第78行可以这么简写<code>sys.exit(app.exec())</code></p><h2 id="在pyqt中使用qrc-rcc资源系统" tabindex="-1"><a class="header-anchor" href="#在pyqt中使用qrc-rcc资源系统" aria-hidden="true">#</a> 在PyQt中使用qrc/rcc资源系统</h2>`,11)),t("blockquote",null,[t("p",null,[n[273]||(n[273]=s("本文摘自")),t("a",pt,[n[272]||(n[272]=s("在PyQt中使用qrc/rcc资源系统 - muzing的杂货铺")),e(a)])])]),n[376]||(n[376]=t("h3",{id:"qt-资源系统简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qt-资源系统简介","aria-hidden":"true"},"#"),s(" Qt 资源系统简介")],-1)),t("p",null,[n[276]||(n[276]=s("Qt 资源系统(")),t("a",it,[n[274]||(n[274]=s("The Qt Resource System")),e(a)]),n[277]||(n[277]=s(")是一种独立于平台的资源管理器,用于在应用程序的可执行文件中存储二进制文件。对 PyQt 而言,这意味着在 Python 代码中直接以二进制形式存储图标、")),t("a",rt,[n[275]||(n[275]=s("QSS")),e(a)]),n[278]||(n[278]=s("、长文本翻译等资源文件。使用Qt 资源管理系统可以有效防止资源文件丢失,对于需要打包发布 的 PyQt 程序尤其实用。"))]),n[377]||(n[377]=t("p",null,[s("在项目中使用Qt 资源系统,大致分为三个步骤:编写 "),t("code",null,".qrc"),s(" 文件、使用rcc 编译资源、导入与使用。下文将一一详细讲解。")],-1)),n[378]||(n[378]=t("h3",{id:"qrc-文件",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qrc-文件","aria-hidden":"true"},"#"),s(" qrc 文件")],-1)),n[379]||(n[379]=t("h4",{id:"简介与示例",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#简介与示例","aria-hidden":"true"},"#"),s(" 简介与示例")],-1)),t("p",null,[n[280]||(n[280]=s("Qt 资源集合文件(Qt Resource Collection File)一般以 ")),n[281]||(n[281]=t("code",null,".qrc",-1)),n[282]||(n[282]=s(" 作为扩展名保存,故简称 ")),n[283]||(n[283]=t("code",null,".qrc",-1)),n[284]||(n[284]=s(" 文件。其文件格式基于")),t("a",dt,[n[279]||(n[279]=s("XML")),e(a)]),n[285]||(n[285]=s(",用于将文件系统(硬盘)中的资源文件与 Qt 应用程序关联起来。")),n[286]||(n[286]=t("code",null,".qrc",-1)),n[287]||(n[287]=s(" 还可以实现为资源分组、设置别名等功能。"))]),n[380]||(n[380]=o(`<p>下面是一个简单的例子:</p><p><code>Resources</code> 目录下包含图标、关于文档等资源文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree Resources
Resources
├── Icons
│   ├── Py2exe-GUI_icon_72px.png
│   └── Python_128px.png
├── Texts
│   └── About_zh.md
└── resources.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此处新建一个 <code>resources.qrc</code> 文件,内容如下:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">RCC</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Py2exe-GUI_icon_72px.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Texts/About_zh.md<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意文件的相对路径是以 <code>.qrc</code> 所在的目录 <code>Resources\\</code> 为根目录开始计算的。</p></blockquote><p>这样便建立了硬盘上文件系统中原文件与 Qt 资源系统中<a href="#%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84">资源路径</a>之间的联系。</p><h4 id="使用前缀进行分组" tabindex="-1"><a class="header-anchor" href="#使用前缀进行分组" aria-hidden="true">#</a> 使用前缀进行分组</h4><p>在文件系统中,可以通过目录对不同类型的资源进行分组。在上面的例子中,图标文件都在 <code>Icons/</code> 目录下,而长文本在 <code>Texts/</code> 下。在 <code>.qrc</code> 中,也可以通过指定 <code>&lt;qresource&gt;</code> 标签的 <code>prefix</code> 属性来对资源进行分组:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">RCC</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icons<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Py2exe-GUI_icon_72px.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>texts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Texts/About_zh.md<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为资源创建别名" tabindex="-1"><a class="header-anchor" href="#为资源创建别名" aria-hidden="true">#</a> 为资源创建别名</h4><p>有些资源的文件名很长,每次使用时都输入完整文件名较为繁琐。可以通过在 <code>&lt;file&gt;</code> 标签中添加 <code>alias</code> 属性为其创建别名,方便未来在<a href="#%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84">资源路径</a>中使用:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">RCC</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icons<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Py2exe-GUI_icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Icons/Py2exe-GUI_icon_72px.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Python_icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>texts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>About_Text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Texts/About_zh.md<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用rcc-编译资源" tabindex="-1"><a class="header-anchor" href="#使用rcc-编译资源" aria-hidden="true">#</a> 使用rcc 编译资源</h3><h4 id="rcc-简介" tabindex="-1"><a class="header-anchor" href="#rcc-简介" aria-hidden="true">#</a> rcc 简介</h4>`,15)),t("p",null,[n[289]||(n[289]=s("Qt 提供了")),t("a",ut,[n[288]||(n[288]=s("Resource Compiler")),e(a)]),n[290]||(n[290]=s(" 命令行工具(简称 rcc),用于在构建过程中将资源嵌入 Qt 应用程序。对于 PyQt.也有对应版本的 rcc 工具,用于将 ")),n[291]||(n[291]=t("code",null,".qrc",-1)),n[292]||(n[292]=s(" 中指定的资源文件数据编译至 Python 对象。"))]),n[381]||(n[381]=o(`<h4 id="rcc-的安装与基本使用" tabindex="-1"><a class="header-anchor" href="#rcc-的安装与基本使用" aria-hidden="true">#</a> rcc 的安装与基本使用</h4><p>当通过 <code>pip</code> 安装 PySide6 或其他 PyQt 时,会同时自动安装对应版本的 rcc 工具。这些工具的调用命令有所不同(详见下表),但使用方式与功能是一致的。激活已安装 PyQt 的 Python 虚拟环境,在命令行(注意不是 Python 交互式解释器)中输入对应的 rcc 命令即可。</p><table><thead><tr><th>平台</th><th>rcc 命令名称</th></tr></thead><tbody><tr><td>PySide6</td><td><code>pyside6-rcc</code></td></tr><tr><td>PyQt5</td><td><code>pyrcc5</code></td></tr><tr><td>PySide2</td><td><code>pyside2-rcc</code></td></tr><tr><td>PyQt6</td><td>不提供</td></tr></tbody></table><blockquote><p>使用PySide6 提供的 <code>pyside6-rcc</code> 工具编译出的 <code>.py</code> 文件,也可以放入 PyQt6 项目中使用,只需将文件开头的 <code>from PySide6 import QtCore</code> 替换为 <code>from PyQt6 import QtCore</code> 即可。</p></blockquote><p>例如,对于 PySide6,在命令行调用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pyside6-rcc <span class="token parameter variable">-o</span> compiled_resources.py resources.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即可将 <code>resources.qrc</code> 中列出的资源文件编译到输出文件 <code>compiled_resources.py</code> 中。</p><h4 id="rcc-命令行选项" tabindex="-1"><a class="header-anchor" href="#rcc-命令行选项" aria-hidden="true">#</a> rcc 命令行选项</h4><p>此处以 pyside6-rcc 6.4.1 为例,列出了完整的选项列表(翻译版):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pyside6-rcc <span class="token parameter variable">--help</span>
Usage: /path/to/your/python3/site-packages/PySide6/Qt/libexec/rcc<span class="token punctuation">[</span>options<span class="token punctuation">]</span>inputs
Qt Resource Compiler version <span class="token number">6.4</span>.1

Options:
  -h, <span class="token parameter variable">--help</span>                            显示关于命令行选项的帮助
  
  --help-all                            显示包括Qt独有选项在内的所有帮助
  
  -v, <span class="token parameter variable">--version</span>                         显示版本信息
  
  -o, <span class="token parameter variable">--output</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                   将输出写入到 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 中,而不是 stdout 中

  -t, <span class="token parameter variable">--temp</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                     为大资源文件使用临时文件 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
  
  <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>                         用<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> 创建一个外部初始化函数
  
  <span class="token parameter variable">--root</span> <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>                         用根目录 <span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> 作为资源访问路径的前缀
  
  --compress-algo <span class="token operator">&lt;</span>algo<span class="token operator">&gt;</span>                使用<span class="token operator">&lt;</span>algo<span class="token operator">&gt;</span> 算法压缩输入文件<span class="token punctuation">(</span><span class="token punctuation">[</span>zlib<span class="token punctuation">]</span>, none<span class="token punctuation">)</span>
  
  <span class="token parameter variable">--compress</span> <span class="token operator">&lt;</span>level<span class="token operator">&gt;</span>                    按 <span class="token operator">&lt;</span>level<span class="token operator">&gt;</span> 级别压缩输入文件
  
  --no-compress                         禁用所有压缩,等同于 --compress-algo<span class="token operator">=</span>none
  
  --no-zstd                             禁止使用zstd 压缩
  
  <span class="token parameter variable">--threshold</span> <span class="token operator">&lt;</span>level<span class="token operator">&gt;</span>                   衡量是否值得进行压缩的阈值
  
  <span class="token parameter variable">--binary</span>                              输出一个作为动态资源使用的二进制文件
  
  -g, <span class="token parameter variable">--generator</span> <span class="token operator">&lt;</span>cpp<span class="token operator">|</span>python<span class="token operator">|</span>python<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>  选择生成器
  
  <span class="token parameter variable">--pass</span> <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>                       Pass number <span class="token keyword">for</span> big resources
  
  <span class="token parameter variable">--namespace</span>                           关闭命名空间宏
  
  <span class="token parameter variable">--verbose</span>                             启用verbose 模式
  
  <span class="token parameter variable">--list</span>                                只列出 .qrc 文件条目,不生成代码
  
  --list-mapping                        只输出 .qrc 中定义的资源路径与文件系统路径的
                                        映射,不生成代码
                                        
  -d, <span class="token parameter variable">--depfile</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                  向 <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 中写入一个包含 .qrc 依赖项的 depfile

  <span class="token parameter variable">--project</span>                             输出一个包含当前目录下所有文件的资源文件
  
  --format-version <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>             写入 RCC 格式的版本

Arguments:
  inputs                                输入文件<span class="token punctuation">(</span>*.qrc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编译出的-python-文件" tabindex="-1"><a class="header-anchor" href="#编译出的-python-文件" aria-hidden="true">#</a> 编译出的 Python 文件</h4><p>运行成功后,在 <code>.qrc</code> 中声明的所有资源文件都已经被编译到 <code>compiled_resources.py</code> 这个 Python 文件中,不妨打开查看其内容:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下为 compiled_resources.py 文件中内容</span>

<span class="token comment"># Resource object code(Python 3)</span>
<span class="token comment"># Created by: object code</span>
<span class="token comment"># Created by: The Resource Compiler for Qt version 6.4.1</span>
<span class="token comment"># WARNING! All changes made in this file will be lost!</span>

<span class="token keyword">from</span> PySide6 <span class="token keyword">import</span> QtCore

qt_resource_data <span class="token operator">=</span> <span class="token string">b&quot;......&quot;</span>

qt_resource_name <span class="token operator">=</span> <span class="token string">b&quot;......&quot;</span>

qt_resource_struct <span class="token operator">=</span> <span class="token string">b&quot;......&quot;</span>

<span class="token keyword">def</span> <span class="token function">qInitResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    QtCore<span class="token punctuation">.</span>qRegisterResourceData<span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span> qt_resource_struct<span class="token punctuation">,</span> qt_resource_name<span class="token punctuation">,</span> qt_resource_data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">qCleanupResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    QtCore<span class="token punctuation">.</span>qUnregisterResourceData<span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">,</span> qt_resource_struct<span class="token punctuation">,</span> qt_resource_name<span class="token punctuation">,</span> qt_resource_data<span class="token punctuation">)</span>

qInitResources<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最上方的注释标明了该文件由与 Qt6.4.1 版本匹配的资源编译器生成。并警告用户不要直接编辑该文件,因为所有修改都会被下一次编译操作覆盖掉。</p><p>接下来是三段长长的二进制编码字符串,其中正是资源文件:</p><ul><li><code>qt_resource_data</code> - 资源文件内容数据</li><li><code>qt_resource_name</code> - 资源文件名称</li><li><code>qt_resource_struct</code> - 资源结构</li></ul><p>还有两个函数 <code>qInitResources()</code> 与 <code>qCleanupResources()</code>,分别对应向 Qt 中注册资源与清理资源。</p><p>代码的最后一行调用了注册资源函数。</p><h3 id="在主程序中使用" tabindex="-1"><a class="header-anchor" href="#在主程序中使用" aria-hidden="true">#</a> 在主程序中使用</h3><p>对于 PyQt 程序,从「直接加载使用资源文件」切换到「使用Qt 资源系统读取资源」,还需要如下步骤:</p>`,20)),t("p",null,[n[295]||(n[295]=s("1.在主程序中导入编译后的资源 2.用「资源路径」替换「文件路径」 3.由使用Python 内置 ")),n[296]||(n[296]=t("code",null,"open()",-1)),n[297]||(n[297]=s(" 函数改为使用Qt 中")),t("a",ct,[n[293]||(n[293]=s("QFile")),e(a)]),n[298]||(n[298]=s(" 类或")),t("a",kt,[n[294]||(n[294]=s("QDir")),e(a)]),n[299]||(n[299]=s(" 类提供的 ")),n[300]||(n[300]=t("code",null,"open()",-1)),n[301]||(n[301]=s(" 方法"))]),n[382]||(n[382]=o(`<h4 id="导入编译后的资源" tabindex="-1"><a class="header-anchor" href="#导入编译后的资源" aria-hidden="true">#</a> 导入编译后的资源</h4><p>在主程序中添加 import 导入语句,将刚才获得的 <code>compiled_resources.py</code> 导入:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> compiled_resources  <span class="token comment"># type: ignore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 import 的过程会执行该模块中的所有代码,也就自动调用了 <code>qInitResources()</code> 函数,完成了资源的注册与加载。</p><blockquote><p>PyCharm 等 IDE 可能将此行代码判断为 &quot;未使用的 import 语句&quot; 而提示一个弱警告。可以通过在该行末尾添加特殊的 <code># type: ignore</code> 注释来显式告知静态检查器忽略此行,消除这种不必要的警告。</p></blockquote><h4 id="资源路径" tabindex="-1"><a class="header-anchor" href="#资源路径" aria-hidden="true">#</a> 资源路径</h4><p>对于直接使用资源原文件,会使用其在文件系统中的路径,例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>icon <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&quot;Icons/Python_icon.ico&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而在 Qt 资源系统中使用,则需要将文件路径替换为「资源路径」。资源路径由 <code>.qrc</code> 文件决定。</p><p>对于最一般的情况,直接在文件名前添加 <code>:/</code> 即可得到其资源路径:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>icon <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&quot;:/Python_icon.ico&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于有前缀进行分组的,则需要在文件名前添加 <code>:/$prefix$/</code>作为资源路径:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icons<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>icon <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&quot;:/icons/Python_icon.ico&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于指定了别名的,可以直接使用别名:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icons<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Py_ico<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Icons/Python_icon.ico<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>icon <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&quot;:/icons/Py_ico&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="读取资源文件" tabindex="-1"><a class="header-anchor" href="#读取资源文件" aria-hidden="true">#</a> 读取资源文件</h4>`,19)),t("p",null,[n[304]||(n[304]=s("需要使用Qt 提供的")),t("a",gt,[n[302]||(n[302]=s("QFile")),e(a)]),n[305]||(n[305]=s(" 或")),t("a",mt,[n[303]||(n[303]=s("QDir")),e(a)]),n[306]||(n[306]=s(" 读取编译后的资源文件,而不再能使用Python 提供的 ")),n[307]||(n[307]=t("code",null,"open()",-1)),n[308]||(n[308]=s(" 函数等。"))]),n[383]||(n[383]=o(`<p>例如,一段从 Markdown 文件中读取应用程序&quot;关于&quot;文本的代码,使用直接读取原资源文件的写法如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_about_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    about_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>Resources<span class="token operator">/</span>About<span class="token punctuation">.</span>md<span class="token string">&quot;, &quot;</span><span class="token string">r&quot;, encoding=&quot;</span>utf<span class="token operator">-</span><span class="token number">8</span>&quot;<span class="token punctuation">)</span>  <span class="token comment"># 调用Python内置的open()</span>
    about_text <span class="token operator">=</span> about_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    about_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> about_text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而使用Qt 资源系统后,需要修改为如下形式:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QFile<span class="token punctuation">,</span> QIODevice

<span class="token keyword">def</span> <span class="token function">get_about_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用Qt风格读取文本文件</span>
    about_file <span class="token operator">=</span> QFile<span class="token punctuation">(</span><span class="token string">&quot;:/texts/About_Text&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 使用Qt中的QFile类</span>
    about_file<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>QIODevice<span class="token punctuation">.</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>  <span class="token comment"># 打开文件</span>
    about_text <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>about_file<span class="token punctuation">.</span>readAll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 读取文件,并将 QBtyeArray 转为 str</span>
    about_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> about_text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),t("p",null,[n[312]||(n[312]=s("对于图片,可以在创建")),t("a",bt,[n[309]||(n[309]=s("QIcon")),e(a)]),n[313]||(n[313]=s("、")),t("a",vt,[n[310]||(n[310]=s("QImage")),e(a)]),n[314]||(n[314]=s("、")),t("a",qt,[n[311]||(n[311]=s("QPixmap")),e(a)]),n[315]||(n[315]=s(" 对象时将直接资源路径作为参数传入:"))]),n[384]||(n[384]=o(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>icon <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&quot;:/icons/Python_icon.ico&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在-ide-中配置" tabindex="-1"><a class="header-anchor" href="#在-ide-中配置" aria-hidden="true">#</a> 在 IDE 中配置</h3><h4 id="在-pycharm-中配置使用rcc" tabindex="-1"><a class="header-anchor" href="#在-pycharm-中配置使用rcc" aria-hidden="true">#</a> 在 PyCharm 中配置使用rcc</h4><p>可以将 rcc 工具添加至 PyCharm 中,避免每次使用都需要输入繁琐的命令行。(目前版本的 PyCharm 中已经原生内置了对 <code>pyrcc4</code> 和 <code>pyside-rcc</code> 的支持,但其他版本的 rcc 工具快捷使用仍需自行在「外部工具」中创建。)</p><p>打开 文件 -&gt; 设置 -&gt; 工具 -&gt; 外部工具(File -&gt; Settings -&gt; Tools -&gt; External Tools)</p><figure><img src="`+c+'" alt="打开设置-工具-外部工具" tabindex="0" loading="lazy"><figcaption>打开设置-工具-外部工具</figcaption></figure><p>然后创建工具。配置可以参考下图,仍然以 <code>pyside6-rcc</code> 为例:</p><figure><img src="'+k+`" alt="在 PyCharm 中配置 rcc 工具" tabindex="0" loading="lazy"><figcaption>在 PyCharm 中配置 rcc 工具</figcaption></figure><p>其中比较重要的是「工具设置」里面的三行配置:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>程序:        $PyInterpreterDirectory$/pyside6-rcc
实参:        -o compiled_$FileNameWithoutExtension$.py $FileName$
工作目录:     $FileDir$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中凡是以一对 <code>$</code> 包裹的字符,均为 PyCharm 提供的宏,分别代表「Python 解释器目录」、「不带扩展名的文件名」、「文件名」和「文件所在目录」。</p><p>完成配置后,在待编译的 <code>.qrc</code> 文件上打开右键菜单,找到「外部工具 - pyside6-rcc」,点击即可运行,非常方便。</p><figure><img src="`+g+'" alt="在右键菜单中使用pyside6-rcc外部工具" tabindex="0" loading="lazy"><figcaption>在右键菜单中使用pyside6-rcc外部工具</figcaption></figure><h4 id="使用vs-code-编辑-qrc" tabindex="-1"><a class="header-anchor" href="#使用vs-code-编辑-qrc" aria-hidden="true">#</a> 使用VS Code 编辑 qrc</h4>',14)),t("p",null,[n[317]||(n[317]=s("安装")),t("a",ft,[n[316]||(n[316]=s("Qt for Python")),e(a)]),n[318]||(n[318]=s(" 插件后,VS Code 编辑器会对 ")),n[319]||(n[319]=t("code",null,".qrc",-1)),n[320]||(n[320]=s(" 文件提供一定的语法高亮、亦可一键编译。"))]),n[385]||(n[385]=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># VS Code 插件安装命令:</span>
ext <span class="token function">install</span> seanwu.vscode-qt-for-python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="Qt for Python 插件提供了丰富的功能" tabindex="0" loading="lazy"><figcaption>Qt for Python 插件提供了丰富的功能</figcaption></figure><h4 id="使用qtcreator-编辑-qrc" tabindex="-1"><a class="header-anchor" href="#使用qtcreator-编辑-qrc" aria-hidden="true">#</a> 使用QtCreator 编辑 qrc</h4>',3)),t("blockquote",null,[t("p",null,[n[322]||(n[322]=s("此小节参考自 ")),t("a",yt,[n[321]||(n[321]=s("https://blog.csdn.net/anbuqi/article/details/120455219")),e(a)]),n[323]||(n[323]=s("。"))])]),t("p",null,[n[325]||(n[325]=s("直接在文本编辑器中以 XML 形式编写复杂的 ")),n[326]||(n[326]=t("code",null,".qrc",-1)),n[327]||(n[327]=s(" 文件时,较为繁琐、易出错,可以考虑安装 Qt 官方的")),t("a",Qt,[n[324]||(n[324]=s("QtCreater")),e(a)]),n[328]||(n[328]=s(" IDE 来生成 ")),n[329]||(n[329]=t("code",null,".qrc",-1)),n[330]||(n[330]=s(" 文件。"))]),n[386]||(n[386]=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tree resource
resource
├── icon
│   ├── ic_last_step.svg
│   ├── ic_next_step.svg
│   └── ic_start.svg
└── res.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先启动 QtCreater,在 <code>resource/</code> 目录中新建 <code>res.qrc</code> 文件:</p><figure><img src="`+b+'" alt="创建qrc文件与添加图标路径" tabindex="0" loading="lazy"><figcaption>创建qrc文件与添加图标路径</figcaption></figure><p>然后以 icon 前缀创建一个分组:</p><figure><img src="'+v+'" alt="添加前缀" tabindex="0" loading="lazy"><figcaption>添加前缀</figcaption></figure><p>接着用Add Files 按钮把图标文件添加进来,并保存:</p><figure><img src="'+q+`" alt="将图标文件添加到路径中" tabindex="0" loading="lazy"><figcaption>将图标文件添加到路径中</figcaption></figure><p>此时得到了 <code>res.qrc</code>:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>icon/ic_last_step.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>icon/ic_next_step.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>icon/ic_start.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了缩短引用路径,还可以为每个图标文件设置别名(alias):</p><figure><img src="`+f+`" alt="设置别名" tabindex="0" loading="lazy"><figcaption>设置别名</figcaption></figure><p>现在得到这样的 <code>res.qrc</code>:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ic_last_step<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>icon/ic_last_step.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ic_next_step<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>icon/ic_next_step.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ic_start<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>icon/ic_start.svg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进阶话题" tabindex="-1"><a class="header-anchor" href="#进阶话题" aria-hidden="true">#</a> 进阶话题</h3><h4 id="国际化多语言" tabindex="-1"><a class="header-anchor" href="#国际化多语言" aria-hidden="true">#</a> 国际化多语言</h4><p>有时应用程序需要在不同的语言环境下使用不同的文件,可以通过设置 <code>lang</code> 属性来轻松实现。下面是一个例子:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>cut.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cut.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>cut_fr.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当系统语言为其他语言时,Qt 程序将会使用文件 <code>cut.jpg</code>；而当系统语言为法语时,会自动替换为 <code>cut_fr.jpg</code>。</p><h4 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩" aria-hidden="true">#</a> 压缩</h4><p>rcc 会尝试压缩内容以优化硬盘空间使用。默认情况下,它将进行启发式检查以确认是否值得压缩。如果不能充分压缩,则将直接存储非压缩的内容。可以使用<code>-threshold</code><a href="#rcc-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9">选项</a>控制此判断的阈值。例如,默认情况下阈值为 70,表示只有在压缩后的文件比原文件小 70%(不超过原文件大小的 30%)时才有必要压缩。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rcc <span class="token parameter variable">-threshold</span> <span class="token number">25</span> myresources.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在某些情况下也可以关闭压缩功能。一种常见情况是,某些资源已经是压缩后的格式(例如 <code>.png</code> 文件),再次压缩几乎不会进一步减小文件体积,但会占用CPU 成本。另一种情况是,硬盘空间非常充裕,期望应用程序在运行时可以将内容存储在干净的内存页中。在<a href="#rcc-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9">命令行</a>中添加 <code>-no-compress</code> 命令以关闭压缩。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rcc -no-compress myresources.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以控制 rcc 使用的压缩算法与压缩级别,例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rcc <span class="token parameter variable">-compress</span> <span class="token number">2</span> -compress-algo zlib myresources.qrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示使用zlib 压缩算法,压缩等级为 2。</p><p>除了在命令行调用rcc 时指定选项,还可以在 <code>.qrc</code> 文件中控制阈值、压缩算法与压缩等级:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span> <span class="token attr-name">compress</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">compress-algo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zstd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>data.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)),t("p",null,[n[332]||(n[332]=s("rcc 具体支持的压缩算法类型与压缩等级,参见")),t("a",xt,[n[331]||(n[331]=s("官方文档")),e(a)]),n[333]||(n[333]=s("。"))]),n[387]||(n[387]=t("h3",{id:"参考资料",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1)),t("p",null,[n[339]||(n[339]=s("1.")),t("a",ht,[n[334]||(n[334]=s("Qt6 官方文档:The Qt Resource System")),e(a)]),n[340]||(n[340]=s(" 2.")),t("a",wt,[n[335]||(n[335]=s("Qt6 官方文档:Resource Compiler(rcc)")),e(a)]),n[341]||(n[341]=s(" 3.")),t("a",Pt,[n[336]||(n[336]=s("Qt for Python 官方教程:Using .qrc Files(pyside6-rcc)")),e(a)]),n[342]||(n[342]=s(" 4.")),t("a",Wt,[n[337]||(n[337]=s("pyside6(1):Qt 资源系统和qrc文件使用")),e(a)]),n[343]||(n[343]=s(" 5.")),t("a",Ct,[n[338]||(n[338]=s("Stack Overflow: How can resources be provided in PyQt6(which has no pyrcc)?")),e(a)])]),n[388]||(n[388]=o('<h2 id="信号与槽" tabindex="-1"><a class="header-anchor" href="#信号与槽" aria-hidden="true">#</a> 信号与槽</h2><h3 id="信号与槽概念" tabindex="-1"><a class="header-anchor" href="#信号与槽概念" aria-hidden="true">#</a> 信号与槽概念</h3><p>对于可视化编程,需要将界面上的控件有机结合起来,实现控件功能的联动和交互操作。</p><p>通过信号(signal)与槽(slot)机制实现的交互功能。</p><p>信号与槽是PySide6编程的基础,也是Qt的一大创新,有了信号与槽的编程机制,在PySide6中处理界面上各个控件的交互操作时变得更加直观和简单。</p><p>信号是指从QObject类继承的控件(窗口、按钮、文本框、列表框等)在某个动作下或状态发生改变时发出的一个指令或一个信息</p><blockquote><p>例如一个按钮被单击(clicked)、右击一个窗口(customContextMenuRequested)、一个输入框中文字的改变(textChanged)等</p><p>当这些控件的状态发生变化或者外界对控件进行输人时,让这些控件发出一个信息,来通知系统其某种状态发生了变化或者得到了外界的输入,以便让系统对外界的输人进行响应。</p></blockquote><p>槽是系统对控件发出的信号进行的响应,或者产生的动作,通常用函数来定义系统的响应或动作。</p><blockquote><p>例如对于单击&quot;计算&quot;按钮,按钮发出被单击的信号,然后编写对应的函数,当控件发出信号时,就会自动执行与信号关联的函数。</p></blockquote><p>信号与槽的关系可以是一对一,也可以是多对多,即一个信号可以关联多个槽函数,一个槽函数也可以接收多个信号。PySide6已经为控件编写了一些信号和槽函数,使用前需要将信号和槽函数进行连接,另外用户还可以自定义信号和自定义槽函数。</p><h3 id="重载型信号的处理" tabindex="-1"><a class="header-anchor" href="#重载型信号的处理" aria-hidden="true">#</a> 重载型信号的处理</h3><h4 id="重载型信号连接" tabindex="-1"><a class="header-anchor" href="#重载型信号连接" aria-hidden="true">#</a> 重载型信号连接</h4><p>查询控件的信号时,会发现有些控件有多个名字相同但是参数不同的信号。</p><p>例如对于按钮有clicked()和 clicked(bool)两种信号,一种不需要传递参数的信号,另一种传递布尔型参数的信号。</p><p>这种信号名称相同、参数不同的信号称为重载(overload)型信号。</p><p>对于重载型信号定义自动关联槽函数时,需要在槽函数前加修饰符<code>@Slot(type)</code>声明是对哪个信号定义槽函数,其中<code>type</code>是信号传递的参数类型。</p><p>例如如果对按钮的clicked(bool)信号定义自动关联槽函数,需要在槽函数前加入<code>@Slot(bool)</code>进行修饰；如果对按钮的clicked()信号定义自动关联槽函数,需要在槽函数前加人@Slot()进行修饰。</p><p>需要注意的是,在使用<code>@Slot(type)</code>修饰符前,应提前用<code>from PySide6.QtCore import Slot</code>语句导人槽函数。</p><p>定义一个信号后就有连接<code>connect()</code>、发送<code>emit()</code>、断开<code>disconnect()</code>属性</p><h4 id="重载型信号断开" tabindex="-1"><a class="header-anchor" href="#重载型信号断开" aria-hidden="true">#</a> 重载型信号断开</h4><p>已连接的信号非重载类型的直接使用<code>signaName.disconnect()</code>断开连接即可</p><p>重载类型的使用<code>signaName[type].disconnect()</code>断开连接</p><h3 id="手动关联内置信号的自定义槽函数" tabindex="-1"><a class="header-anchor" href="#手动关联内置信号的自定义槽函数" aria-hidden="true">#</a> 手动关联内置信号的自定义槽函数</h3><p>除了使用控件内置信号定义自动连接的槽函数外,还可以将控件内置信号手动连接到其他函数上,这时需要用到信号的 <code>connect()</code>方法。</p><p><code>btnCalculate.clicked.connect(self.method)</code>语句将按钮的单击信号<code>clicked</code>与<code>method()</code>函数进行连接</p><p>也可以在主程序中,在消息循环语句前用<code>myWindow.ui.btnCalculate.clicked.connect(myWindow.method)</code>语句进行消息与槽函数的连接</p>',26))])}const At=l(y,[["render",St],["__file","02基础了解.html.vue"]]);export{At as default};
