import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as i,a as e}from"./app-DBc2jY3V.js";const t="/wf-site/assets/image-20240711094739770-Ds_UmW80.png",r="/wf-site/assets/image-20240711101023030-gSrT_2rV.png",o="/wf-site/assets/image-20240711101103310-DKq6flii.png",p="/wf-site/assets/image-20240711101202111-3FqTpSWU.png",c="/wf-site/assets/image-20240711101629423-BVj5LnAB.png",d="/wf-site/assets/image-20240711101855523-szTz4U2K.png",g="/wf-site/assets/image-20240711102123838-p3WDLqlm.png",l="/wf-site/assets/image-20240711102822130-7FtQURLC.png",m="/wf-site/assets/image-20240711102144007-CH961fvV.png",u="/wf-site/assets/image-20240711102929963-DK8ZUpTS.png",h="/wf-site/assets/image-20240711103612277-Dx3svFN-.png",f="/wf-site/assets/image-20240711103636584-DqVSl3Ah.png",b="/wf-site/assets/image-20240711104328016-BurOmiPG.png",_="/wf-site/assets/image-20240711104701102-DaYlnx5i.png",v="/wf-site/assets/image-20240711105015823-ChFihbox.png",k="/wf-site/assets/image-20240711105311309-dMrTiowQ.png",x="/wf-site/assets/image-20240711105708319-CPoakww6.png",T="/wf-site/assets/image-20240711110013273-Dhu6y-yr.png",E="/wf-site/assets/image-20240711110925266-C7G6DX2E.png",y="/wf-site/assets/image-20240711112028730-DrFzh_Ur.png",z={};function w(C,a){return i(),s("div",null,a[0]||(a[0]=[e(`<h1 id="一个简单任务" tabindex="-1"><a class="header-anchor" href="#一个简单任务" aria-hidden="true">#</a> 一个简单任务</h1><h2 id="跑马灯程序" tabindex="-1"><a class="header-anchor" href="#跑马灯程序" aria-hidden="true">#</a> 跑马灯程序</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROGRAM PLC_PRG
VAR
	ton1 <span class="token operator">:</span>TON<span class="token punctuation">;</span>
	in_byte <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">16</span>#<span class="token number">1</span><span class="token punctuation">;</span>
	n <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
END_VAR
    
<span class="token function">ton1</span><span class="token punctuation">(</span>
	IN<span class="token operator">:</span><span class="token operator">=</span>NOT ton1<span class="token punctuation">.</span>Q<span class="token punctuation">,</span>
	PT<span class="token operator">:</span><span class="token operator">=</span>T#<span class="token number">1</span>S<span class="token punctuation">,</span>
	Q<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
	ET<span class="token operator">=</span><span class="token operator">&gt;</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
IF ton1<span class="token punctuation">.</span>Q THEN
	in_byte <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">ROL</span><span class="token punctuation">(</span>in_byte<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
END_IF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个流水灯任务，以1s为循环。</p><h3 id="添加io映射" tabindex="-1"><a class="header-anchor" href="#添加io映射" aria-hidden="true">#</a> 添加IO映射</h3><figure><img src="`+t+'" alt="image-20240711094739770" tabindex="0" loading="lazy"><figcaption>image-20240711094739770</figcaption></figure><p>就可以实现在实体IO的输出了。</p><h1 id="通信配置" tabindex="-1"><a class="header-anchor" href="#通信配置" aria-hidden="true">#</a> 通信配置</h1><h2 id="本地模块配置" tabindex="-1"><a class="header-anchor" href="#本地模块配置" aria-hidden="true">#</a> 本地模块配置</h2><figure><img src="'+r+'" alt="image-20240711101023030" tabindex="0" loading="lazy"><figcaption>image-20240711101023030</figcaption></figure><p>具体的io映射</p><figure><img src="'+o+'" alt="image-20240711101103310" tabindex="0" loading="lazy"><figcaption>image-20240711101103310</figcaption></figure><p>变量映射</p><figure><img src="'+p+'" alt="image-20240711101202111" tabindex="0" loading="lazy"><figcaption>image-20240711101202111</figcaption></figure><h2 id="ethercat配置" tabindex="-1"><a class="header-anchor" href="#ethercat配置" aria-hidden="true">#</a> EtherCat配置</h2><p>3、勾选了EtherCAT主站和CANopen:主站，在任务栏都会新增出相应的通信任务。其中**EtherCAT主站的任务默认优先为级为0（最高），任务周期必须保证和EtherCAT循环周期一致。**因此更改EtherCAT循环周期，必须相应的更改EtherCAT任务周期(EtherCAT务必唯一且为最高优先级)</p><figure><img src="'+c+'" alt="image-20240711101629423" tabindex="0" loading="lazy"><figcaption>image-20240711101629423</figcaption></figure><p>两个任务周期必须保持一致。<img src="'+d+'" alt="image-20240711101855523" loading="lazy"></p><h2 id="modbus配置-modbus-tcp配置" tabindex="-1"><a class="header-anchor" href="#modbus配置-modbus-tcp配置" aria-hidden="true">#</a> modbus配置/modbus-TCP配置</h2><p>串口与TCP/IP配置除通信模式外其余部分都相同。</p><p>开启modbus配置</p><figure><img src="'+g+'" alt="image-20240711102123838" tabindex="0" loading="lazy"><figcaption>image-20240711102123838</figcaption></figure><h3 id="主站配置" tabindex="-1"><a class="header-anchor" href="#主站配置" aria-hidden="true">#</a> 主站配置</h3><figure><img src="'+l+'" alt="image-20240711102822130" tabindex="0" loading="lazy"><figcaption>image-20240711102822130</figcaption></figure><h3 id="从站配置" tabindex="-1"><a class="header-anchor" href="#从站配置" aria-hidden="true">#</a> 从站配置</h3><figure><img src="'+m+'" alt="image-20240711102144007" tabindex="0" loading="lazy"><figcaption>image-20240711102144007</figcaption></figure><p>使能从站</p><figure><img src="'+u+'" alt="image-20240711102929963" tabindex="0" loading="lazy"><figcaption>image-20240711102929963</figcaption></figure><h3 id="通信配置-1" tabindex="-1"><a class="header-anchor" href="#通信配置-1" aria-hidden="true">#</a> 通信配置</h3><figure><img src="'+h+'" alt="image-20240711103612277" tabindex="0" loading="lazy"><figcaption>image-20240711103612277</figcaption></figure><p>配置后的地址映射</p><figure><img src="'+f+'" alt="image-20240711103636584" tabindex="0" loading="lazy"><figcaption>image-20240711103636584</figcaption></figure><h1 id="库文件配置" tabindex="-1"><a class="header-anchor" href="#库文件配置" aria-hidden="true">#</a> 库文件配置</h1><p>库文件用于存放Inoproshop中可多次使用的<strong>程序组织单元(POU)</strong>。</p><p>这些POU可以从已有的项目中复制到库中，用户也可以直接新建库项目，在项目中自己定义库。库中存放有用户希望多次调用的功能块、函数或程序时，可以节省大量的编程时间，并提高效率。</p><p>库文件除了是函数、功能块和程序的集合，其中还包含一些特殊定义的结构体，枚举类型等。从功能上分可以将库文件分为<strong>系统库文件、应用库文件以及自定义库文件。</strong></p><figure><img src="'+b+'" alt="image-20240711104328016" tabindex="0" loading="lazy"><figcaption>image-20240711104328016</figcaption></figure><p>库文件的安装。</p><figure><img src="'+_+'" alt="image-20240711104701102" tabindex="0" loading="lazy"><figcaption>image-20240711104701102</figcaption></figure><h1 id="第三方设备导入" tabindex="-1"><a class="header-anchor" href="#第三方设备导入" aria-hidden="true">#</a> 第三方设备导入</h1><h2 id="ethercat设备导入xml文件的导入" tabindex="-1"><a class="header-anchor" href="#ethercat设备导入xml文件的导入" aria-hidden="true">#</a> EtherCat设备导入xml文件的导入</h2><p>1.在建立的工程的【设备】页内点击【Network Configuration】→点击【导入ECT文件】；</p><figure><img src="'+v+'" alt="image-20240711105015823" tabindex="0" loading="lazy"><figcaption>image-20240711105015823</figcaption></figure><h2 id="canopen设备的eps文件导入" tabindex="-1"><a class="header-anchor" href="#canopen设备的eps文件导入" aria-hidden="true">#</a> CANOPEN设备的EPS文件导入</h2><figure><img src="'+k+'" alt="image-20240711105311309" tabindex="0" loading="lazy"><figcaption>image-20240711105311309</figcaption></figure><h1 id="变量关联" tabindex="-1"><a class="header-anchor" href="#变量关联" aria-hidden="true">#</a> 变量关联</h1><h3 id="方法1-zaiio配置里关联" tabindex="-1"><a class="header-anchor" href="#方法1-zaiio配置里关联" aria-hidden="true">#</a> 方法1-zaiIO配置里关联</h3><p>小型PLC直接可以控制XN点来达到控制输入输出的目的，在InoProShop后台中，需要将用户定义的变 量和IO关联起来。</p><figure><img src="'+x+'" alt="image-20240711105708319" tabindex="0" loading="lazy"><figcaption>image-20240711105708319</figcaption></figure><p>这种方法匹配变量后，地址栏对应的物理地址会无效，不可使用</p><h3 id="方法2-直接在st文本中使用" tabindex="-1"><a class="header-anchor" href="#方法2-直接在st文本中使用" aria-hidden="true">#</a> 方法2-直接在ST文本中使用</h3><p>1.我们看到第一个输出点地址为QX0.0,定义的关联地址格式为： “变量名称”AT“IO地址”：“变量类型”</p><figure><img src="'+T+`" alt="image-20240711110013273" tabindex="0" loading="lazy"><figcaption>image-20240711110013273</figcaption></figure><h2 id="掉电保持" tabindex="-1"><a class="header-anchor" href="#掉电保持" aria-hidden="true">#</a> 掉电保持</h2><p>1、掉电保持变量在PLC掉电、程序下载后继续保留原来的值，常用来定义工程中重要的参数，防止 PLC突发掉电或者程序下载而导致的重要参数丢失。 掉电保持特性主要通过属性关键字PERSISTENT RETAIN来声明。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>VAR_GLOBAL PERSISTENT RETAIN
	ton1 <span class="token operator">:</span>TON<span class="token punctuation">;</span>
	in_byte <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">16</span>#<span class="token number">1</span><span class="token punctuation">;</span>
	n <span class="token operator">:</span>BYTE<span class="token operator">:</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
END_VAR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+E+'" alt="image-20240711110925266" tabindex="0" loading="lazy"><figcaption>image-20240711110925266</figcaption></figure><h3 id="开启掉电保持功能" tabindex="-1"><a class="header-anchor" href="#开启掉电保持功能" aria-hidden="true">#</a> 开启掉电保持功能</h3><p>3、如果工程中定义了掉电保持变量，则必须生成一个掉电保持变量表，否则定义的变量不具有掉电 保持功能。掉电保持变量表可通过以下两种方式生成： ■手动添加：通过右键“应用”-“添加对象”-“掉电保持变量”来添加掉电保持变量表： ■自动添加：当声明了掉电保持变量，编译时会自动创建掉电保持变量表。 掉电保持变量表包含两种模式：传统模式和标准模式。</p><figure><img src="'+y+'" alt="image-20240711112028730" tabindex="0" loading="lazy"><figcaption>image-20240711112028730</figcaption></figure><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h3><p><strong>9、在程序任意一个地方使用任何一个掉电保持变量所处全局变量表的变量，然后进行编译，自动生成</strong><strong>标准模式下的Persistentvars;</strong></p>',62)]))}const N=n(z,[["render",w],["__file","06InoProShop使用.html.vue"]]);export{N as default};
