import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,c as r,o,a as l,b as n,e,d as a}from"./app-DBc2jY3V.js";const c={},p={href:"https://baike.baidu.com/item/%E5%85%B3%E9%94%AE%E5%AD%97/7105697",target:"_blank",rel:"noopener noreferrer"},u={href:"https://baike.baidu.com/item/%E4%BF%9D%E7%95%99%E5%AD%97/7674788",target:"_blank",rel:"noopener noreferrer"},g={href:"https://baike.baidu.com/item/%E7%B1%BB%E5%9E%8B/5799843",target:"_blank",rel:"noopener noreferrer"},v={href:"https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1/17158",target:"_blank",rel:"noopener noreferrer"},y={href:"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912",target:"_blank",rel:"noopener noreferrer"},x={href:"https://baike.baidu.com/item/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/2887476",target:"_blank",rel:"noopener noreferrer"},f={href:"https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638",target:"_blank",rel:"noopener noreferrer"},h={href:"https://baike.baidu.com/item/%E5%8D%8A%E8%A7%92%E5%86%92%E5%8F%B7/1090543",target:"_blank",rel:"noopener noreferrer"};function m(k,t){const s=d("ExternalLinkIcon");return o(),r("div",null,[t[20]||(t[20]=l(`<h2 id="_00-编写一个简单的c-程序" tabindex="-1"><a class="header-anchor" href="#_00-编写一个简单的c-程序" aria-hidden="true">#</a> 00.编写一个简单的C++程序</h2><p>每个C++程序都包含一个或多个函数（function），其中一个必须命名为<strong>main</strong>。操作系统通过调用main来运行C++程序。</p><p>下面是一个简单的main函数，它什么都不做，只是返回给操作系统一个值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数的返回类型必须为int。int类型是一种<strong>内置类型</strong>（built-in type），即语言自身定义的类型。</p><p>函数体是一个以左<strong>花括号</strong>（curly brace）开始，以右花括号结束的语句块（block of statements）。</p><p>return语句结束函数的执行。main的返回值被用来指示状态。返回值0表明成功，非0的返回值的含义由系统定义，通常用来指出错误类型。</p><h3 id="编译、运行程序" tabindex="-1"><a class="header-anchor" href="#编译、运行程序" aria-hidden="true">#</a> 编译、运行程序</h3><p>编写好程序后，我们就需要编译它，这依赖于操作系统和编译器。</p><p><strong>程序源文件命名约定</strong></p><p>程序文件通常被称为源文件（source file）。它以一个后缀为结尾，告诉系统这个文件是一个C++程序，比如.cpp。</p><h2 id="_01-输入-输出数据" tabindex="-1"><a class="header-anchor" href="#_01-输入-输出数据" aria-hidden="true">#</a> 01.输入/输出数据</h2><p>C++包含了一个全面的<strong>标准库</strong>（standard library）来提供IO机制（以及很多其他设施）。</p><p><strong>iostream</strong>库包含两个基础类型istream和ostream，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。</p><p><strong>标准输入输出对象</strong></p><p>标准库定义了4个IO对象。为了处理输入，使用名为cin的istream类型的对象。这个对象被称为<strong>标准输入</strong>（standard input）。对于输出，使用名为cout的ostream类型的对象。这个对象被称为<strong>标准输出</strong>（standard output）。另外还有其他两个ostream对象，名为cerr和clog，cerr通常用来输出警告和错误消息，因此被称为<strong>标准错误</strong>（standard error）。clog用来输出程序运行时的一般性消息。</p><p>系统通常将程序所运行的窗口与这些对象关联起来。因此，当读取cin，数据将从程序正在运行的窗口读入，当向cout写入数据时，将会写到同一个窗口。</p><h3 id="_1-数据的分类" tabindex="-1"><a class="header-anchor" href="#_1-数据的分类" aria-hidden="true">#</a> 1).数据的分类</h3><p>数据有数字、字符和字符串三种类型。</p><ul><li>数字：直接书写，如：100、18.52、0、9；</li><li>字符：用半角的单引号包含的一个符号，如：&#39;A&#39;、&#39;Z&#39;、&#39;0&#39;、&#39;9&#39;、&#39;~&#39;、&#39;+&#39;，汉字和全角的标点符号不是字符；</li><li>字符串：用半角的双引号包含的多个符号，如：&quot;Hello World&quot;、&quot;我是一只傻鸟&quot;、&quot;西施&quot;、&quot;100&quot;、&quot;X&quot;。</li></ul><h3 id="_2-输出数据" tabindex="-1"><a class="header-anchor" href="#_2-输出数据" aria-hidden="true">#</a> 2.输出数据</h3><ul><li>std::cout可以输出各种类型的数据；</li><li>&lt;&lt;操作符可以拼接多个数据项；</li><li>std::endl也可以用于换行；</li><li>using namespace std;指定缺省的命名空间。</li></ul><p>示例</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;
    cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-、输入数据" tabindex="-1"><a class="header-anchor" href="#_3-、输入数据" aria-hidden="true">#</a> <strong>3)、输入数据</strong></h3><p>程序输入数据的方式有多种。</p><ul><li>从控制台的界面中输入（网页、PC桌面程序、APP程序）；</li><li>从文件中读取；</li><li>从数据库中读取；</li><li>从网络中读取。</li></ul><p><strong>用std::cin输入数据</strong></p><p>语法：std::cin&gt;&gt;变量名;</p><p>注意：</p><ul><li>a）布尔型变量的值在计算机内部用1（true）和0（false）存储；b）程序中可以书写true和false，也可以书写1和0，其它值将强制转换成1；c）用cin输入时可以填1和0，其它值也强制转换成1；d）用cout输出时只显示1和0，不显示true和false。</li><li>如果输入的数据与变量的数据类型不匹配，会导致行为的不确定性。</li></ul><p>示例：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int age;
    string name;
    char sex;
    bool fat;
    double higher;
    cout &lt;&lt; &quot;input age:&quot;;
    cin &gt;&gt; age;
    cout &lt;&lt; &quot;age is:&quot; &lt;&lt; age &lt;&lt; endl;

    cout &lt;&lt; &quot;input name:&quot;;
    cin &gt;&gt; name;
    cout &lt;&lt; &quot;name is:&quot; &lt;&lt; name &lt;&lt; endl;

    cout &lt;&lt; &quot;input sex:&quot;;
    cin &gt;&gt; sex;
    cout &lt;&lt; &quot;sex is:&quot; &lt;&lt; sex &lt;&lt; endl;

    cout &lt;&lt; &quot;input fat:&quot;;
    cin &gt;&gt; fat;
    cout &lt;&lt; &quot;fat is:&quot; &lt;&lt; fat &lt;&lt; endl;

    cout &lt;&lt; &quot;input higher:&quot;;
    cin &gt;&gt; higher;
    cout &lt;&lt; &quot;higher is:&quot; &lt;&lt; higher &lt;&lt; endl;

    int v1 = 0, v2 = 0;
    cout &lt;&lt; &quot;input v1 an v2:&quot;;
    cin &gt;&gt; v1 &gt;&gt; v2;
    cout &lt;&lt; &quot;v1 is :&quot; &lt;&lt; v1 &lt;&lt; &quot;, v2 is :&quot; &lt;&lt; v2 &lt;&lt; endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-使用变量" tabindex="-1"><a class="header-anchor" href="#_02-使用变量" aria-hidden="true">#</a> <strong>02.使用变量</strong></h2><p>变量是内存变量的简称，用于存放数据。</p><h3 id="_1-声明变量" tabindex="-1"><a class="header-anchor" href="#_1-声明变量" aria-hidden="true">#</a> <strong>1）声明变量</strong></h3><p>变量在使用之前要先声明。</p><p>语法：数据类型 变量名</p><p>C++常用的数据类型有五种：整数（int）、浮点数（float和double）、字符（char）、字符串（string）和布尔（bool）。</p><p>变量在声明的时候可以赋初始值。</p><p>语法：数据类型 变量名=值</p><p>示例：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    int age;
    string name;
    char sex;
    bool fat;
    double higher;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-使用常量" tabindex="-1"><a class="header-anchor" href="#_03-使用常量" aria-hidden="true">#</a> 03.使用常量</h2><p>常量是程序中固定不变的数据。</p><h3 id="_1-宏常量" tabindex="-1"><a class="header-anchor" href="#_1-宏常量" aria-hidden="true">#</a> <strong>1）宏常量</strong></h3><p>一般在main函数的上面声明，用大写命名。</p><p>语法：#define 常量名 值</p><h3 id="_2-const修饰的变量" tabindex="-1"><a class="header-anchor" href="#_2-const修饰的变量" aria-hidden="true">#</a> <strong>2）const修饰的变量</strong></h3><p>在程序的任何地方都可以声明。</p><p>语法：const 数据类型 常量名=值</p><h3 id="_3-常量的特点" tabindex="-1"><a class="header-anchor" href="#_3-常量的特点" aria-hidden="true">#</a> <strong>3）常量的特点</strong></h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p><p>示例：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;iostream&gt;         // 包含头文件。

#define MONTHS 12               // 一年中的月份数。
#define PI 3.14159    // 圆周率。

using namespace std;        // 指定缺省的命名空间。

int main() {
    const int days = 7;          // 一个星期中的天数。

    cout &lt;&lt; &quot;一年有&quot; &lt;&lt; MONTHS &lt;&lt; &quot;个月。&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;圆周率的值是：&quot; &lt;&lt; PI &lt;&lt; endl;
    cout &lt;&lt; &quot;一个星期有&quot; &lt;&lt; days &lt;&lt; &quot;天。\\n&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-标识符的命名" tabindex="-1"><a class="header-anchor" href="#_04-标识符的命名" aria-hidden="true">#</a> <strong>04.标识符的命名</strong></h2><h3 id="_1-c-命名规则" tabindex="-1"><a class="header-anchor" href="#_1-c-命名规则" aria-hidden="true">#</a> <strong>1）C++命名规则</strong></h3><p>C++规定给标识符（变量、常量、函数、结构体、类等）命名时，必须遵守以下规则。</p><ul><li>在名称中只能使用字母字符、数字和下划线；</li><li>名称的第一个字符不能是数字；</li><li>名称区分大写字符与小写字符；</li><li>不能将C++关键字用作名称；</li><li>以下划线和大写字母打头的名称被保留给编译器及其使用的资源使用，如果违反了这一规则，会导致行为的不确定性。</li><li>C++对名称的长度没有限制，但有些平台可能有长度限制（64字符）。</li></ul><p><strong>C++提倡有一定含义的名称（望名知义）。</strong></p><h3 id="_2-c-关键字" tabindex="-1"><a class="header-anchor" href="#_2-c-关键字" aria-hidden="true">#</a> <strong>2）C++关键字</strong></h3>`,61)),n("p",null,[n("a",p,[t[0]||(t[0]=e("关键字")),a(s)]),t[2]||(t[2]=e("也叫")),n("a",u,[t[1]||(t[1]=e("保留字")),a(s)]),t[3]||(t[3]=e("，是C++预先保留的标识符。"))]),n("p",null,[t[9]||(t[9]=e("每个C++关键字都有特殊的含义，用于声明")),n("a",g,[t[4]||(t[4]=e("类型")),a(s)]),t[10]||(t[10]=e("、")),n("a",v,[t[5]||(t[5]=e("对象")),a(s)]),t[11]||(t[11]=e("、")),n("a",y,[t[6]||(t[6]=e("函数")),a(s)]),t[12]||(t[12]=e("、")),n("a",x,[t[7]||(t[7]=e("命名空间")),a(s)]),t[13]||(t[13]=e("等，程序中不能声明与关键字同名的")),n("a",f,[t[8]||(t[8]=e("标识符")),a(s)]),t[14]||(t[14]=e("。"))]),t[21]||(t[21]=l(`<table><thead><tr><th style="text-align:left;">asm</th><th style="text-align:left;">do</th><th style="text-align:left;">if</th><th style="text-align:left;">return</th><th style="text-align:left;">typedef</th></tr></thead><tbody><tr><td style="text-align:left;">auto</td><td style="text-align:left;">double</td><td style="text-align:left;">inline</td><td style="text-align:left;">short</td><td style="text-align:left;">typeid</td></tr><tr><td style="text-align:left;">bool</td><td style="text-align:left;">dynamic_cast</td><td style="text-align:left;">int</td><td style="text-align:left;">signed</td><td style="text-align:left;">typename</td></tr><tr><td style="text-align:left;">break</td><td style="text-align:left;">else</td><td style="text-align:left;">long</td><td style="text-align:left;">sizeof</td><td style="text-align:left;">union</td></tr><tr><td style="text-align:left;">case</td><td style="text-align:left;">enum</td><td style="text-align:left;">mutable</td><td style="text-align:left;">static</td><td style="text-align:left;">unsigned</td></tr><tr><td style="text-align:left;">catch</td><td style="text-align:left;">explicit</td><td style="text-align:left;">namespace</td><td style="text-align:left;">static_cast</td><td style="text-align:left;">using</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">export</td><td style="text-align:left;">new</td><td style="text-align:left;">struct</td><td style="text-align:left;">virtual</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">extern</td><td style="text-align:left;">operator</td><td style="text-align:left;">switch</td><td style="text-align:left;">void</td></tr><tr><td style="text-align:left;">const</td><td style="text-align:left;">false</td><td style="text-align:left;">private</td><td style="text-align:left;">template</td><td style="text-align:left;">volatile</td></tr><tr><td style="text-align:left;">const_cast</td><td style="text-align:left;">float</td><td style="text-align:left;">protected</td><td style="text-align:left;">this</td><td style="text-align:left;">wchar_t</td></tr><tr><td style="text-align:left;">continue</td><td style="text-align:left;">for</td><td style="text-align:left;">public</td><td style="text-align:left;">throw</td><td style="text-align:left;">while</td></tr><tr><td style="text-align:left;">default</td><td style="text-align:left;">friend</td><td style="text-align:left;">register</td><td style="text-align:left;">true</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">delete</td><td style="text-align:left;">goto</td><td style="text-align:left;">reinterpret_cast</td><td style="text-align:left;">try</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_05-运算符" tabindex="-1"><a class="header-anchor" href="#_05-运算符" aria-hidden="true">#</a> 05.运算符</h2><h3 id="_1-算术运算" tabindex="-1"><a class="header-anchor" href="#_1-算术运算" aria-hidden="true">#</a> <strong>1） 算术运算</strong></h3><table><thead><tr><th style="text-align:center;"><strong>运算符</strong></th><th style="text-align:center;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:center;">两个数相加。</td></tr><tr><td style="text-align:center;"><strong>-</strong></td><td style="text-align:center;">一个数减另一个数。</td></tr><tr><td style="text-align:center;"><strong>*</strong></td><td style="text-align:center;">两个数相乘。</td></tr><tr><td style="text-align:center;"><strong>/</strong></td><td style="text-align:center;">分子除以分母。</td></tr><tr><td style="text-align:center;"><strong>%</strong></td><td style="text-align:center;">取模运算，整除后的余数。</td></tr></tbody></table><p>注意：</p><ul><li>整数进行除法运算时，如果分母为0，程序将异常退出；</li><li>浮点数进行除法运算时，如果分母为0.0，将得到inf（infinite，无穷大）；</li><li>两个整数进行除法运算时，将舍去小数部分，得到一个整数；</li><li>整数与浮点数进行除法运算时，得到的结果是浮点数；</li><li>进行除法运算时，在整数前面加(float)或(double)可以将整数转换为float或double类型；</li><li>取模运算只能用于整数（分母也不能为0）。</li></ul><h3 id="_2-自增和自减" tabindex="-1"><a class="header-anchor" href="#_2-自增和自减" aria-hidden="true">#</a> <strong>2）自增和自减</strong></h3><table><thead><tr><th style="text-align:center;"><strong>运算符</strong></th><th style="text-align:center;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>++变量名</strong></td><td style="text-align:center;">先把变量的值加1，然后再执行表达式。</td></tr><tr><td style="text-align:center;"><strong>变量名++</strong></td><td style="text-align:center;">先执行表达式，再把变量的值加1。</td></tr><tr><td style="text-align:center;"><strong>--变量名</strong></td><td style="text-align:center;">先把变量的值减1，然后再执行表达式。</td></tr><tr><td style="text-align:center;"><strong>变量名--</strong></td><td style="text-align:center;">先执行表达式，再把变量的减1。</td></tr></tbody></table><h3 id="_3-赋值运算" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算" aria-hidden="true">#</a> <strong>3）赋值运算</strong></h3><p><strong>赋值运算</strong></p><table><thead><tr><th style="text-align:center;"><strong>运算符</strong></th><th style="text-align:center;"><strong>示例</strong></th><th style="text-align:center;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>=</strong></td><td style="text-align:center;">c = a + b; 将把a + b的值赋给c。</td><td style="text-align:center;">把右边操作数的值赋给左边操作数。</td></tr><tr><td style="text-align:center;"><strong>+=</strong></td><td style="text-align:center;">c += a; 相当于 c = c + a;</td><td style="text-align:center;">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数。</td></tr><tr><td style="text-align:center;"><strong>-=</strong></td><td style="text-align:center;">c -= a; 相当于 c = c - a;</td><td style="text-align:center;">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数。</td></tr><tr><td style="text-align:center;"><strong>*=</strong></td><td style="text-align:center;">c *= a; 相当于 c = c * a;</td><td style="text-align:center;">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数。</td></tr><tr><td style="text-align:center;"><strong>/=</strong></td><td style="text-align:center;">c /= a; 相当于 c = c / a;</td><td style="text-align:center;">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数。</td></tr><tr><td style="text-align:center;"><strong>%=</strong></td><td style="text-align:center;">c %= a; 相当于 c = c % a;</td><td style="text-align:center;">求余数且赋值运算符，求两个操作数的模赋值给左边操作数，浮点数不适用取余数。</td></tr></tbody></table><p>注意：</p><ul><li>字符串（string）只能使用等号（=）赋值，不能使用其它的赋值运算符；</li><li>浮点数不能使用%=运算符；</li><li>等号（=）赋值运算符可以连续使用；</li><li>如果赋值运算符两边操作数的数据类型不同，C++将自动转换数据类型，可能会损失精度，也可能超出取值范围，如果转换不成功，编译时会报错。</li></ul><h3 id="_4-关系运算" tabindex="-1"><a class="header-anchor" href="#_4-关系运算" aria-hidden="true">#</a> <strong>4）关系运算</strong></h3><p>用于比较两个表达式的值，运算的结果为1-true和0-false。</p><table><thead><tr><th style="text-align:center;"><strong>关系</strong></th><th style="text-align:center;"><strong>数学的表示</strong></th><th style="text-align:center;"><strong>C++的表示</strong></th></tr></thead><tbody><tr><td style="text-align:center;">等于</td><td style="text-align:center;">=</td><td style="text-align:center;">==</td></tr><tr><td style="text-align:center;">不等于</td><td style="text-align:center;">≠</td><td style="text-align:center;">!=</td></tr><tr><td style="text-align:center;">小于</td><td style="text-align:center;">&lt;</td><td style="text-align:center;">&lt;</td></tr><tr><td style="text-align:center;">小于等于</td><td style="text-align:center;">≤</td><td style="text-align:center;">&lt;=</td></tr><tr><td style="text-align:center;">大于</td><td style="text-align:center;">&gt;</td><td style="text-align:center;">&gt;</td></tr><tr><td style="text-align:center;">大于等于</td><td style="text-align:center;">≥</td><td style="text-align:center;">&gt;=</td></tr></tbody></table><p>注意：</p><ul><li>关系运算符的两边可以是数值，也可以是表达式；</li><li>用std::cout输出关系运算表达式时，关系表达式要加括号；</li><li>关系运算也适用于字符串（string），字符串常用的关系运算是==和!=，其它的基本上不用。</li></ul><h3 id="_5-逻辑运算" tabindex="-1"><a class="header-anchor" href="#_5-逻辑运算" aria-hidden="true">#</a> <strong>5）逻辑运算</strong></h3><p>根据给定的逻辑因子（表达式或值）返回一个新的逻辑因子。</p><table><thead><tr><th style="text-align:center;"><strong>运算符</strong></th><th style="text-align:center;"><strong>术语</strong></th><th style="text-align:center;"><strong>示例</strong></th><th style="text-align:center;"><strong>结果</strong></th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">逻辑与</td><td style="text-align:center;">a&amp;&amp;b;</td><td style="text-align:center;">如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td style="text-align:center;">||</td><td style="text-align:center;">逻辑或</td><td style="text-align:center;">a|| b</td><td style="text-align:center;">a,b都为假时，结果为假，否则结果为真</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">逻辑非（反）</td><td style="text-align:center;">!a;</td><td style="text-align:center;">如果a为假，则!a为真； 如果a为真，则!a为假。</td></tr></tbody></table><p>注意：</p><ul><li>逻辑运算符的两边可以是数值，也可以是表达式；</li><li>用std::cout输出逻辑运算表达式时，逻辑表达式要加括号；</li><li>在实际开发中，逻辑运算的多重组合是重点。</li></ul><h3 id="_6-逗号运算" tabindex="-1"><a class="header-anchor" href="#_6-逗号运算" aria-hidden="true">#</a> <strong>6）逗号运算</strong></h3><p>把一行语句中的多个表达式连接起来，程序将从左到右执行表达式。</p><p>语法：表达式一,表达式二,……,表达式n;</p><p>逗号运算常用于声明多个变量。</p><p>int a,b; // 声明变量a和b。</p><p>int a=10,b=20; // 声明变量a和b并初始化。</p><p>也可以用于其它语句中，但是，逗号运算符是所有运算符中级别最低的，以下两个表达式的效果是不同的。</p><p>int a,b;</p><p>b=a=2,a*2;</p><p>b=(a=2,a*2);</p><h3 id="_7-运算的优先级" tabindex="-1"><a class="header-anchor" href="#_7-运算的优先级" aria-hidden="true">#</a> <strong>7）运算的优先级</strong></h3><p>一个表达式可以包含多个运算符，运算符的优先级决定了表达式各部分的执行顺序。</p><p>例如，按照运算规则， *的优先级比+高，所以的b * c将先执行：</p><p>a + b * c;</p><p>如果想让a + b先执行，则必须使用括号：</p><p>(a + b) * c;</p><p>如果一个表达式中操作符的优先级相同，那么它们的<strong>结合律</strong>（associativity）决定了它们的执行顺序（从左到右或从右到左）。例如，算术运算的组合方式是从左到右，赋值运算则是从右到左。如下：</p><table><thead><tr><th style="text-align:center;"><strong>表达式</strong></th><th style="text-align:center;"><strong>结合律</strong></th><th style="text-align:center;"><strong>组合方式</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>a/b%c</strong></td><td style="text-align:center;">从左到右</td><td style="text-align:center;">(a/b)%c</td></tr><tr><td style="text-align:center;"><strong>a=b=c</strong></td><td style="text-align:center;">从右到左</td><td style="text-align:center;">a=(b=c)</td></tr></tbody></table><p>下表是全部运算符的优先级和结合律：</p><table><thead><tr><th style="text-align:left;">优先级</th><th style="text-align:left;">运算符</th><th style="text-align:left;">说明</th><th style="text-align:left;">结合性</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">::</td><td style="text-align:left;">范围解析</td><td style="text-align:left;">自左向右</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">++ --</td><td style="text-align:left;">后缀自增/后缀自减</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">()</td><td style="text-align:left;">括号</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">[]</td><td style="text-align:left;">数组下标</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">成员选择（对象）</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">−&gt;</td><td style="text-align:left;">成员选择（指针）</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">++ --</td><td style="text-align:left;">前缀自增/前缀自减</td><td style="text-align:left;">自右向左</td></tr><tr><td style="text-align:left;">+ −</td><td style="text-align:left;">加/减</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">! ~</td><td style="text-align:left;">逻辑非/按位取反</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">(type)</td><td style="text-align:left;">强制类型转换</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">取指针指向的值</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">某某的地址</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">sizeof</td><td style="text-align:left;">某某的大小</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">new,new[]</td><td style="text-align:left;">动态内存分配/动态数组内存分配</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">delete,delete[]</td><td style="text-align:left;">动态内存释放/动态数组内存释放</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">.* -&gt;*</td><td style="text-align:left;">成员对象选择/成员指针选择</td><td style="text-align:left;">自左向右</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">* / %</td><td style="text-align:left;">乘法/除法/取余</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">+ −</td><td style="text-align:left;">加号/减号</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">&lt;&lt; &gt;&gt;</td><td style="text-align:left;">位左移/位右移</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">&lt; &lt;=</td><td style="text-align:left;">小于/小于等于</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">&gt; &gt;=</td><td style="text-align:left;">大于/大于等于</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">== !=</td><td style="text-align:left;">等于/不等于</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">&amp;</td><td style="text-align:left;">按位与</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">^</td><td style="text-align:left;">按位异或</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">|</td><td style="text-align:left;">按位或</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">与运算</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">||</td><td style="text-align:left;">或运算</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">?:</td><td style="text-align:left;">三目运算符</td><td style="text-align:left;">自右向左</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;">=</td><td style="text-align:left;">赋值</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">+= −=</td><td style="text-align:left;">相加后赋值/相减后赋值</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">*= /= %=</td><td style="text-align:left;">相乘后赋值/相除后赋值/取余后赋值</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">&lt;&lt;= &gt;&gt;=</td><td style="text-align:left;">位左移赋值/位右移赋值</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">&amp;= ^= |=</td><td style="text-align:left;">位与运算后赋值/位异或运算后赋值/位或运算后赋值</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;">throw</td><td style="text-align:left;">抛出异常</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;">,</td><td style="text-align:left;">逗号</td><td style="text-align:left;">自左向右</td></tr></tbody></table><p>注意：</p><ul><li>如果不确定运算符的优先级，可以加括号；</li><li>多用括号，让代码的可读性更好。</li></ul><h2 id="_06-条件分支语句" tabindex="-1"><a class="header-anchor" href="#_06-条件分支语句" aria-hidden="true">#</a> 06.条件分支语句</h2><h3 id="_1-if语句" tabindex="-1"><a class="header-anchor" href="#_1-if语句" aria-hidden="true">#</a> 1）if语句</h3><p>if语句可以嵌套使用，实现多级（层）的条件判断（最多127层）。</p><p>语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 表达式为真时执行的语句。</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 表达式为真时执行的语句。</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">// 表达式为假时执行的语句。</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>if (表达式)之间的空格可以不写。</li><li>表达式必须使用括号。</li><li>表达式可以是具体的值。</li><li>表达式一般是关系运算和逻辑运算表达式，也可以是赋值运算或其它的表达式。</li><li><strong>不要把if（变量名==值）写成if（变量名=值）。</strong></li><li>整个if语句可以没有else分支。</li><li>if或else分支花括号内的代码如果只有一行，花括号可以不写；如果一行也没有，花括号一定要写；如果有多行，花括号一定要写，<strong>如果不写，除了第一行，其它的代码将不是if语句的一部分。</strong></li><li><strong>if (表达式)和else后不能加分号，因为分号表示空语句。</strong>（C++用分号作为一条语句结束的标志。如果在C++程序中不小心多写了一个分号，那么该分号会被当成一条空语句。）</li></ul><p><strong>if语句中的逻辑表达式采用括号、对齐、空格、换行有助于更清晰的表达复杂的逻辑表达式。</strong></p><h3 id="_2-三目运算符" tabindex="-1"><a class="header-anchor" href="#_2-三目运算符" aria-hidden="true">#</a> 2）三目运算符</h3><p>三目运算也叫条件运算或三元运算，可以实现简单if语句的功能，但是书写更简洁。</p><p><code> \`\`语法： 表达式一 ? 表达式二 : 表达式三</code></p><p>先计算表达式一的值，如果为真，整个表达式的结果为表达式二的值，如果为假，整个表达式的结果为表达式三的值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三目运算表达式可以嵌套使用，但是，过于复杂的三目运算表达式不方便理解。</p><p>比如判断year是不是闰年，是则返回1，不是返回0。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int year;
year=(year%100==0)?(year%400==0?1:0):(year%4==0?1:0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>普通年能被4整除且不能被100整除的为闰年。</li><li>世纪年能被400整除的是闰年。</li><li>对于数值很大的年份，这年如果能整除3200，并且能整除172800则是闰年。如172800年是闰年，86400年不是闰年。</li></ol><h3 id="_3-switch" tabindex="-1"><a class="header-anchor" href="#_3-switch" aria-hidden="true">#</a> 3）switch</h3><p>switch也是一种选择结构的语句，可以代替简单的多条件的if语句。</p><p>语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">case</span> 值一<span class="token operator">:</span> 
     语句一<span class="token punctuation">;</span> 
     <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token keyword">case</span> 值二<span class="token operator">:</span> 
     语句二<span class="token punctuation">;</span> 
     <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> 值n<span class="token operator">:</span> 
     语句n<span class="token punctuation">;</span> 
     <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span> 
	上述条件都不满足时执行的语句<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>case后面必须是整数和字符，或者是结果为整数和字符的表达式，但不能使用变量。</li><li>default不是必须的，当没有default时，如果全部的case匹配失败，那么就什么都不执行。</li><li>每个分支不要漏写break;语句。</li></ul><p>示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>using namespace std<span class="token punctuation">;</span>        <span class="token comment">// 指定缺省的命名空间。</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ca <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;please input ca:&quot;</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ca<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ca<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;this is 1\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;this is 2\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;this is default&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_07-循环" tabindex="-1"><a class="header-anchor" href="#_07-循环" aria-hidden="true">#</a> 07.循环</h2><h3 id="_1-while循环" tabindex="-1"><a class="header-anchor" href="#_1-while循环" aria-hidden="true">#</a> 1）while循环</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
	语句块
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先计算表达式的值，如果为真就执行语句块，执行完语句块后，回到循环首部再次计算表达式的值，如果为真又执行一次语句块……，这个过程会一直重复，直到表达式的值为假时不再执行语句块。</p><p>注意：</p><ul><li>如果表达式的值永远为真，那么将进入死循环，所以在循环中应该有改变表达式的值的方法。</li><li>如果循环体中的语句块只有一行代码，大括号可以不书写。</li><li>有疑问先放一边，在以后的课程中，会介绍循环的各种使用方法。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ca <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;please input ca:&quot;</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ca<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ca <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ca value is &quot;</span> <span class="token operator">&lt;&lt;</span> ca <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        ca<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环的跳转" tabindex="-1"><a class="header-anchor" href="#循环的跳转" aria-hidden="true">#</a> 循环的跳转</h4><p>break和continue两个关键字用于控制循环体中代码的执行流程。</p><p>break跳出（中止）当前循环语句。</p><p>continue回到当前循环语句的首部。</p><h3 id="_2-for循环" tabindex="-1"><a class="header-anchor" href="#_2-for循环" aria-hidden="true">#</a> 2）for循环</h3><p>语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>语句一 <span class="token punctuation">;</span> 表达式 <span class="token punctuation">;</span> 语句二<span class="token punctuation">)</span><span class="token punctuation">{</span>
	语句块
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1）循环开始的时候，先执行语句一，在整个循环过程中语句一只会被执行一次。</p><p>2）计算表达式的值，如果为真，就执行一次循环体中的语句块。</p><p>3）执行完语句块后，执行一次语句二。</p><p>4）重复第2）步和第3），直到表达式的值不为真才结束for循环。</p><p>注意：</p><ul><li>不要纠结for循环与while循环的区别，它们本质上没有区别。</li><li>for循环一般需要一个相当于计数器的变量，在语句一中对它进行初始化，在语句二中进行计数操作。</li><li>在for循环的语句一中，可以声明计数器变量。</li><li>在for循环中，语句一、表达式和语句二都可以为空，for (;;)等同于while (true)。</li><li>continue和break两个关键字也可以用在for循环体中。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ca <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;please input ca:&quot;</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> ca<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ca<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ca value is &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-do-while循环语句" tabindex="-1"><a class="header-anchor" href="#_3-do-while循环语句" aria-hidden="true">#</a> 3）do…while循环语句</h3><p>语法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">do</span><span class="token punctuation">{</span>
	语句块
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能与while语句类似，不同的是：</p><ul><li>进入循环时，先执行一次语句块，再计算表达式的值。</li><li>循环的首部书写在循环的尾部，(表达式)后面还有一个分号。</li></ul><h3 id="_4-goto语句" tabindex="-1"><a class="header-anchor" href="#_4-goto语句" aria-hidden="true">#</a> 4）goto语句</h3><p>goto语句也称为无条件转移语句。</p><p>goto的语法：goto 语句标号;</p><p>语句标号的语法：语句标号:</p><p>如果在程序中使用了goto，程序的流程将跳转到语句标号的位置，并执行它后面的代码。</p>`,101)),n("p",null,[t[17]||(t[17]=e("其中语句标号是按")),n("a",b,[t[15]||(t[15]=e("标识符")),a(s)]),t[18]||(t[18]=e("规定书写的符号，放在某一语句行的前面，可以独占一行，标号后加")),n("a",h,[t[16]||(t[16]=e("半角冒号")),a(s)]),t[19]||(t[19]=e("。"))]),t[22]||(t[22]=n("p",null,"语句标号用于标识语句的位置，与goto语句配合使用。",-1)),t[23]||(t[23]=n("p",null,"在实际开发中，goto语句容易造成程序流程的混乱，不方便理解，调试也更麻烦，不建议使用。",-1))])}const w=i(c,[["render",m],["__file","01c__入门.html.vue"]]);export{w as default};
