import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as d}from"./app-DBc2jY3V.js";const s={};function o(i,t){return n(),e("div",null,t[0]||(t[0]=[d(`<h1 id="_09-时间网页及音视频控件2" tabindex="-1"><a class="header-anchor" href="#_09-时间网页及音视频控件2" aria-hidden="true">#</a> 09.时间网页及音视频控件2</h1><h2 id="音频和视频的播放与录制" tabindex="-1"><a class="header-anchor" href="#音频和视频的播放与录制" aria-hidden="true">#</a> 音频和视频的播放与录制</h2><p>PySide6 提供音频和视频的播放和录制功能,与音频、视频播放和录制功能相关的类在PySide6.QtMultimedia模块中,</p><p>用于显示视频内容的控件在 PySide6.QtMultimediaWidgets模块中。</p><p>本章主要介绍音频和视频的播放与录制及摄像头拍照方面的内容。</p><h4 id="播放音频和视频" tabindex="-1"><a class="header-anchor" href="#播放音频和视频" aria-hidden="true">#</a> 播放音频和视频</h4><h5 id="播放器qmediaplayer" tabindex="-1"><a class="header-anchor" href="#播放器qmediaplayer" aria-hidden="true">#</a> 播放器QMediaPlayer</h5><p>播放器 QMediaPlayer 可以播放音频和视频,它可以直接播放的格式有限。</p><p>要播放更多格式的音频或视频,例如 mp4 格式的视频文件,需要在本机上安装解码器。</p><p>这里推荐种解码器 K-Lite Codec Pack,它可以对绝大多数影音格式进行解码,安装它之后QMediaPlayer 可以播放绝大多数的音频和视频文件。</p><p>在搜索引警中搜索&quot;K-Lite&quot;就可以下载 K-Lite Codec Pack 解码器,或者到官网下载。K-Lite Codec Pack 是完全免费的下载后使用默认设置安装即可。</p><p>QMediaPlayer 继承自QObject,用QMediaPlayer 定义播放器实例对象的方法如下所示,其中 parent 是继承自QObject 类的实例对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaPlayer

QMediaPlayer<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="播放器-qmediaplayer-的常用方法" tabindex="-1"><a class="header-anchor" href="#播放器-qmediaplayer-的常用方法" aria-hidden="true">#</a> 播放器 QMediaPlayer 的常用方法</h6><p>QMediaPlayer 的常用方法如表所示,要方法介绍如下:</p><ul><li><p>要播放音频或视频,首先需要给 QMediaPlayer 设置媒体源。</p><ul><li>可以用setSource(source: Union[QUrl,str])方法或用setSourceDevice(device: QIODevice,sourceUrl:Union[QUrl,str]=Default(QUrl))方法设置媒体文件,其中 sourceUrl是可选参数,用于取额外的信息;</li><li>用source()和 sourceDevice()分别获取媒体源QUrl和QIODevice,有关 QUrl和 QIODevice 的介绍见参数/辅助类章节的内容</li></ul></li><li><p>要显示视频,需要将 QMediaPlayer 与显示视频的控件关联</p><ul><li>可以显示视频的控件有QVideoWidget、QGraphicsVideoltem,关联方法分别是 setVideoOutput(QVideoWidget)和 setVideo(utput(QGraphicsVideoltem)</li><li>要播放音频,需要用setAudioOutput(output: QAudioOutput)方法设置音频输出设备,有关QAudioOutput 的介绍见下面的内容。</li></ul></li><li><p>用play()方法开始播放音频或视频,用pause()方法暂停播放,用stop()方法停止播放并返回。</p></li><li><p>若isSeekable()返回值是True</p><ul><li>可以用setPosition(position:int)方法设置当前播放的时间</li><li>用position()方法获取当前播放的时间</li><li>用duration()方法获取音频或视频的总时间,参数或返回值的单位是毫秒。</li></ul></li><li><p>用setPlaybackRate(rate:float)方法设置播放速率,参数为10表示正常播放;参数 rate可以为负值,表示回放速率。有些多媒体不支持回放。</p></li><li><p>用setLoops(loops;int)方法设置循环播放次数参数loops 可取:</p><ul><li>QMediaPlayer.Infinite(无限次)</li><li>QMediaPlayer.Once(一次或其他整数)</li></ul></li><li><p>用state()方法获取播放状态,QMediaPlayer.State,返回值可能是</p><ul><li>QMediaPlayer.StoppedState</li><li>QMediaPlayer.PlayingState</li><li>QMediaPlayer.PausedState</li></ul></li><li><p>用playbackState()方法获取播放器的播放状态QMediaPlayer.PlaybackState,返回值可能是:</p><ul><li>QMediaPlayer.StoppedState</li><li>QMediaPlayer.PlayingState</li><li>QMediaPlayer.PausedState</li></ul></li><li><p>用mediaStatus()方法获取播放器所处的状态QMediaPlayer.MediaStatus,返回值可能是:</p><ul><li>QMediaPlayer.NoMedia</li><li>QMediaPlayer.LoadingMedia</li><li>QMediaPlayer.LoadedMedia</li><li>QMediaPlayer.StalledMedia</li><li>QMediaPlayer.BufferingMledia</li><li>QMediaPlayer.BufferedMedia</li><li>QMediaPlayer.EndOfMedia</li><li>QMediaPlayer.InvalidMedia。</li></ul></li><li><p>用error()方法获取播放器出错信息QMediaPlayer.Error,返回值可能是:</p><ul><li>QMediaPlayer.NoError</li><li>QMediaPlayer.ResourceError</li><li>QMediaPlayer.FormatError</li><li>QMediaPlayer.NetworkError</li><li>QMediaPlayer.AccessDeniedError</li></ul></li></ul><table><thead><tr><th>QMediaPlayer的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>[slot]setSource(source:Union[QUrl,str])</td><td>设置要播放的音频或视频源</td></tr><tr><td>source()</td><td>获取音频或视频地址QUrl</td></tr><tr><td>[slot]setSourceDevice(device:QlODevice, sourceUrl: Union[QUrl,str]=Default(QUrl))</td><td>设置音频或视频源</td></tr><tr><td>sourceDevice()</td><td>获取音频或视频源QIODevice</td></tr><tr><td>setActiveAudioTrack(index:int)</td><td>设置当前的声道</td></tr><tr><td>activeAudioTrack()</td><td>获取当前的声道</td></tr><tr><td>setActiveVideoTrack(index:int)</td><td>设置当前的视频轨道</td></tr><tr><td>activeVideoTrack()</td><td>获取当前的视频轨道</td></tr><tr><td>setActiveSubtitleTrack(index:int)</td><td>设置当前的子标题轨道</td></tr><tr><td>activeSubtitleTrack()</td><td>获取当前的子标题轨道</td></tr><tr><td>[slot]setPlaybackRate(rate:float)</td><td>设置播放速</td></tr><tr><td>playbackRate()</td><td>获取播放速率</td></tr><tr><td>isSeekable()</td><td>获取是否可以定位到某一播放时间</td></tr><tr><td>[slot]setPosition(position:int)</td><td>设置播放时间(毫秒)</td></tr><tr><td>position()</td><td>获取当前的播放时间(毫秒)</td></tr><tr><td>setAudioOutput(output:QAudioOutput)</td><td>设置播放音频的设备</td></tr><tr><td>setVideoOutput(QVideoWidget)</td><td>设置显示视频的控件</td></tr><tr><td>setVideoOutput(QGraphicsVideoItem)</td><td>设置显示视频的图项</td></tr><tr><td>setLoops(loops:int)</td><td>设置循环播放次数</td></tr><tr><td>loops()</td><td>获取循环播放次数</td></tr><tr><td>duration()</td><td>获取音频或视频可以播放的总时间(毫秒)</td></tr><tr><td>isAvailable()</td><td>获取平台是否支持该播放器</td></tr><tr><td>playbackState()</td><td>获取播放状态QMediaPlayer.PlaybackState</td></tr><tr><td>mediaStatus()</td><td>获取播放器所处的状态</td></tr><tr><td>error()</td><td>获取出错原因 QMediaPlayer.Error</td></tr><tr><td>errorString()</td><td>获取出错信息</td></tr><tr><td>hasAudio()、hasVideo()</td><td>获取多媒体中是否有音频或视频</td></tr><tr><td>bufferProgress()</td><td>获取缓冲百分比,100%时才可以播放</td></tr><tr><td>[slot]play()</td><td>播放音频或视频</td></tr><tr><td>[slot]pause()</td><td>暂停播放</td></tr><tr><td>[slot]stop()</td><td>停止播放并返回</td></tr></tbody></table><h6 id="播放器qmediaplayer-的信号" tabindex="-1"><a class="header-anchor" href="#播放器qmediaplayer-的信号" aria-hidden="true">#</a> 播放器QMediaPlayer 的信号</h6><p>播放器QMediaPlayer 的信号如表所示</p><table><thead><tr><th>QMediaPlayer的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>activeTracksChanged()</td><td>当前轨道发生改变时发送信号</td></tr><tr><td>audioOutputChanged()</td><td>音频输出设备发生改变时发送信号</td></tr><tr><td>bufferProgressChanged(float)</td><td>缓冲进度发生改变时发送信号</td></tr><tr><td>durationChanged(int)</td><td>播放总时间发生改变时发送信号</td></tr><tr><td>errorChanged()</td><td>出错信息发生改变时发送信号</td></tr><tr><td>errorOccurred(error:QMediaPlayer.Error,errorString:str)</td><td>播放出错时发送信号</td></tr><tr><td>hasAudioChanged(bool)</td><td>可播放音频的状态发生改变时发送信号</td></tr><tr><td>hasVideoChanged(bool)</td><td>可播放视频的状态发生改变时发送信号</td></tr><tr><td>loopsChanged()</td><td>播放次数发生改变时发送信号</td></tr><tr><td>MediaStatusChanged(QMediaPlayer.MediaStatus)</td><td>播放器所处的状态发生改变时发送信号</td></tr><tr><td>playbackRateChanged(float)</td><td>播放速度发生改变时发送信号</td></tr><tr><td>P]aybackStateChanged(QMediaPlayer.PlaybackState)</td><td>播放状态发生改变时发送信号</td></tr><tr><td>positionChanged(int)</td><td>播放位置发生改变时发送信号</td></tr><tr><td>scekableChanged(bool)</td><td>可定位播放状态发生改变时发送信号</td></tr><tr><td>sourceChanged(QUrl)</td><td>音频或视频源发生改变时发送信号</td></tr><tr><td>tracksChanged()</td><td>轨道发生改变时发送信号</td></tr><tr><td>videoOutputChanged()</td><td>关联的视频播放器发生改变时发送信号</td></tr></tbody></table><h5 id="音频输出和视频输出" tabindex="-1"><a class="header-anchor" href="#音频输出和视频输出" aria-hidden="true">#</a> 音频输出和视频输出</h5><p>播放器QMediaPlayer 需要关联音频输出设备和视频输出控件才能播放音频和视频音频输出.</p><ul><li><p>音频输出QAudioOutput:需要定义 QAudioOutput 的实例,QAudioOutput 用于连接 QMediaPlayer与音频输出设备；QAudioOutput 继承自QObject</p></li><li><p>视频控件 QVideoWidget :视频输出需要用到视频控件 QVideoWidget；QVideoWidget 继承自QWidget</p></li><li><p>视频图项 QGraphicsVideoItem:QGraphicsVideoItem 作为图项应用于场景中；QGraphicsVideoltem 继承自QGraphicsObject。</p></li></ul><p>用QAudioOutput、QVideoWidget 和 QGraphicsVideoItem 创建实例对象的方法如下所示,其中QAudioDevice 是本机上的音频输入输出设备。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QAudioOutput
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimediaWidgets <span class="token keyword">import</span> QVideoWidget<span class="token punctuation">,</span> QGraphicsVideoItem

QAudioOutput<span class="token punctuation">(</span>device<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QAudioDevice<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QAudioOutput<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QVideoWidget<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QGraphicsVideoItem<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QGraphicsItem<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="qaudiooutput、qvideowidget-和-qgraphicsvideoitem-的常用方法" tabindex="-1"><a class="header-anchor" href="#qaudiooutput、qvideowidget-和-qgraphicsvideoitem-的常用方法" aria-hidden="true">#</a> QAudioOutput、QVideoWidget 和 QGraphicsVideoItem 的常用方法</h6><ul><li>用setAspectRatioMode(mode:Qt.AspectRatioMode)方法设置视频控件所播放视频的长宽比模式,参数 mode 可取: <ul><li>Qt.IgnoreAspectRatio(不保持比例关系)</li><li>Qt.KeepAspectRatio(保持原比例关系)</li><li>Qt.KeepAspectRatioByExpanding(通过扩充保持原比例关系)</li></ul></li></ul><p>音频输出<strong>QAudioOutput</strong></p><table><thead><tr><th>方法及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>[slot]setVolume(volume:float)</td><td>设置音量,参数取值范围为 0~1</td></tr><tr><td>volume()</td><td>获取音量</td></tr><tr><td>[slot]setMuted(muted:bool)</td><td>设置是否静音</td></tr><tr><td>isMuted()</td><td>获取是否静音</td></tr><tr><td>[slot]setDevice(device: QAudioDevice)</td><td>设置音频设备</td></tr><tr><td>device()</td><td>获取音频设备</td></tr></tbody></table><p>视频控件 <strong>QVideoWidget</strong></p><table><thead><tr><th>[slot]setAspectRatioMode(mode:Qt.AspectRatioMode)</th><th>设置长宽比模式</th></tr></thead><tbody><tr><td>aspectRatioMode()</td><td>获取长宽比模式</td></tr><tr><td>[slot]setFullScreen(fullScreen:bool)</td><td>设置全屏显示</td></tr><tr><td>isFullScreen()</td><td>获取是否全屏显示</td></tr></tbody></table><p>视频图项 <strong>QGraphicsVideoItem</strong></p><table><thead><tr><th>boundingRect()</th><th>获取边界矩形QRectF</th></tr></thead><tbody><tr><td>setAspectRatioMode(mode: Qt.AspectRatioMode)</td><td>设置长宽比模式</td></tr><tr><td>aspectRatioMode()</td><td>获取长宽比模式</td></tr><tr><td>setOffset(offset:Union[QPointF,QPoint])</td><td>设置偏移量</td></tr><tr><td>offset()</td><td>获取偏移量QPointF</td></tr><tr><td>setSize(size: Union[QSizeF,QSize])</td><td>设置尺寸</td></tr><tr><td>size()</td><td>获取尺寸 QSizeF</td></tr></tbody></table><h6 id="qaudiooutputqvideowidget-和-qgraphicsvideoitem-的信号" tabindex="-1"><a class="header-anchor" href="#qaudiooutputqvideowidget-和-qgraphicsvideoitem-的信号" aria-hidden="true">#</a> QAudioOutputQVideoWidget 和 QGraphicsVideoItem 的信号</h6><p>QAudioOutput、QVideoWidget 和 QGraphicsVideoItem 的信号如表所示</p><table><thead><tr><th>类</th><th>信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>QAudioOutput</td><td>deviceChanged()</td><td>音频设备发生改变时发送信号</td></tr><tr><td>QAudioOutput</td><td>mutedChanged(muted: bool)</td><td>静音状态发生改变时发送信号</td></tr><tr><td>QAudioOutput</td><td>volumeChanged(volume: float)</td><td>音量发生改变时发送信号</td></tr><tr><td>QVideoWidget</td><td>aspectRatioModeChanged(mode)</td><td>长宽比模式发生改变时发送信号</td></tr><tr><td>QVideoWidget</td><td>fullScreenChanged(fullScreen:bool)</td><td>全屏状态发生改变时发送信号</td></tr><tr><td>QGraphics Videoltenm</td><td>nativeSizeChanged(size: QSizeF)</td><td>尺寸发生改变时发送信号</td></tr></tbody></table><h5 id="音频播放-qsoundeffect" tabindex="-1"><a class="header-anchor" href="#音频播放-qsoundeffect" aria-hidden="true">#</a> 音频播放 QSoundEffect</h5><p>QSoundEffect 用于播放低延迟无压缩音频文件,如wav 文件,并可呈现一些特殊效果</p><p>用QSoundEffect 创建音频播放实例对象的方法如下所示其中 parent 是继承自 QObject的实例对象,QAudioDevice 是机器上音频设备。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QSoundEffect

QSoundEffect<span class="token punctuation">(</span>audioDevice<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QAudioDevice<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QSoundEffect<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="qsoundeffect的常用方法" tabindex="-1"><a class="header-anchor" href="#qsoundeffect的常用方法" aria-hidden="true">#</a> QSoundEffect的常用方法</h6><p>QSoundEffect 的常用方法如表所示,主要方法介绍如下</p><ul><li>用setSource(url:Union[QUrl,str])方法设置音频源,参数 QUrl可以是指向网络的文件,也可以是本机文件; <ul><li>用source()方法获取音频源 QUrl。</li></ul></li><li>用setLoopCount(int)方法设置播放次数,如为0或1只播放一次,如果取QSoundEffect.Infinite 则无限次播放; <ul><li>用lopCount()方法获取播放次数;</li><li>用loopsRemaining)方法获取剩余播放次数。</li></ul></li><li>用play()方法开始播放</li><li>用stop()方法停止播放。 <ul><li>用status()方法获取当前的播放状态;返回值是枚举类型 QSoundEffect.Status.可取值有 : <ul><li>QSoundEffectNull</li><li>QSoundEffect.Loading</li><li>QSoundEffect.Ready</li><li>QSoundEffect.Error</li></ul></li></ul></li></ul><table><thead><tr><th>QSoundEflect的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setSource(url: Union[QUrl,str])</td><td>None</td><td>设置音频源</td></tr><tr><td>source()</td><td>QUrI</td><td>获取音频源</td></tr><tr><td>setAudioDevice(device:QAudioDevice)</td><td>None</td><td>设置音频设备</td></tr><tr><td>audioDevice()</td><td>QAudioDevice</td><td>获取音频设备</td></tr><tr><td>setLoopCount(loopCount; int)</td><td>None</td><td>设置播放次数</td></tr><tr><td>loopCount()</td><td>int</td><td>获取播放次数</td></tr><tr><td>loopsRemaining()</td><td>int</td><td>获取剩余的播放次数</td></tr><tr><td>setMuted(muted:bool)</td><td>None</td><td>设置静音</td></tr><tr><td>isMuted()</td><td>bool</td><td>获取是否是静音</td></tr><tr><td>setVolume(,volume:float)</td><td>None</td><td>设置音量</td></tr><tr><td>volume()</td><td>float</td><td>获取音量</td></tr><tr><td>[slot]play()</td><td>None</td><td>开始播放</td></tr><tr><td>isPlaying()</td><td>bo0l</td><td>获取是否正在播放</td></tr><tr><td>[slot]stop()</td><td>None</td><td>停止播放</td></tr><tr><td>isLoaded()</td><td>bool</td><td>获取是否已经加载声源</td></tr><tr><td>status()</td><td>QSoundEffect.Status</td><td>获取播放状态</td></tr><tr><td>[static]supportedMimeTypes()</td><td>:List[str]</td><td>获取支持的mime类型</td></tr></tbody></table><h6 id="qsoundeffect-的信号" tabindex="-1"><a class="header-anchor" href="#qsoundeffect-的信号" aria-hidden="true">#</a> QSoundEffect 的信号</h6><p>QSoundEffect 的信号如表所示</p><table><thead><tr><th>QSoundEffect的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>audioDeviceChanged()</td><td>音频设备发生改变时发送信号</td></tr><tr><td>loadedChanged()</td><td>加载状态发生改变时发送信号</td></tr><tr><td>loopCountChanged()</td><td>循环次数发生改变时发送信号</td></tr><tr><td>loopsRemainingChanged()</td><td>剩余循环次数发生改变时发送信号</td></tr><tr><td>mutedChanged()</td><td>静音状态发生改变时发送信号</td></tr><tr><td>playingChanged()</td><td>播放状态发生改变时发送信号</td></tr><tr><td>sourceChanged()</td><td>音频源发生改变时发送信号</td></tr><tr><td>statusChanged()</td><td>状态发生改变时发送信号</td></tr><tr><td>volumeChanged()</td><td>音量发生改变时发送信号</td></tr></tbody></table><h5 id="动画播放-qmovie" tabindex="-1"><a class="header-anchor" href="#动画播放-qmovie" aria-hidden="true">#</a> 动画播放 QMovie</h5><p>QMovie用于播放无声音的静态动画,例如 gif文件它在 PySide6Gui模块中,需要用QLabel的 setMovie(QMovie)方法与 QLabel 相关联来播放动画。</p><p>用QMovie类创建播放动画的实例对象的方法如下,其中 parent 是继承自QObiect的实例对象</p><p>可以用文件名或指向图形动画的 QIODevice 设备来指定动画源;</p><p>format 指定动画来源的格式取值类型是QByteArray或bytes,例如 bgif&#39;b&#39;webp&#39;如果不指定格式系统会自行选择合适的格式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QMovie

QMovie<span class="token punctuation">(</span>device<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QIODevice<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QByteArray<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token operator">=</span> Default<span class="token punctuation">(</span>QByteArray<span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QMovie<span class="token punctuation">(</span>fileName<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QByteArray<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token operator">=</span> Default<span class="token punctuation">(</span>QByteArray<span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QMovie<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="qmovie的常用方法" tabindex="-1"><a class="header-anchor" href="#qmovie的常用方法" aria-hidden="true">#</a> QMovie的常用方法</h6><p>QMovie 的常用方法如表所示,主要方法介绍如下</p><ul><li><p>用setFileName(fileName;str)或 setDevice(device:QIODevice)方法设置动画源;</p><ul><li>用isValid()方法获取动画源是否有效。</li></ul></li><li><p>用setFormat(format;Union[QByteArray,bytes])方法设置动画源的格式,例如setFormat(b&#39;gif&#39;)。</p></li><li><p>用start()方法开始播放动画</p><ul><li>用stop()方法停止播放</li><li>用pause(True)方法暂停播放；用pause(False)方法继续播放;</li></ul></li><li><p>用setSpeed(percentSpeed;int)方法设置播放速度,参数是正常播放速度的百分比值,例如 setSpeed(200)表示播放速度是原播放速度的2倍。</p></li><li><p>用setCacheMode(QMovieCacheMode)方法设置播放时是否进行缓存参数可以取QMovie.CacheNone或 QMovie.CacheAll.</p></li><li><p>用jumpToFrame(int)方法可以跳转到指定的帧;</p><ul><li>用jumpToNextFrame()方法跳转到下一帧;</li><li>当跳转到所需要的帧后,用currentImage()方法或currentPixmap()方法可以获取帧的图像</li></ul></li><li><p>用state()方法可以获得当前的播放状态,播放状态有:</p><ul><li>QMovie.NoRunning</li><li>QMovie,Paused</li><li>QMove.Running</li></ul></li><li><p>用lastErrorString()方法取最近出错的信息,该信息可读;</p><ul><li>用lastError()方法获取出错信息,返回值是QImageReader.ImageReaderError 的枚举值可取以下值,分别对应值0~4: <ul><li>QImageReader.UnknownError</li><li>QlmageReader.FileNotFoundError</li><li>QlmageReader.DeviceError</li><li>QImageReader.UnsupportedFormatError</li><li>QImageReader.InvalidDataError</li></ul></li></ul></li></ul><table><thead><tr><th>setFileName(fileName: str)</th><th>设置动画文件</th></tr></thead><tbody><tr><td>fileName()</td><td>获取动画文件名</td></tr><tr><td>setDevice(device: QIODevice)</td><td>设置设备</td></tr><tr><td>device()</td><td>获取设备QIODevice</td></tr><tr><td>setFormat(format: Union[QByteArray,bytes])</td><td>设置动画格式</td></tr><tr><td>format()</td><td>获取动画格式QByteArray</td></tr><tr><td>[static]supportedFormats()</td><td>获取支持的格式List[QByteArray]</td></tr><tr><td>setScaledSize(QSize)</td><td>设置尺寸</td></tr><tr><td>[slot]setSpeed(percentSpeed: int)</td><td>设置相对正常播放速度的百分比</td></tr><tr><td>speed()</td><td>获取正常播放速度的百分比</td></tr><tr><td>setCacheMode(QMovie.CacheMode)</td><td>设置缓冲模式</td></tr><tr><td>setBackgroundColor(Union[QColor,Qt.GlobalColor,str])</td><td>设置背景色</td></tr><tr><td>backgroundColor()</td><td>获取背景色QColor</td></tr><tr><td>[slot]start()</td><td>开始播放动画</td></tr><tr><td>[slot]stop()</td><td>停止播放动画</td></tr><tr><td>[slot]setPaused(paused, bool)</td><td>暂停或继续播放动画</td></tr><tr><td>state()</td><td>获取播放状态QMovie.MovieState</td></tr><tr><td>currentFrameNumber()</td><td>获取当前帧</td></tr></tbody></table><h6 id="qmovie的信号" tabindex="-1"><a class="header-anchor" href="#qmovie的信号" aria-hidden="true">#</a> QMovie的信号</h6><p>QMovie的信号如表所示</p><table><thead><tr><th>QMovie的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>currentImage()</td><td>获取当前帧的图像QImage</td></tr><tr><td>currentPixmap()</td><td>获取当前帧的图像 QPixmap</td></tr><tr><td>frameCount()</td><td>获取总帧数</td></tr><tr><td>frameRect()</td><td>获取尺寸QRect</td></tr><tr><td>isValid()</td><td>获取动画源是否有效</td></tr><tr><td>jumpToFrame(int)</td><td>跳转到指定的帧,成功则返回True</td></tr><tr><td>[slot]jumpToNextFrame()</td><td>跳转到下一帧,成功则返回True</td></tr><tr><td>lastErrorString()</td><td>获取最近的出错信息</td></tr><tr><td>lastError()</td><td>获取出错信息</td></tr><tr><td>loopCount()</td><td>获取循环播放次数</td></tr><tr><td>nextFrameDelay()</td><td>获取播放下一帧的等待时间(毫秒)</td></tr></tbody></table><h6 id="qmovie的应用实例" tabindex="-1"><a class="header-anchor" href="#qmovie的应用实例" aria-hidden="true">#</a> QMovie的应用实例</h6><p>运行下面的程序,通过双击窗口,打开动画文件并播放动画</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/4 0:54</span>
<span class="token comment"># File_name: 01-QMovie的应用实例.py</span>

<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QHBoxLayout<span class="token punctuation">,</span> QFileDialog<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QLabel
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QMovie


<span class="token keyword">class</span> <span class="token class-name">MyLabel</span><span class="token punctuation">(</span>QLabel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">mouseDoubleClickEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>
        filename<span class="token punctuation">,</span> fil <span class="token operator">=</span> QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span>
                                                    caption<span class="token operator">=</span><span class="token string">&quot;选择动画文件&quot;</span><span class="token punctuation">,</span>
                                                    <span class="token builtin">dir</span><span class="token operator">=</span><span class="token string">&quot;../../../../Resources/images&quot;</span><span class="token punctuation">,</span>
                                                    <span class="token builtin">filter</span><span class="token operator">=</span><span class="token string">&quot;动画文件(*.gif *.webp);;所有文件(*.*)&quot;</span><span class="token punctuation">)</span>
        movie <span class="token operator">=</span> QMovie<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        movie<span class="token punctuation">.</span>setBackgroundColor<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>GlobalColor<span class="token punctuation">.</span>gray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> movie<span class="token punctuation">.</span>isValid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>setMovie<span class="token punctuation">(</span>movie<span class="token punctuation">)</span>
            movie<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>label <span class="token operator">=</span> MyLabel<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">&quot;双击我,打开动画文件播放动画!&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>
        H <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        H<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="录制音频和视频及拍照" tabindex="-1"><a class="header-anchor" href="#录制音频和视频及拍照" aria-hidden="true">#</a> 录制音频和视频及拍照</h4><h5 id="多媒体设备qmediadevices" tabindex="-1"><a class="header-anchor" href="#多媒体设备qmediadevices" aria-hidden="true">#</a> 多媒体设备QMediaDevices</h5><p>多媒体设备是指本机中的音频输入设备(如麦克风),音频输出设备(如音箱、头戴耳机)和视频输入设备(如摄像头)。</p><p>多媒体设备通过 QMediaDevices 类提供的方法来获取</p><ul><li>音频输人输出设备类QAudioDevice</li><li>视频输入设备类QCameraDevice</li></ul><p>用QMediaDevices QAudioDevice和QCameraDevice 创建设备实例的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaDevices<span class="token punctuation">,</span> QAudioDevice<span class="token punctuation">,</span> QCameraDevice

QMediaDevices<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QAudioDevice<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QAudioDevice<span class="token punctuation">(</span>other<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QAudioDevice<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QCameraDevice<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QCameraDevice<span class="token punctuation">(</span>other<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QCameraDevice<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="qmediadevices-qaudiodevice和qcameradevice-的常用方法" tabindex="-1"><a class="header-anchor" href="#qmediadevices-qaudiodevice和qcameradevice-的常用方法" aria-hidden="true">#</a> QMediaDevices QAudioDevice和QCameraDevice 的常用方法</h6><p>QMediaDevices QAudioDevice和QCameraDevice 的常用方法分别如表所示</p><p>主要是先用QMediaDevices 提供的静态方法获取本机上的音频设备和视频输人设备,然后用QAudioDevice QCameraDevice 提供的方法分别获取音频设备和视频输人设备的详细信息。</p><p>多媒体设备<strong>QMediaDevices</strong></p><table><thead><tr><th>QMediaDevices的方法</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>[static]audioInputs()</td><td>List[QAudioDeviceJ</td><td>获取音频输入设备</td></tr><tr><td>[static]defaultAudioInput()</td><td>QAudioDevice</td><td>获取默认的音频输入设备</td></tr><tr><td>[static]audio()utputs()</td><td>ListCQAudioDevice]</td><td>获取音频输出设备</td></tr><tr><td>[static]defaultAudioOutput()</td><td>QAudioDevice</td><td>获取默认的音频输出设备</td></tr><tr><td>[static]videoInputs()</td><td>List[QCameraDevice]</td><td>获取视频输人设备</td></tr><tr><td>[static]defaultVideoInput()</td><td>QCameraDevice</td><td>获取默认的视频输人设备</td></tr></tbody></table><p>音频输人输出设备类<strong>QAudioDevice</strong></p><table><thead><tr><th>QAudioDevice的方法</th><th>返回值的类型</th><th>说 明</th></tr></thead><tbody><tr><td>description()</td><td>Str</td><td>获取音频设备的信息</td></tr><tr><td>id()</td><td>QByteArray</td><td>获取音频设备的识别号</td></tr><tr><td>isDefault()</td><td>bool</td><td>获取是否是默认的音频设备</td></tr><tr><td>isFormatSupported(QAudioFormat)</td><td>bool</td><td>获取音频设备是否支持某种音频格式</td></tr><tr><td>isNull()</td><td>bool</td><td>获取设备是否有效</td></tr><tr><td>maximumChannelCount()</td><td>int</td><td>获取音频设备支持的最大通道数</td></tr><tr><td>minimumChannelCount()</td><td>int</td><td>获取音频设备支持的最小通道数</td></tr><tr><td>maximumSampleRate()</td><td>int</td><td>获取音频设备支持的最大采样率(Hz)</td></tr><tr><td>minimumSampleRate()</td><td>int</td><td>获取音频设备支持的最小采样率(Hz)</td></tr><tr><td>mode()</td><td>QAudioDevice.Mode</td><td>获取音频设备是输入还是输出设备,返回值可取 <br>QAudioDevice.Null(无效设备)<br>QAudioDevice.Input(输人设备)<br>QAudioDevice.Output(输出 设备)</td></tr><tr><td>preferredFormat()</td><td>QAudioFormat</td><td>获取音频设备的默认音频格式</td></tr><tr><td>supportedSampleFormats()</td><td>List[QAudioFormat.SampleFormat]</td><td>获取音频设备支持的采样格式,格式有<br>QAudioFormat.UInt8<br>QAudioFormat.Intl6<br>QAudioFormat.Int32<br>QAudioFormat.Float<br>QAudioFormat.Unknown</td></tr></tbody></table><p>视频输入设备类<strong>QCameraDevice</strong></p><table><thead><tr><th>QCameraDevice的方法</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>description()</td><td>Str</td><td>获取视频输入设备的信息</td></tr><tr><td>id()</td><td>QByteArray</td><td>获取视频输入设备的识别号</td></tr><tr><td>isDefault()</td><td>bool</td><td>获取是否是默认的视频输入设备</td></tr><tr><td>isNull()</td><td>bool</td><td>获取视频输入设备是否有效</td></tr><tr><td>photoResolutions()</td><td>List[QSize]</td><td>获取视频输入设备的分辨率</td></tr><tr><td>position()</td><td>QCameraDevice, Position</td><td>获取视频输入设备的位置,返回值可取 QCarmeraDevice.BackFace(后置摄像头)、QCameraDevice.FrontFace(前置摄像头)或 QCameraDevice.UnspecifiedPosition(位 置不确定)</td></tr><tr><td>videoFormats()</td><td>List[QCameraFormat]</td><td>获取视频输入设备支持的格式</td></tr></tbody></table><h6 id="信号" tabindex="-1"><a class="header-anchor" href="#信号" aria-hidden="true">#</a> 信号</h6><p>QMediaDevices的信号有</p><table><thead><tr><th>信号</th><th>说明</th></tr></thead><tbody><tr><td>audioInputsChanged()</td><td>当音频输入设备发生改变时发送信号。</td></tr><tr><td>audioOutputsChanged()</td><td>音频输出设备发生改变时发送信号。</td></tr><tr><td>videoInputsChanged()</td><td>视频输入设备发生改变时发送信号。</td></tr></tbody></table><h5 id="音频接口qaudioinput-和视频接口qcamera" tabindex="-1"><a class="header-anchor" href="#音频接口qaudioinput-和视频接口qcamera" aria-hidden="true">#</a> 音频接口QAudioInput 和视频接口QCamera</h5><p>要录制音频和视频,需要定义音频设备的接口 QAudioInput 和视频设备的接口QCamera后,才能调用音频设备和视频设备进行录制</p><p>QAudioInput 和 QCamera 相当于音频和视频输人通道。</p><ul><li>QAudioInput 是机器上的音频输人,例如内置麦克风或头戴麦克风</li><li>QCamera 是机器上的摄像头或外接相机。</li></ul><p>利用QAudiolnput 和 QCamera 创建音频设备和视频设备接口的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QAudioInput<span class="token punctuation">,</span> QCamera

QAudioInput<span class="token punctuation">(</span>deviceInfo<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QAudioDevice<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QAudioInput<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QCamera<span class="token punctuation">(</span>cameraDevice<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QCameraDevice<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QCamera<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QCamera<span class="token punctuation">(</span>position<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QCameraDevice<span class="token punctuation">.</span>Position<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="音频接口qaudioinput的常用方法" tabindex="-1"><a class="header-anchor" href="#音频接口qaudioinput的常用方法" aria-hidden="true">#</a> 音频接口QAudioInput的常用方法</h6><p>音频接口 QAudioInput 的常用方法如表所示,主要方法:</p><ul><li>用setDevice(device:QAudioDevice)方法设置音频设备;</li><li>用setMuted(muted:bool)方法设置静音;</li><li>用setVolume(volume:float)方法设置音量,音量参数 volume 的取值范围是0~1。</li></ul><table><thead><tr><th>QAudioInput的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setDevice(device:QAudioDevice)</td><td>None</td><td>设置音频设备</td></tr><tr><td>device()</td><td>QAudioDevice</td><td>获取音频设备</td></tr><tr><td>setMuted(muted:bool)</td><td>None</td><td>设置是否静音</td></tr><tr><td>isMuted()</td><td>bool</td><td>获取是否静音</td></tr><tr><td>setVolume(volume: float)</td><td>None</td><td>设置音量</td></tr><tr><td>volume()</td><td>float</td><td>获取音量</td></tr></tbody></table><h6 id="音频接口qaudioinput的信号" tabindex="-1"><a class="header-anchor" href="#音频接口qaudioinput的信号" aria-hidden="true">#</a> 音频接口QAudioInput的信号</h6><table><thead><tr><th>信号</th><th>方法</th></tr></thead><tbody><tr><td>deviceChanged()</td><td>当设备发生改变时发送信号。</td></tr><tr><td>mutedChanged(muted:bool)</td><td>静音状态发生改变时发送信号。</td></tr><tr><td>volumeChanged(volume: float)</td><td>音量发生改变时发送信号。</td></tr></tbody></table><h6 id="视频接口-qcamera的常用方法" tabindex="-1"><a class="header-anchor" href="#视频接口-qcamera的常用方法" aria-hidden="true">#</a> 视频接口 QCamera的常用方法</h6><p>视频接口 QCamera 的常用方法如表所示,主要方法介绍如下</p><table><thead><tr><th>QCamera的方法及参数类型</th><th>返回值的类型</th><th>说 明</th></tr></thead><tbody><tr><td>setCameraDevice(cameraDevice: QCameraDevice)</td><td>None</td><td>设置视频设备</td></tr><tr><td>cameraDevice()</td><td>QCameraDevice</td><td>获取视频设备</td></tr><tr><td>[slot]start()</td><td>None</td><td>开启相机</td></tr><tr><td>[slot]stop()</td><td>None</td><td>关闭相机</td></tr><tr><td>[slot]setActive(active: bool)</td><td>None</td><td>设置是否打开视频设备</td></tr><tr><td>isActive()</td><td>bool</td><td>获取相机是否启用</td></tr><tr><td>isAveilsble()</td><td>bool</td><td>获取相机是否可用</td></tr><tr><td>setCameraFormat(format: QCameraFormat)</td><td>None</td><td>设置视频格式</td></tr><tr><td>cameraFormat()</td><td>QCameraFormat</td><td>获取视频格式</td></tr><tr><td>captureSession()</td><td>QMediaCaptureSession</td><td>获取与 QCamera关联的媒体捕 获器</td></tr><tr><td>supportedFeatures()</td><td>QCamera.Features</td><td>获取支持的特征</td></tr><tr><td>[slot]setExposureMode(mode: QCamera.ExposureMode)</td><td>None</td><td>设置曝光模式</td></tr><tr><td>isExposureModeSupported(mode: QCamera.ExposureMode)</td><td>bool</td><td>获取是否支持某种曝光模式</td></tr><tr><td>[slot]setAutoExposureTime()</td><td>None</td><td>打开自动计算曝光时间</td></tr><tr><td>exposureTime()</td><td>float</td><td>获取曝光时间</td></tr><tr><td>[slot]setManualExposureTime(float)</td><td>None</td><td>设置曝光时间(秒)</td></tr><tr><td>manualExposureTime()</td><td>float</td><td>获取自定义曝光时间</td></tr><tr><td>[slot]setAutoIsoSensitivity()</td><td>None</td><td>根据曝光值开启自动选择光敏感值</td></tr><tr><td>isoSensitivity()</td><td>int</td><td>获取光敏感值</td></tr><tr><td>[slot]setManualIsoSensitivity(iso: int)</td><td>None</td><td>设置自定义光敏感值</td></tr><tr><td>manualIsoSensitivity()</td><td>int</td><td>获取自定义的光敏感值</td></tr><tr><td>[slot]setExposureCompensation(ev: float)</td><td>None</td><td>设置曝光补偿(EV值)</td></tr><tr><td>exposureCompensation()</td><td>float</td><td>获取曝光补偿</td></tr><tr><td>I slot]setFlashMode(QCamera.FlashMode)</td><td>None</td><td>设置快闪模式</td></tr><tr><td>flashMode()</td><td>QCamera.FlashMode</td><td>获取快闪模式</td></tr><tr><td>isFlashModeSupported(mode: QCamera.FlashMode)</td><td>bool</td><td>获取是否支持某种快闪模式</td></tr><tr><td>isFlashReady()</td><td>bool</td><td>获取是否可以用快闪</td></tr><tr><td>setFocusMode(QCamera.FocusMode)</td><td>None</td><td>设置对焦模式</td></tr><tr><td>focusMode()</td><td>QCamera.FocusMode</td><td>获取对焦模式</td></tr><tr><td>isFocusModeSupported(mode: QCamera.FocusMode)</td><td>bo01</td><td>获取是否支持某种焦点模式</td></tr><tr><td>setFocusDistance(d: float)</td><td>None</td><td>设置自定义焦距,0表示最近的点,1 表示无限远</td></tr><tr><td>focusDistance()</td><td>float</td><td>获取自定义焦距</td></tr><tr><td>setCustomFocusPoint(point: Union[QPointF,QPoint])</td><td>None</td><td>设置自定义焦点位置</td></tr><tr><td>customFocusPoint()</td><td>QPointF</td><td>获取自定义焦点</td></tr><tr><td>focusPoint()</td><td>QPointF</td><td>获取焦点</td></tr><tr><td>[slot]setTorchMode(QCamera.TorchMode)</td><td>None</td><td>设置辅助光源模式</td></tr><tr><td>torchMode()</td><td>QCamera.TorchMode</td><td>获取辅助光源模式</td></tr><tr><td>isTorchModeSupported(mode: QCamera.TorehMode)</td><td>boul</td><td>获取是否支持某种辅助光源模式</td></tr><tr><td>[slot]setWhiteBalanceMode(mode: QCamera.WhiteBalanceMode)</td><td>None</td><td>设置白平衡模式</td></tr><tr><td>isWhiteBalanceModeSupported(QCamera.WhiteBalanceMode)</td><td>bool</td><td>获取是否支持某种白平衡模式</td></tr><tr><td>whiteBalanceMode()</td><td>QCamera.WhiteBalanceMole</td><td>获取白平衡模式</td></tr><tr><td>[slot]setColorTemperature(int)</td><td>None</td><td>设置颜色温度(K温度)</td></tr><tr><td>colorTemperature()</td><td>int</td><td>获取颜色温度</td></tr><tr><td>setZoomFactor(factor:float)</td><td>None</td><td>设置缩放系数</td></tr><tr><td>zoomFactor()</td><td>float</td><td>获取缩放系数</td></tr><tr><td>[slot]zoomTo(zoom:float, rate: float)</td><td>None</td><td>根据速率设置缩放系数</td></tr><tr><td>maximumExposureTime()</td><td>float</td><td>获取最大的曝光时间</td></tr><tr><td>minimumExposureTime()</td><td>float</td><td>获取最小的曝光时间</td></tr><tr><td>maximumIsoSensitivity()</td><td>int</td><td>获取最大的光敏感值</td></tr><tr><td>minimumIsoSensitivity()</td><td>int</td><td>获取最小的光敏感值</td></tr><tr><td>maximumZoomFactor()</td><td>float</td><td>获取最大的放大系数</td></tr><tr><td>minimumZoomFactor()</td><td>float</td><td>获取最小的放大系数</td></tr><tr><td>errorString()</td><td>str</td><td>获取出错信息</td></tr><tr><td>error()</td><td>QCamera.Error</td><td>获取出错类型</td></tr></tbody></table><ul><li><p>用setCameraDevice(cameraDevice:QCameraDevice)方法为视频接口设置视频设备;</p></li><li><p>用start()方法或 setActive(true)方法开启视频设备;用stop()方法或setActive(false)方法停止视频设备。</p></li><li><p>用supportedFeatures()方法获取相机支持的特征,返回值如表所示:</p><table><thead><tr><th>相机的特征值</th><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>QCamera.Feature.ColorTemperature</td><td>0x1</td><td>相机支持色温</td></tr><tr><td>QCamera.Feature.ExposureCompensation</td><td>0x2</td><td>相机支持曝光补偿</td></tr><tr><td>QCamera.Feature.IsoSensitivity</td><td>0x4</td><td>相机支持自定义光般感值</td></tr><tr><td>QCamera.Feature.ManualExposureTime</td><td>0x8</td><td>相机支持自定义曝光时间</td></tr><tr><td>QCamera.Feature,CustomFocusPoint</td><td>0x10</td><td>相机支持自定义焦点</td></tr><tr><td>QCamera.Feature.FocusDistance</td><td>0x20</td><td>相机支持自定义焦距</td></tr></tbody></table></li><li><p>用setExposureMode(mode;QCamera.ExposureMode)方法设置相机的曝光模式参数 mode 的取值是 QCamera.ExposureMode 的枚举值,可取的值如表所示;</p><table><thead><tr><th>QCamera.ExposureMode的枚举值</th><th>值</th><th>模式</th><th>QCamera.ExposureMode的枚举值</th><th>值</th><th>模式</th></tr></thead><tbody><tr><td>QCamera.ExposureAuto</td><td>0</td><td>自动</td><td>QCamera.ExposureNightPortrait</td><td>9</td><td>夜晚</td></tr><tr><td>QCamera.ExposureManual</td><td>1</td><td>手动</td><td>QCamera.ExposureTheatre</td><td>10</td><td>剧院</td></tr><tr><td>QCamera.ExposurePortrait</td><td>2</td><td>人物</td><td>QCamera.ExposureSunset</td><td>11</td><td>傍晚</td></tr><tr><td>QCamera.ExposureNight</td><td>3</td><td>夜晚</td><td>QCamera.ExposureSteadyPhoto</td><td>12</td><td>固定</td></tr><tr><td>QCamera.ExposureSports</td><td>4</td><td>运动</td><td>QCamera.ExposureFireworks</td><td>13</td><td>火景</td></tr><tr><td>QCamera.ExposureSnow</td><td>5</td><td>雪景</td><td>QCamera.ExposureParty</td><td>14</td><td>宴会</td></tr><tr><td>QCamera.ExposureBeach</td><td>6</td><td>海景</td><td>QCamera.ExposureCandlelight</td><td>15</td><td>烛光</td></tr><tr><td>QCamera.ExposureAction</td><td>7</td><td>动作</td><td>QCamera.ExposureBarcode</td><td>16</td><td>条码</td></tr><tr><td>QCamera.ExposureLandscape</td><td>8</td><td>风景</td><td></td><td></td><td></td></tr></tbody></table><ul><li>用isExposureModeSupported(mode:QCamera,ExposureMode)方法获取是否支持某种曝光模式。</li></ul></li><li><p>用setFlashMode(mode:QCameraFlashMode)方法设置相机的快闪模式,参数mode的取值是QCamera,FlashMode 的枚举值,可取:</p><blockquote><ul><li>QCamera.FlashOff</li><li>QCamera.FlashOn</li><li>QCamera.FlashAuto;</li></ul></blockquote><ul><li>用isFlashModeSupported(mode:QCamera.FlashMode)方法获取是否支持某种快闪模式。</li></ul></li><li><p>用setFocusMode(mode;QCamera,FocusMode)方法设置对焦模式,参数 mode的取值是QCamera.FocusMode 的枚举值,可取的值如表所示。</p><table><thead><tr><th>QCamera.FocusMode的枚举值</th><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>QCamera.FocusModeAuto</td><td>0</td><td>连续自动对焦模式</td></tr><tr><td>QCamera.FocusModeAutoNear</td><td>1</td><td>对近处物体连续自动对焦模式</td></tr><tr><td>QCamera.FocusModeAutoFar</td><td>2</td><td>对远处物体连续自动对焦模式</td></tr><tr><td>QCamera.FocusModeHyperfocal</td><td>3</td><td>对超过焦距范围的物体采用最大景深值</td></tr><tr><td>QCamera.FocusModeInfinity</td><td>4</td><td>对无限远对焦模式</td></tr><tr><td>QCamera.FocusModeManual</td><td>5</td><td>手动或固定对焦模式</td></tr></tbody></table></li><li><p>用setTorchMode(mode:QCameraTorchMode)方法设置辅助光源模式,在光线不强时可以设置该模式,并会覆盖快闪模式,参数 mode可取值为 QCamera.TorchOffQCamera,TorchOn 或QCamera,TorchAuto。</p></li><li><p>用setWhiteBalanceMode(mode;QCamera.WhiteBalanceMode)方法设置白平衡模式,白平衡是描述红、绿、蓝三基色混合生成后白色精确度的一项指标。</p><ul><li>在房间里的日光灯下拍摄的影像会显得发绿</li><li>在室内钨丝灯光下拍摄出来的景物会偏黄</li><li>而在日光阴影处拍摄到的照片则偏蓝</li></ul><p>白平衡的作用是不管在任何光源下都能将白色物体还原为白色。参数 mode是 QCamera,WhiteBalanceMode 的枚举值可取的值如表所示。</p><table><thead><tr><th>QCamera.WhiteBalanceMode的枚举值</th><th>值</th><th>模式</th><th>QCamera.WhiteBalanceMode的枚举值</th><th>值</th><th>模式</th></tr></thead><tbody><tr><td>QCamera.WhiteBalanceAuto</td><td>0</td><td>自动</td><td>QCamera.WhiteBalanceSunlight</td><td>2</td><td>阳光</td></tr><tr><td>QCamera.WhiteBalanceManual</td><td>1</td><td>手动</td><td>QCamera.WhiteBalanceCloudy</td><td>3</td><td>云</td></tr><tr><td>QCamera.WhiteBalanceShade</td><td>4</td><td>阴影</td><td>QCamera.WhiteBalanceFlash</td><td>7</td><td>快闪</td></tr><tr><td>QCamera.WhiteBalanceTungsten</td><td>5</td><td>鸨灯</td><td>QCamera.WhiteBalanceSunset</td><td>8</td><td>日落</td></tr><tr><td>QCamera.WhiteBalanceFluorescent</td><td>6</td><td>荧光灯</td><td></td><td></td><td></td></tr></tbody></table><ul><li>在手动模式下,需要用setColorTemperature(colorTemperature:int)方法设置色温</li></ul></li><li><p>用errorString()方法取可读的出错信息,用error()方法取出错类型返回值为QCamera.NoError 或QCamera, CameraError。</p></li></ul><h6 id="视频接口-qcamera的信号" tabindex="-1"><a class="header-anchor" href="#视频接口-qcamera的信号" aria-hidden="true">#</a> 视频接口 QCamera的信号</h6><p>视频接口QCamera 的信号如表所示。</p><table><thead><tr><th>QCanera的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>activeChanged(bool)</td><td>照相机启动或停止时发送信号</td></tr><tr><td>cameraDeviceChanged()</td><td>照相设备发生改变时发送信号</td></tr><tr><td>cameraFormatChanged()</td><td>格式发生改变时发送信号</td></tr><tr><td>colorTemperatureChanged()</td><td>色温发生改变时发送信号</td></tr><tr><td>customFocusPointChanged()</td><td>自定义焦点发生改变时发送信号</td></tr><tr><td>exposureCompensationChanged(value: float)</td><td>曝光补偿发生改变时发送信号</td></tr><tr><td>exposureModeChanged()</td><td>曝光模式发生改变时发送信号</td></tr><tr><td>exposureTimeChanged(speed:float)</td><td>曝光时间发生改变时发送信号</td></tr><tr><td>flashModeChanged()</td><td>快闪模式发生改变时发送信号</td></tr><tr><td>flashReady(ready:bool)</td><td>可以快闪时发送信号</td></tr><tr><td>focusDistanceChanged(float)</td><td>焦距发生改变时发送信号</td></tr><tr><td>focusPointChanged()</td><td>焦点发生改变时发送信号</td></tr><tr><td>isoSensitivityChanged(value:int)</td><td>光敏感值发生改变时发送信号</td></tr><tr><td>manualExposureTimeChanged(speed:float)</td><td>自定义曝光时间发生改变时发送信号</td></tr><tr><td>manualIsoSensitivityChanged(int)</td><td>自定义光敏感值发生改变时发送信号</td></tr><tr><td>maximumZoomFactorChanged(float)</td><td>最大缩放系数发生改变时发送信号</td></tr><tr><td>minimumZoomFactorChanged(float)</td><td>最小缩放系数发生改变时发送信号</td></tr><tr><td>supportedFeaturesChanged()</td><td>所支持的特征发生改变时发送信号</td></tr><tr><td>torchModeChanged()</td><td>辅助光源模式发生改变时发送信号</td></tr><tr><td>whiteBalanceModeChanged()</td><td>白平衡发生改变时发送信号</td></tr><tr><td>zoomFactorChanged(float)</td><td>缩放系数发生改变时发送信号</td></tr><tr><td>errorChanged()</td><td>错误状态发生改变时发送信号</td></tr><tr><td>errorOccurred(error:QCamera.Error,errorString: str)</td><td>出现错误时发送信号</td></tr></tbody></table><h5 id="媒体捕获器-qmediacapturesession" tabindex="-1"><a class="header-anchor" href="#媒体捕获器-qmediacapturesession" aria-hidden="true">#</a> 媒体捕获器 QMediaCaptureSession</h5><p>媒体捕获器 QMediaCaptureSession 是音频数据和视频数据的集散地它接收从QAudioInput 和 QCamera 传递过来的音频和视频</p><ul><li>然后将音频转发给 QAudioOutput 播放音频</li><li>将视频转发给 QVideoWidegt 或 QGraphicsVideoltem 播放视频</li><li>将音频和视频转发给 QMdiaRecorder 录制音频和视频,转发给 QImageCapture 实现拍照功能。</li></ul><p>用QMediaCaptureSession 创建实例对象的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaCaptureSession

QMediaCaptureSession<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="媒体捕获器qmediacapturesession-的常用方法" tabindex="-1"><a class="header-anchor" href="#媒体捕获器qmediacapturesession-的常用方法" aria-hidden="true">#</a> 媒体捕获器QMediaCaptureSession 的常用方法</h6><p>媒体捕获器QMediaCaptureSession 的常用方法如表所示</p><ul><li>用setAudioInput(input;QAudioInput)方法和 setCamera(camera:QCamera)方法分别设晋音频输入和视频输入;</li><li>用setAudioOutput(output;QAudioOutput)方法和 setVideoOutput(output:QObject)方法分别设置音频输出设备和视频输出控件以便播放音频和视频;</li><li>用setRecorder(recorder: QMediaRecorder)方法设置媒体记录器,以便录制音频和视频;</li><li>用setImageCapture(imageCapture:QImageCapture)方法设置图像捕获器以便实现拍照功能。</li></ul><table><thead><tr><th>QMediaCaptureSession的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setAudioInput(input: QAudioInput)</td><td>None</td><td>设置音频输入</td></tr><tr><td>audioInput()</td><td>QAudioInput</td><td>获取音频输人</td></tr><tr><td>setAudioOutput(output: QAudioOutput)</td><td>None</td><td>设置音频输出</td></tr><tr><td>audioOutput()</td><td>QAudioOutput</td><td>获取音频输出</td></tr><tr><td>setCamera(camera:QCamera)</td><td>None</td><td>设置视频接口</td></tr><tr><td>camera()</td><td>QCamera</td><td>获取视频接口</td></tr><tr><td>setImageCapture(imageCapture:QImageCapture)</td><td>None</td><td>设置图像捕获器</td></tr><tr><td>imageCapture()</td><td>QImageCapture</td><td>获取图像捕获器</td></tr><tr><td>setRecorder(recorder:QMediaRecorder)</td><td>None</td><td>设置媒体记录器</td></tr><tr><td>recorder()</td><td>QMediaRecorder</td><td>获取媒体记录器</td></tr><tr><td>setVideoOutput(output: QObject)</td><td>None</td><td>设置视频输出</td></tr><tr><td>videoOutput()</td><td>QObject</td><td>获取视频输出</td></tr><tr><td>setVideoSink(sink:QVideoSink)</td><td>None</td><td>设置视频接收器</td></tr><tr><td>videoSink()</td><td>QVideoSink</td><td>获取视频接收器</td></tr></tbody></table><h6 id="媒体捕获器qmediacapturesessio-的信号" tabindex="-1"><a class="header-anchor" href="#媒体捕获器qmediacapturesessio-的信号" aria-hidden="true">#</a> 媒体捕获器QMediaCaptureSessio 的信号</h6><p>媒体捕获器 QMediaCaptureSession 的信号如表所示</p><table><thead><tr><th>QMediaCaptureSession 的信号</th><th>说 明</th></tr></thead><tbody><tr><td>audioInputChanged()</td><td>当音频输人发生改变时发送信号</td></tr><tr><td>audioOutputChanged()</td><td>当音频输出发生改变时发送信号</td></tr><tr><td>cameraChanged()</td><td>当视频输人发生改变时发送信号</td></tr><tr><td>videoOutputChanged()</td><td>当视频输出发生改变时发送信号</td></tr><tr><td>imageCaptureChanged()</td><td>当图像捕获器发生改变时发送信号</td></tr><tr><td>recorderChanged()</td><td>当记录器发生改变时发送信号</td></tr></tbody></table><h6 id="媒体捕获器-qmediacapturesession-的应用实例" tabindex="-1"><a class="header-anchor" href="#媒体捕获器-qmediacapturesession-的应用实例" aria-hidden="true">#</a> 媒体捕获器 QMediaCaptureSession 的应用实例</h6><p>下面的程序用摄像头实时捕捉画面,并呈现捕捉到的画面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/2/28 23:03</span>
<span class="token comment"># File_name: demo.py</span>

<span class="token keyword">import</span> sys
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QHBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaDevices<span class="token punctuation">,</span> QCamera<span class="token punctuation">,</span> QMediaCaptureSession
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimediaWidgets <span class="token keyword">import</span> QVideoWidget


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>videoWidget <span class="token operator">=</span> QVideoWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示视频的控件</span>
        self<span class="token punctuation">.</span>btn_start <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;启动摄像头&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 打开摄像头按钮</span>
        self<span class="token punctuation">.</span>btn_stop <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;停止摄像头&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 停止摄像头按钮</span>

        h <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 按钮水平布局</span>
        h<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_start<span class="token punctuation">)</span>
        h<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_stop<span class="token punctuation">)</span>

        v <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>videoWidget<span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>mediaDevice <span class="token operator">=</span> QMediaDevices<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 媒体设备</span>
        self<span class="token punctuation">.</span>cameraDevice <span class="token operator">=</span> self<span class="token punctuation">.</span>mediaDevice<span class="token punctuation">.</span>defaultVideoInput<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取默认的视频输人设备</span>

        self<span class="token punctuation">.</span>camera <span class="token operator">=</span> QCamera<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cameraDevice<span class="token punctuation">)</span>  <span class="token comment"># 根据视频输人设备定义视频接口</span>
        self<span class="token punctuation">.</span>mediaCaptureSession <span class="token operator">=</span> QMediaCaptureSession<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 媒体捕获器</span>
        self<span class="token punctuation">.</span>mediaCaptureSession<span class="token punctuation">.</span>setCamera<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camera<span class="token punctuation">)</span>  <span class="token comment"># 设置媒体捕获器的视频接口</span>
        self<span class="token punctuation">.</span>mediaCaptureSession<span class="token punctuation">.</span>setVideoOutput<span class="token punctuation">(</span>self<span class="token punctuation">.</span>videoWidget<span class="token punctuation">)</span>  <span class="token comment"># 设置捕获器的视频输出控件</span>

        self<span class="token punctuation">.</span>btn_start<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>start<span class="token punctuation">)</span>  <span class="token comment"># 信号与槽连接</span>
        self<span class="token punctuation">.</span>btn_stop<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>  <span class="token comment"># 信号与槽连接</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="媒体格式qmediaformat" tabindex="-1"><a class="header-anchor" href="#媒体格式qmediaformat" aria-hidden="true">#</a> 媒体格式QMediaFormat</h5><p>在进行音频和视频的录制时,需要指定音频和视频的记录格式,以及媒体文件的存储格式,这些格式通过QMediaFormat 类来定义。</p><p>用QMediaFormat 类创建媒体格式实例的方法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaFormat

QMediaFormat<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QMediaFormat<span class="token punctuation">.</span>FileFormat <span class="token operator">=</span> Instance<span class="token punctuation">(</span>PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QMediaFormat<span class="token punctuation">.</span>FileFormat<span class="token punctuation">.</span>UnspecifiedFormat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QMediaFormat<span class="token punctuation">(</span>other<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QMediaFormat<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtMultimedia<span class="token punctuation">.</span>QMediaFormat<span class="token punctuation">.</span>FileFormat<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>媒体格式 QMediaFormat 的常用方法</strong></p><p>主要方法介绍如下</p><ul><li><p>分别用setFileFormat(f;QMediaFormat, FileFormat)方法setAudioCodec(codec:QMediaFormat;AudioCodec)方法和 setVideoCodec(codec: QMediaFormat.VideoCodec)方法设置保存媒体的文件格式音频编码格式和视频编码格式</p><ul><li><p>可选的文件格式、音频编码格式和视频编码格式如表所示。</p><table><thead><tr><th>文件格式</th><th>音频编码格式</th><th>视频编码格式</th></tr></thead><tbody><tr><td>QMediaFormat.WMA</td><td>QMediaFormat.AudioCodec.WMA</td><td>QMediaFormat.VideoCodec.VP8</td></tr><tr><td>QMediaFormat.AAC</td><td>QMediaFormat.AudioCodec.AC3</td><td>QMediaFormat.VideoCodec.MPEG2</td></tr><tr><td>QMediaFornat.Matroska</td><td>QMediaFormat.AudioCodec.AAC</td><td>QMediaFormat.VideoCodec.MPEG1</td></tr><tr><td>QMediaFormat.WMV</td><td>QMediaFormat.AudioCodec.ALAC</td><td>QMediaFormat.VideoCodec.WMV</td></tr><tr><td>QMediaFormat.MP3</td><td>QMediaFormat.AudioCodec.DolbyTrueHD</td><td>QMediaFormat.VideoCodec.H265</td></tr><tr><td>QMediaFormat.Wave</td><td>QMediaFormat.AudioCodec.EAC3</td><td>QMediaFormat.VideoCodec.H264</td></tr><tr><td>QMediaFormat.Ogg</td><td>QMediaFormat.AudioCodec.MP3</td><td>QMediaFormat.VideoCodec.MPEG4</td></tr><tr><td>QMediaFormat.MPEG4</td><td>QMediaFormat.AudioCodec.Wave</td><td>QMediaFormat.VideoCodec.AV1</td></tr><tr><td>QMediaFormat.AVI</td><td>QMediaFormat.AudioCodec.Vorbis</td><td>QMediaFormat.VideoCodec.MotionJPEG</td></tr><tr><td>QMediaFormat.QuickTime</td><td>QMediaFormat.AudioCodec.FLAC</td><td>QMediaFormat.VideoCodec.VP9</td></tr><tr><td>QMediaFormat.WebM</td><td>QMediaFormat.AudioCodec.Opus</td><td>QMediaFormat.VideoCodec.Theora</td></tr><tr><td>QMediaFormat.Mpeg4Audio</td><td>QMediaFormat.AudioCodec.Unspecified</td><td>QMediaFormat.VideoCodec.Unspecified</td></tr><tr><td>QMediaFormat.FLAC</td><td></td><td></td></tr></tbody></table></li></ul></li><li><p>支持编码格式获取</p><ul><li>supportedFileFormats(QMediaFormat, ConversionMode) 获取编码或解码时支持的文件格式列表</li><li>supportedAudioCodecs(QMediaFormat.ConversionMode) 获取编码或解码时支持的频编码格式列表</li><li>supportedVideoCodecs(QMediaFormatConversionMode) 获取编码或解码时支持的视频编码格式列表</li></ul><p>参数 QMediaFormat ConyersionMode可取</p><ul><li>QMediaFormat.Encode</li><li>QMediaFormat.Decode</li></ul></li></ul><table><thead><tr><th>QMediaFormat的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setFileFormat(f: QMediaFormat.FileFormat)</td><td>None</td><td>设置文件格式</td></tr><tr><td>fileFormat()</td><td>QMediaFormat.FileFormat</td><td>获取文件格式</td></tr><tr><td>setAudioCodec(codec: QMediaFormat.AudioCodec)</td><td>None</td><td>设置音频编码格式</td></tr><tr><td>audioCodec()</td><td>QMediaFormat.AudioCodec</td><td>获取音频编码格式</td></tr><tr><td>setVideoCodec(codec:QMediaFormat.VideoCodec)</td><td>None</td><td>设置视频编码格式</td></tr><tr><td>videoCodec()</td><td>QMediaFormat.VideoCodec</td><td>获取视频编码格式</td></tr><tr><td>supportedFileFormats(QMediaFormat.ConversionMode)</td><td>List[QMediaFormat.FileFormat]</td><td>获取支持的文件格式 列表</td></tr><tr><td>supportedAudioCodecs(QMediaFormat.ConversionMode)</td><td>List[QMediaFormat.AudioCodec]</td><td>获取支持的音频编码格 式列表</td></tr><tr><td>supportedVideoCodecs(QMediaFormat.ConversionMode)</td><td>List[QMediaFormat.VideoCodec]</td><td>获取支持的视频编码格 式列表</td></tr><tr><td>isSupported(mode: QMediaFormat.ConversionMode)</td><td>bool</td><td>获取是否可以对某种格 式编码或解码</td></tr><tr><td>[static]fileFormatDescription(QMediaFormat.FileFormat)</td><td>str</td><td>获取文件格式信息</td></tr><tr><td>[static]fileFormatName(QMediaFormat.FileFormat)</td><td>str</td><td>获取文件格式名称</td></tr><tr><td>[static]audioCodecDescription(QMediaFormat.AudioCodec)</td><td>str</td><td>获取音频格式信息</td></tr><tr><td>[static]audioCodecName(QMediaFormat.AudioCodec)</td><td>str</td><td>获取音频格式名称</td></tr><tr><td>[static]videoCodecDescription(QMediaFormat.VideoCodec)</td><td>str</td><td>获取视频格式信息</td></tr><tr><td>[static]videoCodecName(QMediaFormat.VideoCodec)</td><td>str</td><td>获取视频格式名称</td></tr></tbody></table><h5 id="媒体录制qmediarecorder" tabindex="-1"><a class="header-anchor" href="#媒体录制qmediarecorder" aria-hidden="true">#</a> 媒体录制QMediaRecorder</h5><p>QMediaRecorder 可以录制从 QMediaCaptureSession 获取的音频和视频,并对音频和视频进行编码,需要用QMediaCaptureSession 的 setRecorder(recorder:QMediaRecorder)方法设置关联的捕获器。</p><p>用QMediaRecorder创建实例的方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QMediaRecorder

QMediaRecorder<span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="媒体录制-qmediarecorder-的常用方法" tabindex="-1"><a class="header-anchor" href="#媒体录制-qmediarecorder-的常用方法" aria-hidden="true">#</a> 媒体录制 QMediaRecorder 的常用方法</h6><p>QMediaRecorder 的常用方法如表所示,主要方法介绍如下</p><ul><li><p>当 QMediaRecorder 准备就绪可以录制时isAvailable()的返回值是 True;</p></li><li><p>用record()方法开始录制,用stop()方法停止录制,用pause()方法暂停录制,</p></li><li><p>用duration()方法获取录制的时间,单位是毫秒。</p></li><li><p>用recorderState()方法获取录制状态,返回值是QMediaRecorder.RecorderState 的枚举值,可取:</p><ul><li>QMediaRecorder,StoppedState</li><li>QMediaRecorder.RecordingState</li><li>QMediaRecorder.PausedState</li></ul></li><li><p>录制过程中如果出错可以用error()方法获取出错内容,返回值是QMediaRecorder.Error 的枚举值,可取以下值,用errorString()方法获取具体的出错信息。:</p><blockquote><ul><li>QMediaRecorder.NoError</li><li>QMediaRecorder.ResourceError(设备没有准备好)</li><li>QMediaRecorder,ForatError(不支持该格式)</li><li>QMediaRecorder.OutOfSpaceError(存储空间不足)</li><li>QMediaRecorder.LocationNotWritable(输出位置不可写)</li></ul></blockquote></li><li><p>用setEncodingMode(QMediaRecorder.EncodingMode)方法设置编码模式,参数是QMediaRecorder, EncodingMode 的枚举值可取:</p><ul><li>QMediaRecorder.ConstantQualityEncoding(常质量编码)</li><li>QMediaRecorder ConstantBitRateEncoding(常比特率编码)</li><li>QMediaRecorder,AverageBitRateEncoding(平均比特率编码)</li><li>QMediaRecorderTwoPassEncoding(二次编码)</li></ul></li><li><p>用setQuality(quality:QMediaRecorder.Quality)方法设置录制质量,参数是QMediaRecorder.Quality 的举值,可取:</p><ul><li>QMediaRecorder.VeryLowQuality</li><li>QMediaRecorder.LowQuality</li><li>QMediaRecorder.NormalQuality</li><li>QMediaRecorder.HighQuality</li><li>QMediaRecorder.VeryHighQuality。</li></ul></li><li><p>用setMediaFormat(format: Union[QMediaFormat,QMediaFormat, FileFormat])方法设置媒体格式。</p></li></ul><table><thead><tr><th>QMediaRecorder 的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>isAvailable()</td><td>bool</td><td>获取是否可以录制</td></tr><tr><td>[slot]record()</td><td>None</td><td>开始录制</td></tr><tr><td>[slot]stop()</td><td>None</td><td>停止录制</td></tr><tr><td>[slot]pause()</td><td>None</td><td>暂停录制</td></tr><tr><td>duraticn()</td><td>int</td><td>获取录制的时间</td></tr><tr><td>error()</td><td>QMediaRecorder.Error</td><td>获取出错内容</td></tr><tr><td>errorString()</td><td>str</td><td>获取出错信息</td></tr><tr><td>recorderState()</td><td>QMediaRecorder.RecorderState</td><td>获取录制状态</td></tr><tr><td>captureSession()</td><td>QMediaCaptureSession</td><td>获取关联的捕获器</td></tr><tr><td>setAudioBitRate(bitRate:int)</td><td>None</td><td>设置音频比特率</td></tr><tr><td>audioBitRate()</td><td>int</td><td>获取音频比特率</td></tr><tr><td>setAudioChannelCount(channels:int)</td><td>None</td><td>设置音频通道数量</td></tr><tr><td>audioChannelCount()</td><td>int</td><td>获取音频通道数量</td></tr><tr><td>setAudioSampleRate(sampleRate: int)</td><td>None</td><td>设置音频采样率</td></tr><tr><td>audioSampleRate()</td><td>int</td><td>获取音频采样率</td></tr><tr><td>setEncodingMode(QMediaRecorder.EncodingMode)</td><td>None</td><td>设置编码模式</td></tr><tr><td>setMediaFormat(Union[QMediaFormat, QMediaFormat.FileFormat])</td><td>None 际最好海谢部含部</td><td>设置媒体格式</td></tr><tr><td>mediaFormat()</td><td>QMediaFormat</td><td>获取媒体格式</td></tr><tr><td>setMetaData(QMediaMetaData)</td><td>None</td><td>设置媒体元数据</td></tr><tr><td>metaData()</td><td>QMediaMetaData</td><td>获取媒体元数据</td></tr><tr><td>addMetaData(QMediaMetaData)</td><td>None</td><td>添加媒体元数据</td></tr><tr><td>setOutputLocation(Union[QUrl,str])</td><td>None</td><td>设置媒体输出位置</td></tr><tr><td>outputLocation()</td><td>QUrI</td><td>获取输出位置</td></tr><tr><td>actualLocation()</td><td>QUrI</td><td>获取实际的输出位置</td></tr><tr><td>setQuality(QMediaRecorder.Quality)</td><td>None</td><td>设置录制质量</td></tr><tr><td>quality()</td><td>QMediaRecorder.Quality</td><td>获取录制质量</td></tr><tr><td>setVideoBitRate(bitRate:int)</td><td>None</td><td>设置视频比特率</td></tr><tr><td>videoBitRate()</td><td>int</td><td>获取视频比特率</td></tr><tr><td>setVideoFrameRate(frameRate: float)</td><td>None</td><td>设置视频帧速</td></tr><tr><td>videoFrameRate()</td><td>float</td><td>获取视频帧速</td></tr><tr><td>setVideoResolution(QSize)</td><td>None</td><td>设置视频分辨率</td></tr><tr><td>setVideoResolution(width: int, height: int)</td><td>None</td><td>设置视频分辨率</td></tr><tr><td>videoResolution()</td><td>QSize</td><td>获取视频分辨率</td></tr></tbody></table><h6 id="媒体录制qmediarecorder-的信号" tabindex="-1"><a class="header-anchor" href="#媒体录制qmediarecorder-的信号" aria-hidden="true">#</a> 媒体录制QMediaRecorder 的信号</h6><p>媒体录制QMediaRecorder 的信号如表所示</p><table><thead><tr><th>QMediaRecorder的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>actualLocationChanged(location:QUrl)</td><td>存储位置发生改变时发送信号</td></tr><tr><td>durationChanged(duration:int)</td><td>录制时间发生改变时发送信号</td></tr><tr><td>errorChanged()</td><td>错误状态发生改变时发送信号</td></tr><tr><td>errorOccurred(error: QMediaRecorder.Error,errorString:str)</td><td>出现错误时发送信号</td></tr><tr><td>mediaFormatChanged()</td><td>格式发生改变时发送信号</td></tr><tr><td>metaDataChanged()</td><td>元数据发生改变时发送信号</td></tr><tr><td>recorderStateChanged(state:QMediaRecorder.RecorderState)</td><td>录制状态发生改变时发送信号</td></tr></tbody></table><h5 id="图像捕获qimagecapture" tabindex="-1"><a class="header-anchor" href="#图像捕获qimagecapture" aria-hidden="true">#</a> 图像捕获QImageCapture</h5><p>用媒体捕获器QMediaCaptureSession的 setImageCapture(imageCapture:QImageCapture)方法将 QImageCapture 与 QMediaCatureSession 关联,可以捕获图像,实现拍照功能。</p><p>用QImageCapture类定义图像捕的方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtMultimedia <span class="token keyword">import</span> QImageCapture

QImageCapture<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="图像捕获-qimagecapture-的常用方法" tabindex="-1"><a class="header-anchor" href="#图像捕获-qimagecapture-的常用方法" aria-hidden="true">#</a> 图像捕获 QImageCapture 的常用方法</h6><p>图像捕获 QImageCapture 的常用方法如表所示,主要方法介绍如下</p><ul><li><p>当isReadyForCapture()的返回值是 True 时,可以进行拍照;</p></li><li><p>用capture()方法进行拍照,返回值是拍照的识别号ID</p><ul><li>同时会发送imageCaptured(id;int,preview:QImage)信号和 imageExposed(id:int)信号,可以获取拍摄的图像;</li></ul></li><li><p>用captureToFile(location:str=)方法直接将拍摄的图像保存到文件中,</p><ul><li>同时发送imageCaptured(id;int,preview; QImage)信号、imageExposed(id;int)信号和imageSaved(id;int,fileName:str)信号</li><li>如果没有给出保存的文件名和路径则使用默认的路径和文件名,如果只给出文件名,则保存到默认路径下</li><li>完整路径可以通过imageSaved(id:int,fileName:str)信号的参数获取。</li></ul></li><li><p>用error()方法获取拍照时的出错状态返回值是QImageCapture.Error 举值可取以下值,对应值分别是0~5,用errorString()方法获取出错信息。:</p><ul><li>QImageCapture.NoError</li><li>QImageCapture.NotReadyError(设备没准备好)</li><li>QImageCapture.ResourceError(设备没准备好或不可用)</li><li>QImageCapture.OutOfSpaceError(存储空间不够)</li><li>QImageCapture,NotSupportedFeatureError(设备不支持拍照)</li><li>QImageCapture.FormatError(格式出错)</li></ul></li><li><p>用setFileFormat(format: QImageCapture,FileFormat)方法设置拍照的格式,参数是QImageCapture,FileFormat 的枚举值,可取:</p><ul><li>QImageCapture.FileFormat.JPEG</li><li>QImageCapture.FileFormat.PNG</li><li>QImageCapture.FileFormat.Tiff</li><li>QImageCapture.FileFormat.WebP</li><li>QImageCapture.FileFormat.UnspecifiedFormat</li><li>QImageCapture.FileFormat.LastFileFormat</li></ul></li><li><p>用setQuality(quality: QImageCapture.Quality)方法设置图像质量,参数是QImageCapture.Quality 的举值,可取以下值,,=对应值分别是0~4:</p><ul><li>QImageCapture.VeryLowQuality</li><li>QImageCapture.LowQuality</li><li>QImageCapture.NormalQuality</li><li>QImageCapture.HighQuality</li><li>QImageCapture.VeryHighQuality</li></ul></li></ul><table><thead><tr><th>QImageCapture的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>isReadyForCapture()</td><td>bool</td><td>获取是否可以拍照</td></tr><tr><td>[slot]capture()</td><td>int</td><td>进行拍照</td></tr><tr><td>[slot]captureToFile(location:str=&#39;&#39;)</td><td>int</td><td>拍照到文件中</td></tr><tr><td>captureSession()</td><td>QMediaCaptureSession</td><td>获取关联的捕捉器</td></tr><tr><td>error()</td><td>QImageCapture.Error</td><td>获取出错状态</td></tr><tr><td>errorString()</td><td>str</td><td>获取出错信息</td></tr><tr><td>setFileFormat(QImageCapture.FileFormat)</td><td>None</td><td>设置文件格式</td></tr><tr><td>setMetaData(metaData:QMediaMetaData)</td><td>None</td><td>设置元数据</td></tr><tr><td>metaData()</td><td>QMediaMetaData</td><td>获取元数据</td></tr><tr><td>addMetaData(metaData:QMediaMetaData)</td><td>None</td><td>添加元数据</td></tr><tr><td>setQuality(quality:QImageCapture.Quality)</td><td>None</td><td>设置图像质量</td></tr><tr><td>quality()</td><td>QImageCapture.Quality</td><td>获取图像质量</td></tr><tr><td>setResolution(QSize)</td><td>None</td><td>设置分辨率</td></tr><tr><td>setResolution(width:int,height:int)</td><td>None</td><td></td></tr><tr><td>resolution()</td><td>QSize</td><td>获取分辨率</td></tr><tr><td>[static]fileFormatDescription(QImageCapture.FileFormat)</td><td>Str</td><td>获取格式的信息</td></tr><tr><td>[static]fileFormatName(QImageCapture.FileFormat)</td><td>str</td><td>获取格式的名称</td></tr><tr><td>[static]supportedFormats()</td><td>List[QlmageCapture.FileFormat]</td><td>获取支持的格式</td></tr></tbody></table><h6 id="图像捕获qimagecapture-的信号" tabindex="-1"><a class="header-anchor" href="#图像捕获qimagecapture-的信号" aria-hidden="true">#</a> 图像捕获QImageCapture 的信号</h6><p>图像捕获 QImageCapture 的信号如表所示</p><p>其中imageAvailable(id:int,frame:QVideoFrame)信号的参数 QVideoFrame是视频,利用QVideoFrame 的 toImage()方法可以得到 QImage。</p><table><thead><tr><th>QImageCapture的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>readyForCaptureChanged(ready:bool)</td><td>准备状态发生改变时发送信号</td></tr><tr><td>imageCaptured(id: int,preview: QImage)</td><td>捕捉到图像时发送信号</td></tr><tr><td>imageExposed(id:int)</td><td>图像曝光时发送信号</td></tr><tr><td>imageSaved(id: int,fileName: str)</td><td>保存图像时发送信号</td></tr><tr><td>imageAvailable(id: int,frame: QVideoFrame)</td><td>可以获取图像时发送信号</td></tr><tr><td>metaDataChanged()</td><td>元数据发生改变时发送信号</td></tr><tr><td>qualityChanged()</td><td>图像质量发生改变时发送信号</td></tr><tr><td>errorOccurred(id:int,error: QImageCapture.Error,errorString:str)</td><td>出现错误时发送信号</td></tr><tr><td>errorChanged()</td><td>错误状态发生改变时发送信号</td></tr><tr><td>fileFormatChanged()</td><td>文件格式发生改变时发送信号</td></tr></tbody></table><h5 id="媒体元数据-qmediametadata" tabindex="-1"><a class="header-anchor" href="#媒体元数据-qmediametadata" aria-hidden="true">#</a> 媒体元数据 QMediaMetaData</h5><p>用QMediaRecorder或 QImageCapture 的 setMetaData(metaData: QMediaMetaData)方法可以为所录制的音频和视频或拍摄的照片添加媒体元数据,用metaData()方法获取媒体元数据。</p><h6 id="媒体元数据-qmediametadata-的常用方法" tabindex="-1"><a class="header-anchor" href="#媒体元数据-qmediametadata-的常用方法" aria-hidden="true">#</a> 媒体元数据 QMediaMetaData 的常用方法</h6><ul><li>需要通过字典形式来定义媒体元数据的值,已经定义的字典关键字可以用keys()方法获取</li><li>用insert(k:QMediaMetaData.Key,value:Any)方法定义关键字的值。</li></ul><table><thead><tr><th>QMediaMetaData的方法及参数类型</th><th>返回值的类型</th><th>说 明</th></tr></thead><tbody><tr><td>insert(k: QMediaMetaData.Key,value:Any)</td><td>None</td><td>插人关键字及值</td></tr><tr><td>keys()</td><td>List</td><td>获取关键字列表</td></tr><tr><td>remove(k:QMediaMetaData.Key)</td><td>None</td><td>移除关键字</td></tr><tr><td>isEmpty()</td><td>bool</td><td>获取是否为空</td></tr><tr><td>clear()</td><td>None</td><td>清空所有关键字</td></tr><tr><td>stringValue(k:QMediaMetaData.Key)</td><td>str</td><td>获取关键字对应的文本</td></tr><tr><td>value(k:QMediaMetaData.Key)</td><td>Any</td><td>获取关键字对应的值</td></tr><tr><td>[static]metaDataKeyToString(k: QMediaMetaData.Key)</td><td>str</td><td>获取关键字对应的文本</td></tr></tbody></table><h6 id="媒体元数据qmediametadata的可选关键字" tabindex="-1"><a class="header-anchor" href="#媒体元数据qmediametadata的可选关键字" aria-hidden="true">#</a> 媒体元数据QMediaMetaData的可选关键字</h6><table><thead><tr><th>关键字</th><th>值的类型</th><th>关键字</th><th>值的类型</th><th>关键字</th><th>值的类型</th></tr></thead><tbody><tr><td>Title</td><td>str</td><td>Url</td><td>Qurl</td><td>AlbumTitle</td><td>Str</td></tr><tr><td>Author</td><td>List[str]</td><td>MediaType</td><td>str</td><td>AlbumArtist</td><td>Str</td></tr><tr><td>Comment</td><td>Str</td><td>FileFormat</td><td>QMediaFormat.FileFormat</td><td>ContributingArtist</td><td>List[str]</td></tr><tr><td>Description</td><td>Str</td><td>AudioCodec</td><td>QMediaFormat.AudioCodec</td><td>TrackNumber</td><td>int</td></tr><tr><td>Genre</td><td>List[str]</td><td>VideoCodec</td><td>QMediaFormat.VideoCodec</td><td>Composer</td><td>List[str]</td></tr><tr><td>Date</td><td>QDate</td><td>Duration</td><td>int</td><td>LeadPerformer</td><td>List[str]</td></tr><tr><td>Language</td><td>QLocale.Language</td><td>AudioBitRate</td><td>int</td><td>ThumbnailImage</td><td>QImage</td></tr><tr><td>Publisher</td><td>str</td><td>VideoFrameRate</td><td>float</td><td>CoverArtImage</td><td>QImage</td></tr><tr><td>Copyright</td><td>str</td><td>VideoBitRate|</td><td>int</td><td>Resolution</td><td>QSize</td></tr></tbody></table>`,154)]))}const l=a(s,[["render",o],["__file","09时间网页及音视频控件2.html.vue"]]);export{l as default};
