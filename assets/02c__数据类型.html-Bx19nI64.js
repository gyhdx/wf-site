import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as l,a as d}from"./app-DBc2jY3V.js";const r={};function i(s,t){return l(),n("div",null,t[0]||(t[0]=[d(`<h2 id="_01-sizeof运算符" tabindex="-1"><a class="header-anchor" href="#_01-sizeof运算符" aria-hidden="true">#</a> 01.sizeof运算符</h2><p>sizeof运算符用于求数据类型或变量占用的内存空间。</p><p>用于数据类型：sizeof(数据类型)</p><p>用于变量：sizeof(变量名) 或 sizeof 变量名</p><p>注意：</p><ul><li>在32位和64位操作系统中，同一种数据类型占用的内存空间可能不一样。</li><li>字符串（string）不是C++的基本数据类型，用sizeof求它占用内存的大小没有意义。</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int main() {
    cout &lt;&lt; &quot;siezof(int): &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;
    
    int a = 9;
    cout &lt;&lt; &quot;siezof(int(a)): &quot; &lt;&lt; sizeof(a) &lt;&lt; endl;
    cout &lt;&lt; &quot;siezof(int(a)): &quot; &lt;&lt; sizeof a &lt;&lt; endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02-整型" tabindex="-1"><a class="header-anchor" href="#_02-整型" aria-hidden="true">#</a> 02.整型</h2><p>C++用int关键字来声明整型变量（int 是 integer 的简写）。</p><p>在声明整型变量的时候，可以在int关键字之前加signed、unsigned、short和long四种修饰符。</p><p><strong>signed</strong>：有符号的，可以表示正数和负数。</p><p><strong>unsigned</strong>：无符号的，只能表示正数，例如超女的身高和体重等。</p><p><strong>short</strong>：短的，取值范围小，占用内存少。</p><p><strong>long</strong>：长的，取值范围大，占用内存多。</p><table><thead><tr><th style="text-align:left;">类型简写</th><th style="text-align:left;">类型全称</th><th style="text-align:left;">长度</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">short</td><td style="text-align:left;">signed short int</td><td style="text-align:left;">2字节</td><td style="text-align:left;">-32768~32767</td></tr><tr><td style="text-align:left;">unsigned short</td><td style="text-align:left;">unsigned short int</td><td style="text-align:left;">2字节</td><td style="text-align:left;">0~65535</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">signed int</td><td style="text-align:left;">4字节</td><td style="text-align:left;">-2147483648~2147483647</td></tr><tr><td style="text-align:left;">unsigned</td><td style="text-align:left;">unsigned int</td><td style="text-align:left;">4字节</td><td style="text-align:left;">0~4294967295</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">signed long int</td><td style="text-align:left;">8字节</td><td style="text-align:left;"><p><a name="_hlk10540621"></a>-9223372036854775808~</p><p>9223372036854775807</p></td></tr><tr><td style="text-align:left;">unsigned long</td><td style="text-align:left;">unsigned long int</td><td style="text-align:left;">8字节</td><td style="text-align:left;">0~18446744073709551615</td></tr></tbody></table><p>注意：</p><ul><li>整数的取值范围与计算机操作系统和C++语言编译器有关，没有一个固定的数值，我们可以根据它占用的内存大小来推断它的取值范围。</li></ul><p>一个位的取值是 0 1 1=2<sup>1</sup>-1</p><p>两个位的取值是 00 01 10 11 3=2<sup>2</sup>-1</p><p>三个位的取值是 000 001 …… 111 7=2<sup>3</sup>-1</p><p>a）一个字节有8个位，表示的数据的取值范围是2<sup>8</sup>-1，即255。</p><p>b）如果占用的内存是两个字节，无符号型取值范围是2<sup>8</sup>ⅹ2<sup>8</sup>-1。</p><p>c）如果占用的内存是四个字节，无符号型取值范围是2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>-1。</p><p>d）如果占用的内存是八个字节，无符号型取值范围是2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>ⅹ2<sup>8</sup>-1。</p><p>e）如果是有符号，取值范围减半，因为符号占一个位。</p><p>f）计算机用最高位1位来表达符号（0-正数，1-负数），unsigned修饰过的正整数不需要符号位，在表达正整数的时候比signed修饰的正整数取值大一倍。</p><ul><li>给整型变量赋值不能超出它的取值范围，否则能产生不可预后的后果。</li><li>在实际开发中，为了防止超出取值范围，应该保证有足够的空间。</li></ul><h3 id="_1-整数的书写" tabindex="-1"><a class="header-anchor" href="#_1-整数的书写" aria-hidden="true">#</a> 1）整数的书写</h3><p>整数默认是十进制，一个表示十进制的数字不需要任何特殊的格式。</p><h4 id="_1、二进制" tabindex="-1"><a class="header-anchor" href="#_1、二进制" aria-hidden="true">#</a> <strong>1、二进制</strong></h4><p>二进制由 0 和 1 两个数字组成，书写时必须以0b或0B（不区分大小写）开头。</p><p>以下是合法的二进制：</p><p><code> int a = 0b101; // 换算成十进制为 5</code></p><p><code> int b = -0b110010; // 换算成十进制为 -50</code></p><p><code> int c = 0B100001; // 换算成十进制为 33</code></p><p>以下是非法的二进制：</p><p><code> int m = 101010; // 无前缀 0B，相当于十进制</code></p><p><code> int n = 0B410; // 4不是有效的二进制数字</code></p><p>注意，C++标准并不支持上面的二进制写法，只是有些编译器自己进行了扩展，才支持二进制数字。换句话说，并不是所有的编译器都支持二进制数字，只有一部分编译器支持，并且跟编译器的版本有关系。</p><h4 id="_2、八进制" tabindex="-1"><a class="header-anchor" href="#_2、八进制" aria-hidden="true">#</a> <strong>2、八进制</strong></h4><p>八进制由 0~7 八个数字组成，书写时必须以0开头（注意是数字 0，不是字母 o）。</p><p>以下是合法的八进制数：</p><p><code> int a = 015; // 换算成十进制为 13</code></p><p><code>int b = -0101; // 换算成十进制为 -65</code></p><p><code> int c = 0177777; // 换算成十进制为 65535</code></p><p>以下是非法的八进制：</p><p><code> int m = 256; // 无前缀 0，相当于十进制</code></p><p><code> int n = 03A2; // A不是有效的八进制数字</code></p><h4 id="_3、十六进制" tabindex="-1"><a class="header-anchor" href="#_3、十六进制" aria-hidden="true">#</a> <strong>3、十六进制</strong></h4><p>十六进制由数字 0~9、字母 A~F 或 a~f（不区分大小写）组成，书写时必须以0x或0X（不区分大小写）开头。</p><p>以下是合法的十六进制：</p><p><code> int a = 0X2A; // 换算成十进制为 42</code></p><p><code> int b = -0XA0; // 换算成十进制为 -160</code></p><p><code> int c = 0xffff; // 换算成十进制为 65535</code></p><p>以下是非法的十六进制：</p><p><code>int m = 5A; // 没有前缀 0X，是一个无效数字</code></p><p><code>int n = 0X3H; // H不是有效的十六进制数字</code></p><h4 id="_4、需要注意的坑" tabindex="-1"><a class="header-anchor" href="#_4、需要注意的坑" aria-hidden="true">#</a> <strong>4、需要注意的坑</strong></h4><p><strong>在C++中，不要在十进制数前面加0，会被编译器当成八进制。</strong></p><p><strong>还有，不要随便删掉别人程序中整数前面的0，它不是多余的。</strong></p><h3 id="_2-c-11的long-long类型" tabindex="-1"><a class="header-anchor" href="#_2-c-11的long-long类型" aria-hidden="true">#</a> 2）C++11的long long类型</h3><p>在VS中，long是4字节，32位。 -2147483648~2147483647</p><p>在Linux中，long是8字节，64位。 -9223372036854775808~9223372036854775807</p><p>C++11标准增了long long类型的整数，<strong>至少64位，且至少与long一样长</strong>。</p><p>在VS中，long long是8字节，64位。 -9223372036854775808~9223372036854775807</p><p>在Linux中，long和long long类型都是8字节，64位。</p><h2 id="_03-浮点型-实数型" tabindex="-1"><a class="header-anchor" href="#_03-浮点型-实数型" aria-hidden="true">#</a> 03.浮点型（实数型）</h2><p>C++浮点型分三种：float（单精度）、double（双精度）、long double（扩展精度）。</p><p>三者的区别是表示有效数字的范围不同。</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">占用空间</th><th style="text-align:left;">有效数字范围</th></tr></thead><tbody><tr><td style="text-align:left;">float</td><td style="text-align:left;">4字节</td><td style="text-align:left;">7位有效数字 8位</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">8字节</td><td style="text-align:left;">15～16位有效数字 17位</td></tr><tr><td style="text-align:left;">long double</td><td style="text-align:left;">不少于double</td><td style="text-align:left;">不低于double 17位</td></tr></tbody></table><p>注意：</p><ul><li>在VS和Linux中，long double占用的内存空间分别是8和16字节。</li><li>有效数字包括了小数点前面和后面的数字。</li><li>C++缺省显示6位有效数字，如果要显示更多的有效数字，可以用printf()函数。</li><li>浮点数的存储方法和整数不一样，比较复杂，如无必要，不用研究。（百度“为什么浮点数的小数位很多”、“为什么浮点数不精确”）</li><li>在实际开发中，用整数代替浮点数，整数的运算更快，精度更高。9223372036854775807</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int main() {
	// float 7位有效数字；double 15～16位有效数字；long double   不低于double
    float aa = 1234.45f;    cout &lt;&lt; &quot;aa=&quot; &lt;&lt; aa &lt;&lt; endl;
    double bb = 12345123056789.45;    cout &lt;&lt; &quot;bb=&quot; &lt;&lt; bb &lt;&lt; endl;
    long double cc = 12345126789.459;    cout &lt;&lt; &quot;cc=&quot; &lt;&lt; cc &lt;&lt; endl;
    printf(&quot;aa=%lf\\n&quot;, aa);
    printf(&quot;bb=%lf\\n&quot;, bb);
    printf(&quot;cc=%lf\\n&quot;, cc);
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-字符型的基本概念" tabindex="-1"><a class="header-anchor" href="#_04-字符型的基本概念" aria-hidden="true">#</a> <strong>04.字符型的基本概念</strong></h2><p>字符型（char）占用的内存空间是1个字节，书写用单引号包含。</p><p>在内存中，不存放字符本身，而是存放与它对应的编码，即ASCII码。</p><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是现今最通用的单字节编码方案，包含了33个控制字符（具有特殊含义无法显示的字符）和95个可显示字符。</p><p>&#39;X&#39; -&gt; 88 01011000 &#39;a&#39;-&gt;97 01100001 &#39;3&#39;-&gt;51 00110011</p><h3 id="_1-ascii-控制字符-0-31" tabindex="-1"><a class="header-anchor" href="#_1-ascii-控制字符-0-31" aria-hidden="true">#</a> <strong>1）ASCII 控制字符 （0～31）</strong></h3><table><thead><tr><th style="text-align:center;">十进制</th><th style="text-align:center;">符号</th><th style="text-align:center;">中文解释</th><th style="text-align:center;">十进制</th><th style="text-align:center;">符号</th><th style="text-align:center;">中文解释</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>0</strong></td><td style="text-align:center;"><strong>NULL</strong></td><td style="text-align:center;"><strong>空字符</strong></td><td style="text-align:center;">16</td><td style="text-align:center;">DLE</td><td style="text-align:center;">数据链路转义</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">SOH</td><td style="text-align:center;">标题开始</td><td style="text-align:center;">17</td><td style="text-align:center;">DC1</td><td style="text-align:center;">设备控制 1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">STX</td><td style="text-align:center;">正文开始</td><td style="text-align:center;">18</td><td style="text-align:center;">DC2</td><td style="text-align:center;">设备控制 2</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">ETX</td><td style="text-align:center;">正文结束</td><td style="text-align:center;">19</td><td style="text-align:center;">DC3</td><td style="text-align:center;">设备控制 3</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">EOT</td><td style="text-align:center;">传输结束</td><td style="text-align:center;">20</td><td style="text-align:center;">DC4</td><td style="text-align:center;">设备控制 4</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">ENQ</td><td style="text-align:center;">询问</td><td style="text-align:center;">21</td><td style="text-align:center;">NAK</td><td style="text-align:center;">拒绝接收</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">ACK</td><td style="text-align:center;">收到通知</td><td style="text-align:center;">22</td><td style="text-align:center;">SYN</td><td style="text-align:center;">同步空闲</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">BEL</td><td style="text-align:center;">铃</td><td style="text-align:center;">23</td><td style="text-align:center;">ETB</td><td style="text-align:center;">传输块结束</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">BS</td><td style="text-align:center;">退格</td><td style="text-align:center;">24</td><td style="text-align:center;">CAN</td><td style="text-align:center;">取消</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">HT</td><td style="text-align:center;">水平制表符</td><td style="text-align:center;">25</td><td style="text-align:center;">EM</td><td style="text-align:center;">介质中断</td></tr><tr><td style="text-align:center;"><strong>10</strong></td><td style="text-align:center;"><strong>LF</strong></td><td style="text-align:center;"><strong>换行键</strong></td><td style="text-align:center;">26</td><td style="text-align:center;">SUB</td><td style="text-align:center;">替换</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">VT</td><td style="text-align:center;">垂直制表符</td><td style="text-align:center;">27</td><td style="text-align:center;">ESC</td><td style="text-align:center;">换码符</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;">FF</td><td style="text-align:center;">换页键</td><td style="text-align:center;">28</td><td style="text-align:center;">FS</td><td style="text-align:center;">文件分隔符</td></tr><tr><td style="text-align:center;"><strong>13</strong></td><td style="text-align:center;"><strong>CR</strong></td><td style="text-align:center;"><strong>回车键</strong></td><td style="text-align:center;">29</td><td style="text-align:center;">GS</td><td style="text-align:center;">组分隔符</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;">SO</td><td style="text-align:center;">移出</td><td style="text-align:center;">30</td><td style="text-align:center;">RS</td><td style="text-align:center;">记录分离符</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">SI</td><td style="text-align:center;">移入</td><td style="text-align:center;">31</td><td style="text-align:center;">US</td><td style="text-align:center;">单元分隔符</td></tr></tbody></table><h3 id="_2-ascii-可显示字符-32-127" tabindex="-1"><a class="header-anchor" href="#_2-ascii-可显示字符-32-127" aria-hidden="true">#</a> <strong>2）ASCII 可显示字符 （32～127）</strong></h3><table><thead><tr><th style="text-align:center;">十进制</th><th style="text-align:center;">符号</th><th style="text-align:center;">中文解释</th><th style="text-align:center;">十进制</th><th style="text-align:center;">符号</th><th style="text-align:center;">中文解释</th></tr></thead><tbody><tr><td style="text-align:center;">32</td><td style="text-align:center;"></td><td style="text-align:center;">空格</td><td style="text-align:center;">80</td><td style="text-align:center;">P</td><td style="text-align:center;">大写字母 P</td></tr><tr><td style="text-align:center;">33</td><td style="text-align:center;">!</td><td style="text-align:center;">感叹号</td><td style="text-align:center;">81</td><td style="text-align:center;">Q</td><td style="text-align:center;">大写字母 Q</td></tr><tr><td style="text-align:center;">34</td><td style="text-align:center;">&quot;</td><td style="text-align:center;">双引号</td><td style="text-align:center;">82</td><td style="text-align:center;">R</td><td style="text-align:center;">大写字母 R</td></tr><tr><td style="text-align:center;">35</td><td style="text-align:center;">#</td><td style="text-align:center;">井号</td><td style="text-align:center;">83</td><td style="text-align:center;">S</td><td style="text-align:center;">大写字母 S</td></tr><tr><td style="text-align:center;">36</td><td style="text-align:center;">$</td><td style="text-align:center;">美元符</td><td style="text-align:center;">84</td><td style="text-align:center;">T</td><td style="text-align:center;">大写字母 T</td></tr><tr><td style="text-align:center;">37</td><td style="text-align:center;">%</td><td style="text-align:center;">百分号</td><td style="text-align:center;">85</td><td style="text-align:center;">U</td><td style="text-align:center;">大写字母 U</td></tr><tr><td style="text-align:center;">38</td><td style="text-align:center;">&amp;</td><td style="text-align:center;">与</td><td style="text-align:center;">86</td><td style="text-align:center;">V</td><td style="text-align:center;">大写字母 V</td></tr><tr><td style="text-align:center;">39</td><td style="text-align:center;">&#39;</td><td style="text-align:center;">单引号</td><td style="text-align:center;">87</td><td style="text-align:center;">W</td><td style="text-align:center;">大写字母 W</td></tr><tr><td style="text-align:center;">40</td><td style="text-align:center;">(</td><td style="text-align:center;">左括号</td><td style="text-align:center;">88</td><td style="text-align:center;">X</td><td style="text-align:center;">大写字母 X</td></tr><tr><td style="text-align:center;">41</td><td style="text-align:center;">)</td><td style="text-align:center;">右括号</td><td style="text-align:center;">89</td><td style="text-align:center;">Y</td><td style="text-align:center;">大写字母 Y</td></tr><tr><td style="text-align:center;">42</td><td style="text-align:center;">*</td><td style="text-align:center;">星号</td><td style="text-align:center;">90</td><td style="text-align:center;">Z</td><td style="text-align:center;">大写字母 Z</td></tr><tr><td style="text-align:center;">43</td><td style="text-align:center;">+</td><td style="text-align:center;">加号</td><td style="text-align:center;">91</td><td style="text-align:center;">[</td><td style="text-align:center;">左中括号</td></tr><tr><td style="text-align:center;">44</td><td style="text-align:center;">,</td><td style="text-align:center;">逗号</td><td style="text-align:center;">92</td><td style="text-align:center;">|斜线</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">45</td><td style="text-align:center;">-</td><td style="text-align:center;">减号</td><td style="text-align:center;">93</td><td style="text-align:center;">]</td><td style="text-align:center;">右中括号</td></tr><tr><td style="text-align:center;">46</td><td style="text-align:center;">.</td><td style="text-align:center;">句点或小数点</td><td style="text-align:center;">94</td><td style="text-align:center;">^</td><td style="text-align:center;">音调符号</td></tr><tr><td style="text-align:center;">47</td><td style="text-align:center;">/</td><td style="text-align:center;">反斜线</td><td style="text-align:center;">95</td><td style="text-align:center;">_</td><td style="text-align:center;">下划线</td></tr><tr><td style="text-align:center;">48</td><td style="text-align:center;">0</td><td style="text-align:center;">数字0的符号</td><td style="text-align:center;">96</td><td style="text-align:center;">\`</td><td style="text-align:center;">重音符</td></tr><tr><td style="text-align:center;">49</td><td style="text-align:center;">1</td><td style="text-align:center;">数字1的符号</td><td style="text-align:center;">97</td><td style="text-align:center;">a</td><td style="text-align:center;">小写字母 a</td></tr><tr><td style="text-align:center;">50</td><td style="text-align:center;">2</td><td style="text-align:center;">数字2的符号</td><td style="text-align:center;">98</td><td style="text-align:center;">b</td><td style="text-align:center;">小写字母 b</td></tr><tr><td style="text-align:center;">51</td><td style="text-align:center;">3</td><td style="text-align:center;">数字3的符号</td><td style="text-align:center;">99</td><td style="text-align:center;">c</td><td style="text-align:center;">小写字母 c</td></tr><tr><td style="text-align:center;">52</td><td style="text-align:center;">4</td><td style="text-align:center;">数字4的符号</td><td style="text-align:center;">100</td><td style="text-align:center;">d</td><td style="text-align:center;">小写字母 d</td></tr><tr><td style="text-align:center;">53</td><td style="text-align:center;">5</td><td style="text-align:center;">数字5的符号</td><td style="text-align:center;">101</td><td style="text-align:center;">e</td><td style="text-align:center;">小写字母 e</td></tr><tr><td style="text-align:center;">54</td><td style="text-align:center;">6</td><td style="text-align:center;">数字6的符号</td><td style="text-align:center;">102</td><td style="text-align:center;">f</td><td style="text-align:center;">小写字母 f</td></tr><tr><td style="text-align:center;">55</td><td style="text-align:center;">7</td><td style="text-align:center;">数字7的符号</td><td style="text-align:center;">103</td><td style="text-align:center;">g</td><td style="text-align:center;">小写字母 g</td></tr><tr><td style="text-align:center;">56</td><td style="text-align:center;">8</td><td style="text-align:center;">数字8的符号</td><td style="text-align:center;">104</td><td style="text-align:center;">h</td><td style="text-align:center;">小写字母 h</td></tr><tr><td style="text-align:center;">57</td><td style="text-align:center;">9</td><td style="text-align:center;">数字9的符号</td><td style="text-align:center;">105</td><td style="text-align:center;">i</td><td style="text-align:center;">小写字母 i</td></tr><tr><td style="text-align:center;">58</td><td style="text-align:center;">:</td><td style="text-align:center;">冒号</td><td style="text-align:center;">106</td><td style="text-align:center;">j</td><td style="text-align:center;">小写字母 j</td></tr><tr><td style="text-align:center;">59</td><td style="text-align:center;">;</td><td style="text-align:center;">分号</td><td style="text-align:center;">107</td><td style="text-align:center;">k</td><td style="text-align:center;">小写字母 k</td></tr><tr><td style="text-align:center;">60</td><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td style="text-align:center;">108</td><td style="text-align:center;">l</td><td style="text-align:center;">小写字母 l</td></tr><tr><td style="text-align:center;">61</td><td style="text-align:center;">=</td><td style="text-align:center;">等号</td><td style="text-align:center;">109</td><td style="text-align:center;">m</td><td style="text-align:center;">小写字母 m</td></tr><tr><td style="text-align:center;">62</td><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td style="text-align:center;">110</td><td style="text-align:center;">n</td><td style="text-align:center;">小写字母 n</td></tr><tr><td style="text-align:center;">63</td><td style="text-align:center;">?</td><td style="text-align:center;">问号</td><td style="text-align:center;">111</td><td style="text-align:center;">o</td><td style="text-align:center;">小写字母 o</td></tr><tr><td style="text-align:center;">64</td><td style="text-align:center;">@</td><td style="text-align:center;">电子邮件符号</td><td style="text-align:center;">112</td><td style="text-align:center;">p</td><td style="text-align:center;">小写字母 p</td></tr><tr><td style="text-align:center;">65</td><td style="text-align:center;">A</td><td style="text-align:center;">大写字母 A</td><td style="text-align:center;">113</td><td style="text-align:center;">q</td><td style="text-align:center;">小写字母 q</td></tr><tr><td style="text-align:center;">66</td><td style="text-align:center;">B</td><td style="text-align:center;">大写字母 B</td><td style="text-align:center;">114</td><td style="text-align:center;">r</td><td style="text-align:center;">小写字母 r</td></tr><tr><td style="text-align:center;">67</td><td style="text-align:center;">C</td><td style="text-align:center;">大写字母 C</td><td style="text-align:center;">115</td><td style="text-align:center;">s</td><td style="text-align:center;">小写字母 s</td></tr><tr><td style="text-align:center;">68</td><td style="text-align:center;">D</td><td style="text-align:center;">大写字母 D</td><td style="text-align:center;">116</td><td style="text-align:center;">t</td><td style="text-align:center;">小写字母 t</td></tr><tr><td style="text-align:center;">69</td><td style="text-align:center;">E</td><td style="text-align:center;">大写字母 E</td><td style="text-align:center;">117</td><td style="text-align:center;">u</td><td style="text-align:center;">小写字母 u</td></tr><tr><td style="text-align:center;">70</td><td style="text-align:center;">F</td><td style="text-align:center;">大写字母 F</td><td style="text-align:center;">118</td><td style="text-align:center;">v</td><td style="text-align:center;">小写字母 v</td></tr><tr><td style="text-align:center;">71</td><td style="text-align:center;">G</td><td style="text-align:center;">大写字母 G</td><td style="text-align:center;">119</td><td style="text-align:center;">w</td><td style="text-align:center;">小写字母 w</td></tr><tr><td style="text-align:center;">72</td><td style="text-align:center;">H</td><td style="text-align:center;">大写字母 H</td><td style="text-align:center;">120</td><td style="text-align:center;">x</td><td style="text-align:center;">小写字母 x</td></tr><tr><td style="text-align:center;">73</td><td style="text-align:center;">I</td><td style="text-align:center;">大写字母 I</td><td style="text-align:center;">121</td><td style="text-align:center;">y</td><td style="text-align:center;">小写字母 y</td></tr><tr><td style="text-align:center;">74</td><td style="text-align:center;">J</td><td style="text-align:center;">大写字母 J</td><td style="text-align:center;">122</td><td style="text-align:center;">z</td><td style="text-align:center;">小写字母 z</td></tr><tr><td style="text-align:center;">75</td><td style="text-align:center;">K</td><td style="text-align:center;">大写字母 K</td><td style="text-align:center;">123</td><td style="text-align:center;">{</td><td style="text-align:center;">左大括号</td></tr><tr><td style="text-align:center;">76</td><td style="text-align:center;">L</td><td style="text-align:center;">大写字母 L</td><td style="text-align:center;">124</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">77</td><td style="text-align:center;">M</td><td style="text-align:center;">大写字母 M</td><td style="text-align:center;">125</td><td style="text-align:center;">}</td><td style="text-align:center;">右大括号</td></tr><tr><td style="text-align:center;">78</td><td style="text-align:center;">N</td><td style="text-align:center;">大写字母 N</td><td style="text-align:center;">126</td><td style="text-align:center;">~</td><td style="text-align:center;">波浪号</td></tr><tr><td style="text-align:center;">79</td><td style="text-align:center;">O</td><td style="text-align:center;">大写字母 O</td><td style="text-align:center;">127</td><td style="text-align:center;"></td><td style="text-align:center;">删除</td></tr></tbody></table><p>a）32是空格。</p><p>b）48～57是0到9十个阿拉伯数字；</p><p>c）65～90是26个大写英文字母；</p><p>d）97～122号是26个小写英文字母；</p><p>e）其余的是一些标点符号、运算符号等；</p><p>f）第127个字符表示的是键盘上的删除键。</p><h3 id="_3-字符的本质" tabindex="-1"><a class="header-anchor" href="#_3-字符的本质" aria-hidden="true">#</a> <strong>3）字符的本质</strong></h3><p>a）字符的本质是整数，取值范围是0～127。</p><p>b）在书写的时候可以用单引号包含，也可以用整数。</p><p>c）如果书写的时候用单引号包含，程序执行的时候，将把符号解释为对应的整数。</p><p>d）显示的时候，把整数解释为对应的符号，也可以直接显示整数。</p><p>d）可以与整数进行任何运算，运算的时候，书写方式可以用字符，也可以用整数。</p><p>e）C++为什么没有提供1字节的整型？</p><p>f）字符型也可以用unsigned修饰，意义何在？</p><h3 id="_4-转义字符" tabindex="-1"><a class="header-anchor" href="#_4-转义字符" aria-hidden="true">#</a> 4）转义字符</h3><p>在C++程序中，使用转义字符的原因有两个：</p><ul><li>控制字符没有符号，无法书写，只能用其它的符号代替。</li><li>某些符号已被C++征用，语义冲突，只能用其它的符号代替。</li></ul><table><thead><tr><th style="text-align:center;">ASCII码值</th><th style="text-align:center;">转义字符</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>0</strong></td><td style="text-align:center;"><strong>\\0</strong></td><td style="text-align:center;"><strong>空，给字符型变量赋值时可以直接书写0。</strong></td></tr><tr><td style="text-align:center;"><strong>10</strong></td><td style="text-align:center;"><strong>\\n</strong></td><td style="text-align:center;"><strong>换行(LF) ，将当前位置移到下一行开头。</strong></td></tr><tr><td style="text-align:center;"><strong>13</strong></td><td style="text-align:center;"><strong>\\r</strong></td><td style="text-align:center;"><strong>回车(CR) ，将当前位置移到本行开头</strong></td></tr><tr><td style="text-align:center;"><strong>9</strong></td><td style="text-align:center;"><strong>\\t</strong></td><td style="text-align:center;"><strong>水平制表(HT) （跳到下一个TAB位置）</strong></td></tr><tr><td style="text-align:center;"><strong>92</strong></td><td style="text-align:center;"><strong>\\</strong></td><td style="text-align:center;"><strong>斜线</strong></td></tr><tr><td style="text-align:center;"><strong>34</strong></td><td style="text-align:center;"><strong>&quot;</strong></td><td style="text-align:center;"><strong>双引号，书写字符时不必转义。</strong></td></tr><tr><td style="text-align:center;"><strong>39</strong></td><td style="text-align:center;"><strong>&#39;</strong></td><td style="text-align:center;"><strong>单引号，书写字符串中不必转义。</strong></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">\\a</td><td style="text-align:center;">警报</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">\\b</td><td style="text-align:center;">退格(BS) ，将当前位置移到前一列</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;">\\f</td><td style="text-align:center;">换页(FF)，将当前位置移到下页开头</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">\\v</td><td style="text-align:center;">垂直制表(VT)</td></tr></tbody></table><h3 id="_5-c-11的原始字面量" tabindex="-1"><a class="header-anchor" href="#_5-c-11的原始字面量" aria-hidden="true">#</a> 5）C++11的原始字面量</h3><p>原始字面量（值）可以直接表示字符串的实际含义，不需要转义和连接。</p><p>语法：</p><p>R&quot;(字符串的内容)&quot;</p><p>R&quot;xxx(字符串的内容)xxx&quot;</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int main() {
    // 使用转义的方法
    string path = &quot;C:\\\\Program Files\\\\Microsoft OneDrive\\\\tail\\\\nation&quot;;
    cout &lt;&lt; &quot;path is &quot; &lt;&lt; path &lt;&lt; endl;

    // 使用C++11原始字面量
    string path1 = R&quot;abcd(C:\\Program Files\\Microsoft OneDrive\\tail\\nation)abcd&quot;;
    cout &lt;&lt; &quot;path1 is &quot; &lt;&lt; path1 &lt;&lt; endl;
    string str = R&quot;(
        &lt;no&gt;0001&lt;/no&gt;
        &lt;name&gt;西施&lt;/name&gt;
        &lt;sc&gt;火树银花&lt;/sc&gt;
        &lt;yz&gt;沉鱼&lt;/yz&gt;
        &lt;age&gt;23&lt;/age&gt;
        &lt;weight&gt;48.5&lt;/weight&gt;
        &lt;height&gt;170&lt;/height&gt;)&quot;;
    cout &lt;&lt; str &lt;&lt; endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_05-字符串型" tabindex="-1"><a class="header-anchor" href="#_05-字符串型" aria-hidden="true">#</a> 05.字符串型</h2><p>C++风格字符串：string 变量名=&quot;字符串的内容&quot; ;</p><p>C风格字符串：char 变量名[]=&quot;字符串的内容&quot; ;</p><p>C风格字符串的本质是字符数组，C++风格字符串的本质是类，它封装了C风格字符串。</p><ul><li>C++风格字符串的常用操作：</li><li>赋值：变量名=&quot;字符串的内容&quot; ;</li><li>拼接：变量名=变量名+&quot;字符串的内容一&quot;+&quot;字符串的内容一&quot;+......+&quot;字符串的内容n&quot; ;</li></ul><p>如果字符串的内容都是常量，不要写加号（+），如果内容很长，可以分成多行书写。</p><ul><li>比较：支持==、!=、&gt;和&lt;关系运算符，常用的是==和!=。</li></ul><h2 id="_06-布尔型" tabindex="-1"><a class="header-anchor" href="#_06-布尔型" aria-hidden="true">#</a> 06.布尔型</h2><p>在C和C++中，关系运算和逻辑运算的结果有两种：真和假。</p><p>C语言用0表示假，非0表示真。</p><p>为了提高代码的可读性，C++新增了 bool 类型，占用1字节的内存，用true表示真，false表示假。</p><p>bool类型本质上是1字节的整数（unsigned char），取值只有1和0。</p><p>在程序中，书写的时候可以用true和false，编译器把它们解释为1和0。</p><p>如果对bool型变量赋非0的值，将转换成1。</p><p>用cin输入和cout输出的时候，仍是1和0，不会被解释为true和false。</p><h2 id="_07-数据类型的转换" tabindex="-1"><a class="header-anchor" href="#_07-数据类型的转换" aria-hidden="true">#</a> 07.数据类型的转换</h2><p>计算机进行运算时，要求各操作数的类型具有相同的大小和存储方式。</p><p>在实际开发中，不同类型的数据进行混合运算是基本需求。</p><p>**自动类型转换：**某些类型的转换编译器可以隐式的进行，不需程序员干预。</p><p>**强制类型转换：**有些类型的转换需要程序员显式指定。</p><h3 id="_1-自动类型转换" tabindex="-1"><a class="header-anchor" href="#_1-自动类型转换" aria-hidden="true">#</a> <strong>1）自动类型转换</strong></h3><p>不同数据类型的差别在于取值范围和精度，数据的取值范围越大，精度越高。</p><p>整型从低到高：</p><p>char -&gt; short -&gt; int -&gt; long -&gt; long long</p><p>浮点型从低到高：</p><p>float -&gt; double -&gt; long double</p><p>自动类型转换的规则如下：</p><ul><li>如果一个表达式中出现了不同类型操作数的混合运算，较低类型将自动向较高类型转换。</li><li>当表达式中含有浮点型操作数时，所有操作数都将转换为浮点型。</li><li>赋值运算的右值类型与左值类型不一致时，将右值类型提升/降低为左值类型。</li><li>赋值运算右值超出了左值类型的表示范围，把该右值截断后赋给左值，所得结果可能毫无意义。</li></ul><h3 id="_2-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_2-强制类型转换" aria-hidden="true">#</a> <strong>2）强制类型转换</strong></h3><p>为了让程序设计更灵活，转换的目的更清晰，C++提供了强制类型转换的方法，也称之为显式转换。</p><p>强制类型转换的语法：(目标类型)表达式或目标类型(表达式)</p><p>注意：</p><ul><li>如果使用强制转换，表示程序员已有明确的目的。</li><li>如果转换的行为不符合理，后果由程序员承担。</li><li>如果采用了强制类型转换，编译的告警信息将不再出现。</li><li>类型转换运算符的优先级比较高，如果没把握就加括号。</li></ul>`,139)]))}const c=e(r,[["render",i],["__file","02c__数据类型.html.vue"]]);export{c as default};
