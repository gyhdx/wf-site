import{_ as o}from"./image-20240418225701528-CAZmcqWd.js";import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c,o as r,a as p,b as a,e as s,d as t}from"./app-DBc2jY3V.js";const d="/wf-site/assets/e861e8f77dae47acab0ce232d6b254af-CJdswMSh.png",u="/wf-site/assets/64f90706128643f2966e17197fa7776f-CyvcQGgt.png",k="/wf-site/assets/77a26ada3add414cbc0a3d04ed07758c-Dr4-6lK_.png",v="/wf-site/assets/0e81cf5d8681467fb2b279ffa3a3d723-Dh0uOC_L.png",b="/wf-site/assets/2ac3afe2c8b2478eb59ee6175d448584-BrC44649.png",m="/wf-site/assets/7c0ba1c8bffc4dc6b6984b50b80c078c-BC76msA_.png",_="/wf-site/assets/9001619d0c0a402984a33270d33b6c99-DVp13BPm.png",g={},h={href:"https://so.csdn.net/so/search?q=SCL&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},T={href:"https://so.csdn.net/so/search?q=%E5%B7%A5%E6%8E%A7&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},E={href:"https://so.csdn.net/so/search?q=PLC%E7%BC%96%E7%A8%8B&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},f={href:"https://so.csdn.net/so/search?q=%E8%84%89%E5%86%B2%E4%BF%A1%E5%8F%B7&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"};function I(C,n){const e=l("ExternalLinkIcon");return r(),c("div",null,[n[11]||(n[11]=p('<h1 id="基础介绍" tabindex="-1"><a class="header-anchor" href="#基础介绍" aria-hidden="true">#</a> 基础介绍</h1><p>SCL是西门子公司推出的一种PLC编程语言，其英文全称为“StructuredControl Language”，中文翻译为“结构化控制语言”。</p><p>西门子SCL语言是基于PASCL语言的，它在PASCL语言的基础上，加上了PLC编程的输入、输出、定时器、计数器、位存储器等特征，使其既具有高级语言的特点，又适合PLC的数据处理。</p><p>西门子SCL语言支持布尔型、整型、实型等基本数据类型及日期时间、指针、用户自定义数据等复杂数据类型，提供了丰富的运算符可以构建逻辑表达式、数学表达式、关系表达式等各种表达式，提供了判断、选择、循环等语句用于程序控制，同时还提供了基本指令、扩展指令、工艺指令及通信指令等丰富的指令，可以满足所有PLC控制的要求。</p><p>由于其高级语言的特性，SCL尤其适合在数据处理、过程优化、配方管理、数学/统计运算等方面的应用。</p><h1 id="变量寻址方式" tabindex="-1"><a class="header-anchor" href="#变量寻址方式" aria-hidden="true">#</a> 变量寻址方式</h1><p>S7系列PLC的寻址方式可以分为直接寻址和间接寻址两大类。 所谓直接寻址，是指在程序中直接访问CPU的存储区的寻址方式。这里的存储区包括输入输出映像区(Input/Output)、位存储区(M)、定时器(T)、计数器(C)、数据块(DB)及功能块(FBFC)等。直接寻址又可以分为两种：绝对寻址和符号寻址。</p><p>所谓**绝对寻址，是指在程序中使用存储区的物理地址的寻址方式。**比如：10.0，Q1.0,M2.0等等。物理地址不能直观的表达其代表的意义。比如程序中看到“11.0”，我们并不知道它是表示哪个按钮的输入，还是哪个接近开关的输入。这种寻址方式不利于程序的阅读、编写及后期的维护。为了增加程序的可读性及可维护性，可以使用另一种寻址方式：符号寻址。</p><p>所谓**符号寻址，是指给物理地址起一个与其功能相关的符号（名称）。**比如上例中的“11.0”，我们给它起个符号名“Start ON”,当我们看到这个符号的时候，就知道它代表开机按钮。符号寻址支持所有的存储区(1、O、M、C、T、DB、L),使程序的可读性及可维护性增强，是大型程序开发中常见的寻址方式。</p><p>以上两种寻址方式均属于直接寻址，在高级程序开发中，还会用到另一类的寻址方式：间接寻址。</p><p>**间接寻址是利用指针或地址寄存器进行的寻址方式，可以在程序运行期间通过改变指针或地址寄存器的值，来动态修改指令的地址。**间接寻址的指针包括16位和32位，寻址方式包括存储器间接寻址和寄存器间接寻址，功能强大，对初学者理解起来有一定的困难，本文先讨论存储器间接寻址。</p><p>存储器间接寻址使用16位和32位两种指针进行寻址。16位地址指针用于定时器(T)、计数器(C)、程序块(FBFC)及数据块(DB)的寻址。它以字的形式进行访问，16位指针作为一个无符号数(0~65535)，表示相应存储器的编号。</p><p>寻址格式：区域标识符[16位地址指针]；</p><h3 id="p-寻址-指针类型" tabindex="-1"><a class="header-anchor" href="#p-寻址-指针类型" aria-hidden="true">#</a> p#寻址--指针类型</h3><figure><img src="'+o+'" alt="image-20240418225701528" tabindex="0" loading="lazy"><figcaption>image-20240418225701528</figcaption></figure><p>P#DB5.DBX36.0 WORD 1</p><p>p# 说明是p#类型寻址</p><p>db5，数据库地址</p><p>dbx36.0 数据在数据库中的偏移量</p><p>word 数据类型</p><p>1 取一个world的长度</p><h1 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h1>',22)),a("p",null,[n[1]||(n[1]=s("西门子")),a("a",h,[n[0]||(n[0]=s("SCL")),t(e)]),n[2]||(n[2]=s("语言的表达式可以分为："))]),n[12]||(n[12]=p(`<ul><li><p>算术表达式（Arithmetic Expression）；</p></li><li><p>关系表达式（Relational Expression）；</p></li><li><p>逻辑表达式（Logical Expression）；</p></li></ul><h2 id="算术表达式" tabindex="-1"><a class="header-anchor" href="#算术表达式" aria-hidden="true">#</a> 算术表达式</h2><p>算术表达式，也称为数学表达式，它用来表达两个操作数之间的一种数学运算关系。算术表达式的操作符包括：+（加）、-（减）、*（乘）、/（除）、**（幂运算）、MOD（模运算/求余运算）；其中，+（加）、-（减）既可以对整型、实型等数字类型的数据进行运算，也可以对日期、时间等数据类型进行运算。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token string">#a</span> <span class="token operator">:=</span> <span class="token string">#b</span> <span class="token operator">+</span> <span class="token string">#c</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="关系表达式" tabindex="-1"><a class="header-anchor" href="#关系表达式" aria-hidden="true">#</a> 关系表达式</h2><p>关系表达式用来表示两个操作数之间的大小关系。关系表达式的运算结果是一个布尔型的变量。如果它表示的关系成立，则结果的值为真（TRUE）；否则，结果的值为假（FALSE）。关系表达式的运算符包括：=（等于）、&lt;&gt;（不等于）、&lt;（小于）、&lt;=（小于等于）、&gt;（大于）、&gt;=（大于等于）</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token string">#b</span> <span class="token operator">&gt;</span> <span class="token string">#c</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="逻辑表达式" tabindex="-1"><a class="header-anchor" href="#逻辑表达式" aria-hidden="true">#</a> 逻辑表达式</h2><p>逻辑表达式用来表示逻辑上的“与”、“或”、“非”、“异或”等关系。逻辑表达式是将操作数按位（bit）进行逻辑运算，其结果的数据类型取决于操作数的数据类型。例如，两个布尔型的数据进行逻辑运算时，其结果为布尔型变量；若两个字（WORD）类型的数据进行逻辑运算，其结果为字；如果一个字节型数据与字数据进行逻辑运算，其结果的数据类型仍然为字。逻辑表达式的运算符包括：AND（与）、NOT（非）、OR（或）、XOR（异或）。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token string">#a</span> <span class="token operator">:=</span> <span class="token string">#b</span> AND <span class="token string">#c</span><span class="token punctuation">;</span>
<span class="token string">#a</span> <span class="token operator">:=</span> <span class="token string">#b</span> OR <span class="token string">#c</span><span class="token punctuation">;</span>
<span class="token string">#a</span> <span class="token operator">:=</span> NOT <span class="token string">#c</span><span class="token punctuation">;</span>
<span class="token string">#a</span> <span class="token operator">:=</span> <span class="token string">#b</span> XOR <span class="token string">#c</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="语句结构" tabindex="-1"><a class="header-anchor" href="#语句结构" aria-hidden="true">#</a> 语句结构</h1><h2 id="选择语句" tabindex="-1"><a class="header-anchor" href="#选择语句" aria-hidden="true">#</a> 选择语句</h2><p>选择结构用来根据某些条件来选择性的执行代码。 选择结构包括IF语句和CASE语句。</p><h3 id="_1-if语句" tabindex="-1"><a class="header-anchor" href="#_1-if语句" aria-hidden="true">#</a> 1 IF语句</h3><p>IF语句用来判断某种条件是否满足。如果满足的话，则执行其内部的代码。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">IF</span> <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">IF</span> <span class="token string">#b</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span>
        <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    END_IF<span class="token punctuation">;</span>
    
ELSIF <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">THEN</span>
    <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">11</span><span class="token punctuation">;</span>

<span class="token keyword">ELSE</span>
    <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IF条件成立执行if的内容，否则有elsIF执行有else执行else的语句。二者都没有就执行end_if之后的语句。</p><h3 id="_2-case语句" tabindex="-1"><a class="header-anchor" href="#_2-case语句" aria-hidden="true">#</a> 2 CASE语句</h3><p>CASE语句用来完成多分枝的选择判断，比如下面的代码：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">CASE</span> <span class="token string">#a</span> <span class="token keyword">OF</span>
    <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token number">2</span><span class="token operator">..</span><span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">111</span><span class="token punctuation">;</span>
        <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">111</span><span class="token punctuation">;</span>
        <span class="token string">#b</span>oolsc <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
END_CASE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当case后的值与下面的值相等时，如a=1时就会执行b=1，boolsc=0语句。如果与下列所有结果都不相等就会执行else中的语句。后执行end_case后的语句。</p><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h2><p>循环结构可以在某种条件下反复执行某段代码，包括FOR语句、WHILE语句和REPEAT语句。</p><h3 id="_1-for语句" tabindex="-1"><a class="header-anchor" href="#_1-for语句" aria-hidden="true">#</a> 1 FOR语句</h3><p>FOR语句用于以次数确定的方式来执行某段代码。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">FOR</span> <span class="token string">#c</span>ount <span class="token operator">:=</span> <span class="token number">1</span> <span class="token keyword">TO</span> <span class="token number">100</span> <span class="token keyword">DO</span>
    <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token string">#c</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不写参数时，count会自增1.</p><p>如果想要自定义count的步数可以使用带by的语句</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">FOR</span> <span class="token string">#c</span>ount <span class="token operator">:=</span> <span class="token number">1</span> <span class="token keyword">TO</span> <span class="token number">100</span> BY <span class="token number">2</span> <span class="token keyword">DO</span>
    <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token string">#c</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>

<span class="token keyword">FOR</span> <span class="token string">#c</span>ount <span class="token operator">:=</span> <span class="token number">1000</span> <span class="token keyword">TO</span> <span class="token number">1</span> BY <span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">DO</span>
    <span class="token string">#c</span> <span class="token operator">:=</span> <span class="token string">#c</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_FOR<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以每次count加2以2为步数自增或自减。但是当自减时，count的值需要大于等于to后面的值，不然会发生错误</p><h3 id="_2-while语句" tabindex="-1"><a class="header-anchor" href="#_2-while语句" aria-hidden="true">#</a> 2 WHILE语句</h3><p>WHILE语句适用于次数不确定的循环。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">WHILE</span> <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DO</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token string">#b</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
END_WHILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要a=1条件成立就会一直执行程序。这样会发送死循环，所以while要配合条件退出指令使用</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">WHILE</span> <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DO</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token string">#b</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    
    <span class="token keyword">IF</span> <span class="token string">#b</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">THEN</span>
        <span class="token keyword">EXIT</span><span class="token punctuation">;</span>
    END_IF<span class="token punctuation">;</span>
END_WHILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-repeat语句" tabindex="-1"><a class="header-anchor" href="#_3-repeat语句" aria-hidden="true">#</a> 3 REPEAT语句</h3><p>REPEAT 语句用来重复执行某段代码直到满足某种条件退出循环。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">REPEAT</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token string">#b</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">UNTIL</span> <span class="token string">#b</span> <span class="token operator">=</span> <span class="token number">12</span> END_REPEAT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样可以使用EXIT语句退出REPEAT循环。 循环语句的内部也可以再嵌套循环语句.</p><h1 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h1>`,40)),a("blockquote",null,[a("p",null,[n[5]||(n[5]=s("所谓沿信号，是指信号的一种动态变化，包括上升沿和下降沿两种，上升沿是指信号从无到有，（信号从0变为1）的过程，下降沿是指信号从有到无（信号从1变为0）的过程，这里的信号都是指数字量。 可以看出，无论是上升沿还是下降沿，信号都是处于动态而非稳态。在")),a("a",T,[n[3]||(n[3]=s("工控")),t(e)]),n[6]||(n[6]=s("上，有时候需要捕捉信号的这种动态变化，以便触发相对应的动作。这种捕捉，在软件上，需要使用沿信号检测指令来实现。 几乎所有的")),a("a",E,[n[4]||(n[4]=s("PLC编程")),t(e)]),n[7]||(n[7]=s("语言都提供沿信号检测指令，SCL也不例外。"))])]),n[13]||(n[13]=p(`<h2 id="边沿指令" tabindex="-1"><a class="header-anchor" href="#边沿指令" aria-hidden="true">#</a> 边沿指令</h2><h3 id="_1上升沿信号检测指令-r-trig" tabindex="-1"><a class="header-anchor" href="#_1上升沿信号检测指令-r-trig" aria-hidden="true">#</a> <strong>1上升沿信号检测指令</strong> R_TRIG</h3><p>R_TRIG指令用来检测上升沿信号，名称中R表示Rising,即上升的意思。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>#R_TRIG_Instance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

&quot;R_TRIG_DB&quot;<span class="token punctuation">(</span>CLK<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
            Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>R_TRIG_Instance或R_TRIG_DB：是自动生成的背景数据块的名称 CLK：是要检测的信号地址： Q：是输出信号的地址；</p><p>该指令将检测信号的先前状态值放在背景数据块中，并与信号的当前值进行比较。如果先前状态值为0，当前状态值为1，则属于上升沿变化，则Q的输出值会在一个扫面周期内保持为真（1）。</p><h4 id="上升沿信号检测应用" tabindex="-1"><a class="header-anchor" href="#上升沿信号检测应用" aria-hidden="true">#</a> <strong>上升沿信号检测应用</strong></h4><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;R_TRIG_DB_1&quot;<span class="token punctuation">(</span>CLK<span class="token operator">:=</span>#temp_in_start<span class="token punctuation">,</span>Q<span class="token operator">=</span><span class="token operator">&gt;</span>#out_sing_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">IF</span> #out_sing_1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">192</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-下降沿信号检测指令-f-trig" tabindex="-1"><a class="header-anchor" href="#_2-下降沿信号检测指令-f-trig" aria-hidden="true">#</a> 2 下降沿信号检测指令 F_TRIG</h3><p>与上升沿相对应的是下降沿。指令F_TRIG用来检测下降沿信号，名称的F是Falling的缩写，即下降的意思。</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;F_TRIG_DB&quot;<span class="token punctuation">(</span>CLK<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
            Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>F_TRIG_DB:是自动生成的背景数据块的名称 CLK：是需要检测的信号地址； Q：是输出信号的地址；</p><p>该指令将检测信号的先前状态值存放在背景数据块中，并与当前值进行比较。如果先前值为1，当前状态值为0，则属于下降沿变化，则Q的输出值会在一个扫描周期内保持为真（1）。</p><h4 id="下降沿的信号检测应用" tabindex="-1"><a class="header-anchor" href="#下降沿的信号检测应用" aria-hidden="true">#</a> 下降沿的信号检测应用</h4><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;F_TRIG_DB&quot;<span class="token punctuation">(</span>CLK<span class="token operator">:=</span>#temp_in_start<span class="token punctuation">,</span>Q<span class="token operator">=</span><span class="token operator">&gt;</span>#out_sing_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">IF</span> #out_sing_1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">192</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="沿信号检测指令的另一种方式" tabindex="-1"><a class="header-anchor" href="#沿信号检测指令的另一种方式" aria-hidden="true">#</a> 沿信号检测指令的另一种方式</h3><p>如果在程序中需要多次使用沿检测指令，建议使用FB（功能块）而非FC（功能）。由于FB有自己的背景数据块，这样，我们可以把沿检测指令需要保存的静态数据存放到FB的背景数据块中，并且可以采用多重背景数据块的方式，来减少程序中需要添加的数据块（DB）的数量。</p><p>向FB中添加上升沿触发指令：R_TRIG，在出现添加背景数据块对话框中选择“多重背景数据”，并命名为：R_TRIG_Motor1,如下图：</p><figure><img src="`+d+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>实例的使用：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;R_TRIG_DB&quot;<span class="token punctuation">(</span>CLK <span class="token operator">:=</span> #temp_in_start<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">IF</span> &quot;R_TRIG_DB&quot;<span class="token punctuation">.</span>Q <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    <span class="token string">#b</span> <span class="token operator">:=</span> <span class="token number">192</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="延时指令" tabindex="-1"><a class="header-anchor" href="#延时指令" aria-hidden="true">#</a> 延时指令</h2><p><strong>使用定时器是将定时器语句放在判断、分支语句外部。确保定时器会被每个扫描区间扫描到才会自动复位。否则会出现定时器无法被断开的情况</strong></p><h3 id="_1、脉冲定时器-tp-指令" tabindex="-1"><a class="header-anchor" href="#_1、脉冲定时器-tp-指令" aria-hidden="true">#</a> 1、脉冲定时器（TP）指令</h3><p>输出一个指定时间的脉冲，当定时完成时脉冲结束。指令再次使能的时候重新开始输出计数</p>`,25)),a("p",null,[n[9]||(n[9]=s("脉冲定时器（TP）指令的作用是用来产生")),a("a",f,[n[8]||(n[8]=s("脉冲信号")),t(e)]),n[10]||(n[10]=s("。从指令列表中添加TP指令时会自动生成背景数据块（默认名称IEC_Timer_0_DB）"))]),n[14]||(n[14]=p(`<div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Timer_0_DB&quot;<span class="token punctuation">.</span>TP<span class="token punctuation">(</span>IN<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                    PT<span class="token operator">:=</span>_time_in_<span class="token punctuation">,</span>
                    Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                    ET<span class="token operator">=</span><span class="token operator">&gt;</span>_time_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脉冲定时器（TP）指令有四个引脚参数： 1、IN：布尔型变量，输入值，当该引脚信号从0变为1时（上升沿）定时器开始计时； 2、PT：时间型变量，输入值，Preset Time，表示定时器的预设时间值； 3、Q：布尔型变量，输出值，定时器标志位； 4、ET：时间型变量，输出值，表示定时器的当前时间；</p><p>脉冲定时器的工作过程如下： 1、IN参数的上升沿信号启动定时器开始计时，此时Q输出信号的值为1；随着时间的流逝，当定时器的当前值大于预设值PT时，即使IN的信号仍然为1，这时候输出信号Q的值也为0； 2、当定时器激活后，无论输入参数IN的值是否发生变化，定时器都将持续计时，直到预设的时间值走完； 3、定时器计时结束后，IN参数信号的上升沿会重新激活定时器；</p><p>脉冲定时器（TP）的时序图如下:</p><figure><img src="`+u+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_2、延时接通定时器-ton-指令" tabindex="-1"><a class="header-anchor" href="#_2、延时接通定时器-ton-指令" aria-hidden="true">#</a> 2、延时接通定时器(TON)指令</h3><p>延时接通定时器(TON)指令用于信号的延时接通。从指令列表中添加该指令时会自动生成背景数据块(默认名称IEC_Timer_0_DB)，指令初始状态如下:</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>#IEC_Timer_0_Instance<span class="token punctuation">(</span>IN<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                      PT<span class="token operator">:=</span>_time_in_<span class="token punctuation">,</span>
                      Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                      ET<span class="token operator">=</span><span class="token operator">&gt;</span>_time_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TON指令也有四个引脚，其含义与之前介绍的TP(脉冲定时器)指令的引脚参数相同。</p><p>延时接通定时器的工作过程如下: 1、引脚IN的上升沿信号(0变为1)启动定时器开始计时，此时输出引脚Q的值为0; 2、随着时间的流逝，当定时器的当前值大于预设的时间值，并且输入引脚IN的信号值仍保持为1时，输出引脚Q的值从0变为1; 3、如果在计时的过程中，输入参数IN的值从1变为0，则定时器停止计时;直到下一次上升沿(从0变为1)后重新计时;延时接通定时器(TON)的时序图如下:</p><figure><img src="https://img-blog.csdnimg.cn/direct/bcb477dbcc754cce802bc6b2c4884e40.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_3、延时断开定时器-tof-指令" tabindex="-1"><a class="header-anchor" href="#_3、延时断开定时器-tof-指令" aria-hidden="true">#</a> 3、延时断开定时器(TOF)指令</h3><p>延时断开定时器指令TOF用于信号的延时断开。从指令列表中添加该指令时会自动生成背景数据块(默认名称IEC_Timer_0_DB)I指令初始状态如下:</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Timer_0_DB_1&quot;<span class="token punctuation">.</span>TOF<span class="token punctuation">(</span>IN<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                       PT<span class="token operator">:=</span>_time_in_<span class="token punctuation">,</span>
                       Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                       ET<span class="token operator">=</span><span class="token operator">&gt;</span>_time_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>延时断开定时器(TOF) 指令也有四个引脚，其含义与之前介绍的TP(脉冲定时器)指令的引脚参数相同。</p><p>延时断开定时器(TOF)指令的工作过程如下: 1、当输入信号IN从0变为1时，定时器使能，此时输出Q的值为1; 2、当输入信号IN从1变为0时，定时器开始计时，输出Q的值保持为1; 3、随着时间的流逝，当时间值ET大于预设值PT并且输入信号IN的值保持为0时，输出Q的值变为0; 4、若在计时过程中，输入信号IN的值从0变为1，则定时器复位;再次从1变为0时，定时器重新开始计时。延时断开定时器时序图如下:</p><figure><img src="`+k+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_4、保持型延时接通定时器-tonr-指令" tabindex="-1"><a class="header-anchor" href="#_4、保持型延时接通定时器-tonr-指令" aria-hidden="true">#</a> 4、保持型延时接通定时器(TONR)指令</h3><p>保持型延时接通定时器指令TONR可以起到时间累加的作用。 从指令列表中添加TONR指令时会自动生成背景数据块(默认名称 IEC_Timer_0_DB),指令的初始状态如下:</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Timer_0_DB_2&quot;<span class="token punctuation">.</span>TONR<span class="token punctuation">(</span>IN<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                        R<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                        PT<span class="token operator">:=</span>_time_in_<span class="token punctuation">,</span>
                        Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                        ET<span class="token operator">=</span><span class="token operator">&gt;</span>_time_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TONR指令有五个引脚参数，其中IN、PT、Q、ET四个引脚含义与之前介绍的 TP (脉冲定时器)指令的引脚参数相同。</p><p>R为复位信号引脚，当其信号值从0变为1时，当前时间ET值和输出Q的值均复位为0;</p><p>保持型延时接通定时器可以对输入信号IN的状态1信号进行累加。 当输入信号IN从0变为1时，定时器开始计时，此时输出Q的值为0。定时器计时的过程中，流逝的时间被记录在ET中。若在到达预设值PT之前，输入信号从1变为0，则定时器停止计时。当下次输入信号IN从0变为1时，定时器从上次记录的 ET值开始继续计时，直到ET累计的时间大于或等于PT时，输出Q变为1;</p><p>当输出Q变为1时，无论输入IN的信号怎么变化，都保持为1;当复位信号R从0变为1时，输出Q和时间流逝值ET均被复位为0;保持型延时接通定时器的时序图如下:</p><figure><img src="`+v+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_5、复位定时器指令reset-timer" tabindex="-1"><a class="header-anchor" href="#_5、复位定时器指令reset-timer" aria-hidden="true">#</a> 5、复位定时器指令RESET_TIMER</h3><p>RESET_TIMER可用于IEC定时器的复位，指令的初始状态如下:</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>RESET_TIMER<span class="token punctuation">(</span>_iec_timer_in_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议将其放入IF语句中，以便在可控的条件下进行复位。该指令执行后，定时器的当前值及输出值均复位为0;</p><p>实例代码：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code><span class="token keyword">IF</span> <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
    #IEC_Timer_0_Instance_1<span class="token punctuation">(</span>IN <span class="token operator">:=</span> #start<span class="token punctuation">,</span>
                            PT <span class="token operator">:=</span> #preset_time<span class="token punctuation">,</span>
                            Q <span class="token operator">=</span><span class="token operator">&gt;</span> #time_q<span class="token punctuation">,</span>
                            ET <span class="token operator">=</span><span class="token operator">&gt;</span> #time_et<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token string">#a</span> <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>

<span class="token keyword">IF</span> <span class="token string">#a</span> <span class="token operator">=</span> <span class="token number">0</span> AND #IEC_Timer_0_Instance_1<span class="token punctuation">.</span>ET <span class="token operator">&lt;</span> T<span class="token string">#25</span>s <span class="token keyword">THEN</span>
    RESET_TIMER<span class="token punctuation">(</span>TIMER <span class="token operator">:=</span>#IEC_Timer_0_Instance_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token string">#a</span> <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
END_IF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析： 当变量 #started 的信号状态为“0”时，则在操作数“Tag_Start”上出现信号上升沿时执行“接通延时”指令。存储在背景数据块“IEC_Timer_0_DB_3”中的 IEC 定时器启动，持续操作数“Tag_PresetTime”中已指定的一段时间。// 如果超出“Tag_PresetTime”操作数中指定的持续时间，则置位操作数 Tag_Status（1）。// 只要操作数“Tag_Start”的信号状态为“1”，则参数 Q 将保持置位。启动输入的信号状态从“1”变为“0”时，复位参数 Q 的操作数。</p><p>如果 IEC 定时器“IEC_Timer_0_DB_3”的超出时间小于 25s，则执行“复位定时器”指令，并复位存储在“IEC_Timer_0_DB_3”背景数据块中的定时器。.</p><h3 id="_6、定时器预设值设置指令preset-timer" tabindex="-1"><a class="header-anchor" href="#_6、定时器预设值设置指令preset-timer" aria-hidden="true">#</a> 6、定时器预设值设置指令PRESET TIMER</h3><p>PRESET_TIMER可用于设置IEC定时器的预设时间值，指令初始状态如下:</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>PRESET_TIMER<span class="token punctuation">(</span>PT<span class="token operator">:=</span>_time_in_<span class="token punctuation">,</span>
             TIMER<span class="token operator">:=</span>_iec_timer_in_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中: 参数PT为需要设置的时间值; TIMER: 为IEC定时器名称/编号;</p><p>与复位定时器指令RESET_TIMER的使用方式新、相同。</p><h2 id="计数器指令" tabindex="-1"><a class="header-anchor" href="#计数器指令" aria-hidden="true">#</a> 计数器指令</h2><p>S7-1200和S7-1500系列PLC的使用IEC计数器，包括三类：加计数器（CTU,Count UP）、减计数器（CTD,Count Down）和加减计数器（CTUD,Count up and down）。</p><h3 id="_1-ctu-增计数" tabindex="-1"><a class="header-anchor" href="#_1-ctu-增计数" aria-hidden="true">#</a> 1.CTU：增计数</h3><p>加计数器指令（CTU）用来进行向上计数。</p><p>从指令列表中添加该指令时会提示生成背景数据块（或多重背景数据块）指令的初始状态如下：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Counter_0_DB_1&quot;<span class="token punctuation">.</span>CTU<span class="token punctuation">(</span>CU<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                         R<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                         PV<span class="token operator">:=</span>_int_in_<span class="token punctuation">,</span>
                         Q<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                         CV<span class="token operator">=</span><span class="token operator">&gt;</span>_int_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用“加计数”指令递增 CV 参数的值。如果参数 CU 的信号状态从“0”变为“1”（信号上升沿），则执行该指令，同时参数 CV 的当前计数器值加“1”。每检测到一个上升沿，计数器值就会递增，直到其达到参数 CV 中所指定数据类型的上限（32767）。达到上限时，参数 CU 的信号状态将不再影响该指令。</p><p>可以通过参数 Q 查询计数状态。参数 Q 的信号状态由参数 PV 决定。如果当前计数器值大于或等于参数 PV 的值，则参数 Q 的信号状态将置位为“1”。在其它任何情况下，参数 Q 的信号状态均为“0”。也可以为参数 PV 指定一个常数。</p><p>参数 R 的信号状态变为“1”时，参数 CV 的值将复位为“0”。只要参数 R 的信号状态为“1”，参数 CU 的信号状态就不会影响该指令。</p><figure><img src="`+b+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_2-ctd-减计数" tabindex="-1"><a class="header-anchor" href="#_2-ctd-减计数" aria-hidden="true">#</a> 2.CTD：减计数</h3><p>加计数器指令（CTD）用来进行向下计数。</p><p>从指令列表中添加该指令时会提示生成背景数据块（或多重背景数据块）指令的初始状态如下：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Counter_0_DB_2&quot;<span class="token punctuation">.</span>CTD<span class="token punctuation">(</span>CD<span class="token operator">:=</span>#start<span class="token punctuation">,</span>
                         LD<span class="token operator">:=</span>#reset<span class="token punctuation">,</span>
                         PV<span class="token operator">:=</span>#input<span class="token punctuation">,</span>
                         Q<span class="token operator">=</span><span class="token operator">&gt;</span>#<span class="token keyword">out</span><span class="token punctuation">,</span>
                         CV<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">#ac</span>t_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“减计数”指令用于递减 CV 参数的值。如果参数 CD 的信号状态从“0”变为“1”（信号上升沿），则执行该指令，同时参数 CV 的当前计数器值减 1。每检测到一个信号上升沿，计数器值就会递减 1，直到达到指定数据类型的下限为止（-128）。达到下限时，参数 CD 的信号状态将不再影响该指令。</p><p>可以通过参数 Q 查询计数状态。如果当前计数器值小于或等于“0”，则参数 Q 的信号状态将置位为“1”。在其它任何情况下，参数 Q 的信号状态均为“0”。也可以为参数 PV 指定一个常数。</p><p>当参数 LD 的信号状态变为“1”时，参数 CV 的值会设置为参数 PV 的值。只要参数 LD 的信号状态为“1”，参数 CD 的信号状态就不会影响该指令。</p><figure><img src="`+m+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_3-ctud-加减计数" tabindex="-1"><a class="header-anchor" href="#_3-ctud-加减计数" aria-hidden="true">#</a> 3.CTUD：加减计数</h3><p>加减计数器（CTUD）指令即可以向上计数，也可以向下计数。 从指令列表中添加该指令时会提示生成背景数据块（或多重背景数据块）指令的初始状态如下：</p><div class="language-pascal line-numbers-mode" data-ext="pascal"><pre class="language-pascal"><code>&quot;IEC_Counter_0_DB_3&quot;<span class="token punctuation">.</span>CTUD<span class="token punctuation">(</span>CU<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                          CD<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                          R<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                          LD<span class="token operator">:=</span>_bool_in_<span class="token punctuation">,</span>
                          PV<span class="token operator">:=</span>_int_in_<span class="token punctuation">,</span>
                          QU<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                          QD<span class="token operator">=</span><span class="token operator">&gt;</span>_bool_out_<span class="token punctuation">,</span>
                          CV<span class="token operator">=</span><span class="token operator">&gt;</span>_int_out_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>功能与自增和自减一样，就是将两个指令杂糅在一起。在同时需要对一个数实现自增和自减操作时比较便利。</p>',61))])}const N=i(g,[["render",I],["__file","07.SCL语句.html.vue"]]);export{N as default};
