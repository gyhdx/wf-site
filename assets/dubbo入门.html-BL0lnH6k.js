import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c,o as l,b as s,a as t,e as a,d as p}from"./app-DBc2jY3V.js";const u="/wf-site/assets/image-20230919231303421-BwXbxVFW.png",r={},d={href:"https://cn.dubbo.apache.org/zh-cn/docs/quick-start/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.dubbo.apache.org/zh-cn/docs/new-in-dubbo3/",target:"_blank",rel:"noopener noreferrer"};function v(b,n){const e=i("ExternalLinkIcon");return l(),c("div",null,[n[2]||(n[2]=s("h1",{id:"dubbo入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#dubbo入门","aria-hidden":"true"},"#"),a(" dubbo入门")],-1)),n[3]||(n[3]=s("h2",{id:"_1-快速开始",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-快速开始","aria-hidden":"true"},"#"),a(" 1.快速开始")],-1)),s("p",null,[s("a",d,[n[0]||(n[0]=a("Spring Boot 快速开发 Dubbo 服务")),p(e)])]),n[4]||(n[4]=t('<h2 id="_2-dubbo简介" tabindex="-1"><a class="header-anchor" href="#_2-dubbo简介" aria-hidden="true">#</a> 2.dubbo简介</h2><p>dubbox 基于 dubbo 上做了一些扩展，如加了服务可 restful 调用，更新了开源组件等。</p><h3 id="_1-dubbo-和-spring-cloud-的关系" tabindex="-1"><a class="header-anchor" href="#_1-dubbo-和-spring-cloud-的关系" aria-hidden="true">#</a> 1.Dubbo 和 Spring Cloud 的关系？</h3><h4 id="二者的关系" tabindex="-1"><a class="header-anchor" href="#二者的关系" aria-hidden="true">#</a> 二者的关系</h4><p>Dubbo 是 SOA 时代的产物，它的关注点主要在于服务的调用，流量分发、流量监控和熔断。而 Spring Cloud 诞生于微服务架构时代，考虑的是微服务治理的方方面面，另外由于依托了 Spirng、Spirng Boot 的优势之上，两个框架在开始目标就不一致，Dubbo定位服务治理、Spirng Cloud 是一个生态。</p><h4 id="dubbo与spring-cloud的区别" tabindex="-1"><a class="header-anchor" href="#dubbo与spring-cloud的区别" aria-hidden="true">#</a> dubbo与Spring cloud的区别</h4><figure><img src="'+u+'" alt="image-20230919231303421" tabindex="0" loading="lazy"><figcaption>image-20230919231303421</figcaption></figure><ul><li>底层协议：Dubbo 底层是使用 Netty 这样的 NIO 框架，是基于TCP 协议传输的，配合以 Hession 序列化完成 RPC 通信。而 SpringCloud 是基于 Http 协议+Rest 接口调用远程过程的通信，相对来说，Http 请求会有更大的报文，占的带宽也会更多。但是REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖。</li><li>注册中心：springcloud推荐eurka，而dubbo一般使用zookeeper</li><li>模型定义：springcloud将一个应用定义为一个服务，而dubbo将一个接口定义为一个服务（dubbo3.0都也将一个应用定义为一个服务，和springcloud其目的是为了降低）</li></ul><h2 id="_2-dubbo3新特性" tabindex="-1"><a class="header-anchor" href="#_2-dubbo3新特性" aria-hidden="true">#</a> 2.dubbo3新特性</h2>',9)),s("p",null,[s("a",k,[n[1]||(n[1]=a("What’s New in Dubbo3")),p(e)])]),n[5]||(n[5]=t(`<h3 id="注册模型的改变" tabindex="-1"><a class="header-anchor" href="#注册模型的改变" aria-hidden="true">#</a> 注册模型的改变</h3><p>在服务注册领域，市⾯上有两种模型，⼀种是应⽤级注册，⼀种是接⼝级注册，在Spring Cloud中，⼀ 个应⽤是⼀个微服务，⽽在Dubbo2.7中，⼀个接⼝是⼀个微服务。 <br>所以，Spring Cloud在进⾏服务注册时，是把应⽤名以及应⽤所在服务器的IP地址和应⽤所绑定的端⼝注册到注册中⼼，相当于key是应⽤名，value是ip+port，⽽在Dubbo2.7中，是把接⼝名以及对应应⽤的IP地址和所绑定的端⼝注册到注册中⼼，相当于key是接⼝名，value是ip+port。<br> 所以在Dubbo2.7中，⼀个应⽤如果提供了10个Dubbo服务，那么注册中⼼中就会存储10对keyvalue，⽽ Spring Cloud就只会存⼀对keyvalue，所以以Spring Cloud为⾸的应⽤级注册是更加适合的。 所以Dubbo3.0中将注册模型也改为了应⽤级注册，提升效率节省资源的同时，通过统⼀注册模型，也为各个微服务框架的互通打下了基础。</p><blockquote><p>对比 2.x 版本，Dubbo3 版本</p><ul><li>服务发现资源利用率显著提升。 <ul><li>对比接口级服务发现，单机常驻内存下降 50%，地址变更期 GC 消耗下降一个数量级 (百次 -&gt; 十次)</li><li>对比应用级服务发现，单机常驻内存下降 75%，GC 次数趋零</li></ul></li><li>Dubbo 协议性能持平，Triple 协议在网关、Stream吞吐量方面更具优势。 <ul><li>Dubbo协议 （3.0 vs 2.x），3.0 实现较 2.x 总体 qps rt 持平，略有提升</li><li>Triple协议 vs Dubbo协议，直连调用场景 Triple 性能并无优势，其优势在网关、Stream调用场景。</li></ul></li></ul></blockquote><h3 id="新一代rpc协议" tabindex="-1"><a class="header-anchor" href="#新一代rpc协议" aria-hidden="true">#</a> 新⼀代RPC协议</h3><pre><code>定义了全新的 RPC 通信协议 – Triple，⼀句话概括 Triple：它是基于 HTTP/2 上构建的 RPC 协 议，完全兼容 gRPC，并在此基础上扩展出了更丰富的语义。 使⽤ Triple 协议，⽤户将获得以下 能⼒
</code></pre><ul><li>更容易到适配⽹关、Mesh架构，Triple 协议让 Dubbo 更⽅便的与各种⽹关、Sidecar 组件配 合⼯作。</li><li>多语⾔友好，推荐配合 Protobuf 使⽤ Triple 协议，使⽤ IDL 定义服务，使⽤ Protobuf 编码业 务数据。</li><li>流式通信⽀持。Triple 协议⽀持 Request Stream、Response Stream、Bi-direction Stream</li></ul><p>当使⽤Triple协议进⾏RPC调⽤时，⽀持多种⽅式来调⽤服务，只不过在服务接⼝中要定义不同的⽅法， ⽐如：</p><h4 id="unary、server-stream与-client-stream" tabindex="-1"><a class="header-anchor" href="#unary、server-stream与-client-stream" aria-hidden="true">#</a> UNARY、SERVER_STREAM与 CLIENT_STREAM</h4><ul><li>UNARY:和2.7之前一样直接调用</li><li>SERVER_STREAM：服务端使用StreamObserver将消息发送到客户端</li><li>CLIENT_STREAM：服务端使用StreamObserver将消息发送到客户端后客户端可以通过 StreamObserver实现于服务端的消息交互</li></ul><p>服务端实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;wf-v2&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// SERVER_STREAM</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHelloServerStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">&quot;server : &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// CLIENT_STREAM</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sayHelloStream</span><span class="token punctuation">(</span><span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    response<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">&quot;data:&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;completed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//        return restTemplate.getForObject(&quot;http://localhost:8080/user&quot;,String.class);</span>

            <span class="token class-name">String</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// SERVER_STREAM</span>
            userService<span class="token punctuation">.</span><span class="token function">sayHelloServerStream</span><span class="token punctuation">(</span><span class="token string">&quot;wf&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;completed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// CLIENT_STREAM</span>
            <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> clientCompleted <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">sayHelloStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StreamObserver</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;client get :&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;client completed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            clientCompleted<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">&quot;send to user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> user<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13))])}const S=o(r,[["render",v],["__file","dubbo入门.html.vue"]]);export{S as default};
