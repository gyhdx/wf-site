import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a as g}from"./app-DBc2jY3V.js";const s="/wf-site/assets/image-20240321165623089-IMUPjshc.png",n="/wf-site/assets/image-20240321165909612-DsxukuCe.png",r="/wf-site/assets/image-20240321165955208-BJYe-GXp.png",o="/wf-site/assets/image-20240321171457506-DjBWU25Q.png",p="/wf-site/assets/image-20240321172358348-CEEKActn.png",d="/wf-site/assets/image-20240321173818224-B022Zwmf.png",c="/wf-site/assets/image-20240321174220518-BTGEYMQ1.png",f="/wf-site/assets/image-20240321174822993-CIGQ0wOU.png",m="/wf-site/assets/image-20240321174836121-DR0ZZ_Hg.png",l="/wf-site/assets/image-20240321175237940-L0YeaUx4.png",h="/wf-site/assets/image-20240321175546532-zLYszJxm.png",u="/wf-site/assets/image-20240321180042435-K20PykAr.png",_="/wf-site/assets/image-20240321180326675-BGwxlRKg.png",b="/wf-site/assets/image-20240321180504296-CR_m0Gd3.png",x="/wf-site/assets/image-20240321181745878-4Rj78F6c.png",z="/wf-site/assets/image-20240321184403204-CXJXK9kN.png",y="/wf-site/assets/image-20240321185729939-n8B2zG1i.png",w="/wf-site/assets/image-20240321185937032-DUrGOJI2.png",C="/wf-site/assets/image-20240321190056394-CcgyC_2s.png",B="/wf-site/assets/image-20240321190148507-yA9HuDlm.png",D="/wf-site/assets/image-20240321190434349-Bmaj5-bP.png",T="/wf-site/assets/image-20240321190617820-d9AOMla3.png",P="/wf-site/assets/image-20240321190905967-LTXDfqPP.png",O="/wf-site/assets/image-20240321190948650-Cl7oza21.png",R="/wf-site/assets/image-20240321191113940-BETFkCaF.png",L="/wf-site/assets/image-20240321191128926-BgbaZ7cp.png",v="/wf-site/assets/image-20240321191328099-DpIv0FlA.png",F="/wf-site/assets/image-20240321192340915-lo5HRslr.png",I="/wf-site/assets/image-20240321193616462-K5ivUnhF.png",M="/wf-site/assets/image-20240321193802614-BPiyIVGf.png",N="/wf-site/assets/image-20240321193811541-Clu-NpcC.png",U="/wf-site/assets/image-20240321194148809-BucgAVPC.png",E="/wf-site/assets/image-20240321194628101-CVmhhnM6.png",A="/wf-site/assets/image-20240321195342211-xs3D4B2t.png",G="/wf-site/assets/image-20240321195449903-CR6B_hM9.png",S="/wf-site/assets/image-20240321195558426-DVEPVMl_.png",X="/wf-site/assets/image-20240321200101931-DOjoDrvN.png",Y="/wf-site/assets/image-20240321200247443-DVeeGawF.png",k="/wf-site/assets/image-20240321200628109-Bpgx83M4.png",H="/wf-site/assets/image-20240321201852542-Doo1QATt.png",K="/wf-site/assets/image-20240321201045601-ByQ9oCv9.png",V="/wf-site/assets/image-20240321201540213-W7UqR7Ja.png",J="/wf-site/assets/image-20240321201653613-CA51ayFB.png",Q="/wf-site/assets/image-20240321202138830-O4QdeNoJ.png",j="/wf-site/assets/image-20240321201927873-eHIqSkX3.png",Z="/wf-site/assets/image-20240321202230920-Cu79AvH_.png",$={};function q(W,i){return t(),e("div",null,i[0]||(i[0]=[g('<h2 id="_1-位指令" tabindex="-1"><a class="header-anchor" href="#_1-位指令" aria-hidden="true">#</a> 1.位指令</h2><p>指令是指对PLC发出的操作命令，告诉PLC做什么、怎么做。一条完整的指令应该包含操作码和操作数，如“LDX1”、“SET YO”等，其中，“LD和SET”是操作码，“X1和YO”是操作数指令系统中可以没有操作数，如RET、END。</p><p>以下是几个常见的指令。</p><figure><img src="'+s+'" alt="image-20240321165623089" tabindex="0" loading="lazy"><figcaption>image-20240321165623089</figcaption></figure><h3 id="边沿触发与置复位指令" tabindex="-1"><a class="header-anchor" href="#边沿触发与置复位指令" aria-hidden="true">#</a> 边沿触发与置复位指令</h3><h4 id="脉冲与时序图" tabindex="-1"><a class="header-anchor" href="#脉冲与时序图" aria-hidden="true">#</a> 脉冲与时序图</h4><p><strong>脉冲</strong>：在数字操作系统中，所有的信号均为开关量，即信号状态只有0和1两种状态，用触点描述就是 断开与闭合状态。</p><figure><img src="'+n+'" alt="image-20240321165909612" tabindex="0" loading="lazy"><figcaption>image-20240321165909612</figcaption></figure><p>一般称高电平为1，低电平为0.是正逻辑。反之则称为负逻辑。</p><p><strong>时序图</strong>：按时间顺序显示个对象关系的曲线示意图</p><figure><img src="'+r+'" alt="image-20240321165955208" tabindex="0" loading="lazy"><figcaption>image-20240321165955208</figcaption></figure><h4 id="边沿触发与置位复位" tabindex="-1"><a class="header-anchor" href="#边沿触发与置位复位" aria-hidden="true">#</a> 边沿触发与置位复位</h4><ul><li><strong>边沿触发</strong>：就是电流发生变化时的信号。低电平到高电平时的信号为上升沿。高电平到低电平的时候为下降沿</li><li><strong>置位复位</strong>：<em>set</em>将指定地址位置变成1且一直保持。复位：<em>rst</em>将地址值变为0，保持</li></ul><p>特殊：<em>zrst</em>连续复位，复位几个相连的地址。</p><figure><img src="'+o+'" alt="image-20240321171457506" tabindex="0" loading="lazy"><figcaption>image-20240321171457506</figcaption></figure><p>应用分析</p><figure><img src="'+p+'" alt="image-20240321172358348" tabindex="0" loading="lazy"><figcaption>image-20240321172358348</figcaption></figure><p>练习：</p><figure><img src="'+d+'" alt="image-20240321173818224" tabindex="0" loading="lazy"><figcaption>image-20240321173818224</figcaption></figure><figure><img src="'+c+'" alt="image-20240321174220518" tabindex="0" loading="lazy"><figcaption>image-20240321174220518</figcaption></figure><h3 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h3><p>使用定时器(T)时，用OUT指令设定定时时间。<strong>梯形图中定时器一般只能通电（有输入信号时）计时一掉电就会被置位0，可以通过一些特定写法将定时器掉电保持</strong></p><ul><li>$$ 定时器实际定时时间(t)=K{定时器时基(T0)*设定值} $$</li></ul><figure><img src="'+f+'" alt="image-20240321174822993" tabindex="0" loading="lazy"><figcaption>image-20240321174822993</figcaption></figure><figure><img src="'+m+'" alt="image-20240321174836121" tabindex="0" loading="lazy"><figcaption>image-20240321174836121</figcaption></figure><p>不作为定时器时也可以当做存储数据的数据寄存器使用。</p><p>ps：累计型定时器可以掉电保持。</p><p>练习：</p><figure><img src="'+l+'" alt="image-20240321175237940" tabindex="0" loading="lazy"><figcaption>image-20240321175237940</figcaption></figure><figure><img src="'+h+'" alt="image-20240321175546532" tabindex="0" loading="lazy"><figcaption>image-20240321175546532</figcaption></figure><h3 id="计数器" tabindex="-1"><a class="header-anchor" href="#计数器" aria-hidden="true">#</a> 计数器</h3><p>使用计数器(C)时，用OUT指令设定计数值。 一般用计数器对计数条件的上升沿进行增计数，计数值与设定值相等时，计数器触点动作，用RST指令复位触点和当前值；计数器分为16位、32位计数器和高速计数器等种类，这里仅以16位正向计数器为例进行说明。</p><figure><img src="'+u+'" alt="image-20240321180042435" tabindex="0" loading="lazy"><figcaption>image-20240321180042435</figcaption></figure><p>写法举例</p><figure><img src="'+_+'" alt="image-20240321180326675" tabindex="0" loading="lazy"><figcaption>image-20240321180326675</figcaption></figure><h2 id="_2-应用指令介绍" tabindex="-1"><a class="header-anchor" href="#_2-应用指令介绍" aria-hidden="true">#</a> 2.应用指令介绍</h2><h4 id="应用指令介绍" tabindex="-1"><a class="header-anchor" href="#应用指令介绍" aria-hidden="true">#</a> 应用指令介绍</h4><p>FX3U系列可编程控制器中准备了数据传送与比较、四则运算、数据循环和移位等基本应用指令，另外还有高速计数、高速脉冲输出等高速处理指令等，有些应用指令是将复杂的顺序功能封装而成的，因此使用这些指令将会使得编程工作量大大减轻；以下列出一些主要的应用指令：</p><figure><img src="'+b+'" alt="image-20240321180504296" tabindex="0" loading="lazy"><figcaption>image-20240321180504296</figcaption></figure><h4 id="指令阅读方法" tabindex="-1"><a class="header-anchor" href="#指令阅读方法" aria-hidden="true">#</a> 指令阅读方法</h4><figure><img src="'+x+'" alt="image-20240321181745878" tabindex="0" loading="lazy"><figcaption>image-20240321181745878</figcaption></figure><h3 id="mov指令" tabindex="-1"><a class="header-anchor" href="#mov指令" aria-hidden="true">#</a> mov指令</h3><p>格式：mov [s] [d]</p><p>将传送源s的值赋值给目标d。</p><figure><img src="'+z+'" alt="image-20240321184403204" tabindex="0" loading="lazy"><figcaption>image-20240321184403204</figcaption></figure><p><strong>在指令实际应用中需要注意，赋值指令的触发条件尽量运用边沿触发，因为被赋值的数据寄存器存储的数值不是固定不变的，根据触发条件，寄存器的值在不同时期、不同条件下给予的值是不一样的。</strong></p><p>使用</p><figure><img src="'+y+'" alt="image-20240321185729939" tabindex="0" loading="lazy"><figcaption>image-20240321185729939</figcaption></figure><p>软元件值监控</p><figure><img src="'+w+'" alt="image-20240321185937032" tabindex="0" loading="lazy"><figcaption>image-20240321185937032</figcaption></figure><h4 id="bcd转换" tabindex="-1"><a class="header-anchor" href="#bcd转换" aria-hidden="true">#</a> bcd转换</h4><p>将BIN(2进制数)转换成BCD(1O进制数)后传送的指令，PLC的运算是按照BIN(2进制)数据进行处理的，在带BCD译码的7段码显示器中显示数值时，可使用本指令。在计算机中都是2进制来保存数据，因此要把一个10进制数据转换成2进制，才能保存在计算机中，BCD码转换很好的解决了这个问题。</p><figure><img src="'+C+'" alt="image-20240321190056394" tabindex="0" loading="lazy"><figcaption>image-20240321190056394</figcaption></figure><h4 id="bin转换" tabindex="-1"><a class="header-anchor" href="#bin转换" aria-hidden="true">#</a> bin转换</h4><p>将BCD(1O进制数)转换成BIN2进制数)后传送的指令，将数字式开关之类以BCD(1O进制数)设定的数值转换成PLC运算中可以处理的BIN(2进制数]数据后读取的情况下，可使用本指令。</p><figure><img src="'+B+'" alt="image-20240321190148507" tabindex="0" loading="lazy"><figcaption>image-20240321190148507</figcaption></figure><h4 id="bcd和bin命令使用" tabindex="-1"><a class="header-anchor" href="#bcd和bin命令使用" aria-hidden="true">#</a> bcd和bin命令使用</h4><figure><img src="'+D+'" alt="image-20240321190434349" tabindex="0" loading="lazy"><figcaption>image-20240321190434349</figcaption></figure><h3 id="四则运算" tabindex="-1"><a class="header-anchor" href="#四则运算" aria-hidden="true">#</a> 四则运算</h3><p>四则运算指令：将两个软元件的值进行四则运算，得出的结果放入第三的软元件中，</p><p>常用的运算指令如下表：</p><figure><img src="'+T+'" alt="image-20240321190617820" tabindex="0" loading="lazy"><figcaption>image-20240321190617820</figcaption></figure><h4 id="加法add指令" tabindex="-1"><a class="header-anchor" href="#加法add指令" aria-hidden="true">#</a> 加法add指令</h4><p>add [s1] [s2] [d]</p><p>将s1与s2之和放入d元件中</p><figure><img src="'+P+'" alt="image-20240321190905967" tabindex="0" loading="lazy"><figcaption>image-20240321190905967</figcaption></figure><h4 id="减法sub指令" tabindex="-1"><a class="header-anchor" href="#减法sub指令" aria-hidden="true">#</a> 减法sub指令</h4><p>sub [s1] [s2] [d]</p><figure><img src="'+O+'" alt="image-20240321190948650" tabindex="0" loading="lazy"><figcaption>image-20240321190948650</figcaption></figure><h4 id="乘法mul" tabindex="-1"><a class="header-anchor" href="#乘法mul" aria-hidden="true">#</a> 乘法mul</h4><p>mul [s1] [s2] [d]</p><figure><img src="'+R+'" alt="image-20240321191113940" tabindex="0" loading="lazy"><figcaption>image-20240321191113940</figcaption></figure><figure><img src="'+L+'" alt="image-20240321191128926" tabindex="0" loading="lazy"><figcaption>image-20240321191128926</figcaption></figure><h4 id="除法div" tabindex="-1"><a class="header-anchor" href="#除法div" aria-hidden="true">#</a> 除法div</h4><figure><img src="'+v+'" alt="image-20240321191328099" tabindex="0" loading="lazy"><figcaption>image-20240321191328099</figcaption></figure><h4 id="整数转换为浮点数flt" tabindex="-1"><a class="header-anchor" href="#整数转换为浮点数flt" aria-hidden="true">#</a> 整数转换为浮点数FLT</h4><p>将BIN整数值装换成2进制浮点数（实数）指令，在涉及到浮点数运算的场合，一些存放了整数数值的寄存器要参与到运算中，首先需要转换本身的数据类型，以达到与同类型数据进行运算与比较的要求。</p><p>需要注意的是，由于在各2进制浮点数（实数]运算指令中，指定的K、H的值会自动转换成2进制浮点数，所以不需要使用FLT指令进行转换</p><figure><img src="'+F+'" alt="image-20240321192340915" tabindex="0" loading="lazy"><figcaption>image-20240321192340915</figcaption></figure><p>使用</p><figure><img src="'+I+'" alt="image-20240321193616462" tabindex="0" loading="lazy"><figcaption>image-20240321193616462</figcaption></figure><h3 id="比较指令" tabindex="-1"><a class="header-anchor" href="#比较指令" aria-hidden="true">#</a> 比较指令</h3><h4 id="cmp指令" tabindex="-1"><a class="header-anchor" href="#cmp指令" aria-hidden="true">#</a> CMP指令</h4><p>CMP(16位)比较两个值，将其结果（大于、等于、小于）输出给软元件。(DCMP 32位）</p><figure><img src="'+M+'" alt="image-20240321193802614" tabindex="0" loading="lazy"><figcaption>image-20240321193802614</figcaption></figure><figure><img src="'+N+'" alt="image-20240321193811541" tabindex="0" loading="lazy"><figcaption>image-20240321193811541</figcaption></figure><h4 id="区间比较zcp" tabindex="-1"><a class="header-anchor" href="#区间比较zcp" aria-hidden="true">#</a> 区间比较ZCP</h4><figure><img src="'+U+'" alt="image-20240321194148809" tabindex="0" loading="lazy"><figcaption>image-20240321194148809</figcaption></figure><h4 id="触点·比较" tabindex="-1"><a class="header-anchor" href="#触点·比较" aria-hidden="true">#</a> 触点·比较</h4><p>触点型比较指令LD=/&gt;/&gt;=/&lt;/&lt;=/&lt;&gt; 对两个数值进行比较，当满足相对应的条件时，触点导通，不满足则断开。</p><figure><img src="'+E+'" alt="image-20240321194628101" tabindex="0" loading="lazy"><figcaption>image-20240321194628101</figcaption></figure><p>【解释备注】 当C0&gt;=3,并且&lt;=5时，Y0得电； 当C0=3,或者C0=5时，Y1得电。</p><h3 id="时钟指令" tabindex="-1"><a class="header-anchor" href="#时钟指令" aria-hidden="true">#</a> 时钟指令</h3><p>PLC自带实时时钟功能，通过内置电池保持时钟数据，当电池电量耗尽，时钟数据将会丢失，因此，在运用时钟功能时需要保证电池电量充满；利用可编程控制器可以对时钟数据进行运算、比较；此外，还可以对内置实时时钟的时间进行校准。</p><figure><img src="'+A+'" alt="image-20240321195342211" tabindex="0" loading="lazy"><figcaption>image-20240321195342211</figcaption></figure><h4 id="读时钟trd" tabindex="-1"><a class="header-anchor" href="#读时钟trd" aria-hidden="true">#</a> 读时钟TRD</h4><p>读出plc时钟数据的·指令</p><figure><img src="'+G+'" alt="image-20240321195449903" tabindex="0" loading="lazy"><figcaption>image-20240321195449903</figcaption></figure><figure><img src="'+S+'" alt="image-20240321195558426" tabindex="0" loading="lazy"><figcaption>image-20240321195558426</figcaption></figure><h4 id="将时分秒数据转换成秒htos" tabindex="-1"><a class="header-anchor" href="#将时分秒数据转换成秒htos" aria-hidden="true">#</a> 将时分秒数据转换成秒HTOS</h4><p>​ <img src="'+X+'" alt="image-20240321200101931" loading="lazy"></p><h3 id="移位指令" tabindex="-1"><a class="header-anchor" href="#移位指令" aria-hidden="true">#</a> 移位指令</h3><p>移位的数据只能是16/32位数据</p><h4 id="循环右移指令ror" tabindex="-1"><a class="header-anchor" href="#循环右移指令ror" aria-hidden="true">#</a> 循环右移指令ROR</h4><p>使不包括进位标志在内的指定位数部分的位信息右移、循环的指令。</p><p>ROR [d] [n]</p><ul><li>d要移位的元件</li><li>移位的位数</li></ul><figure><img src="'+Y+'" alt="image-20240321200247443" tabindex="0" loading="lazy"><figcaption>image-20240321200247443</figcaption></figure><p>移位时如果移到尾部，从高位开始重新移位。</p><figure><img src="'+k+'" alt="image-20240321200628109" tabindex="0" loading="lazy"><figcaption>image-20240321200628109</figcaption></figure><h4 id="循环左移rol" tabindex="-1"><a class="header-anchor" href="#循环左移rol" aria-hidden="true">#</a> 循环左移ROL</h4><figure><img src="'+H+'" alt="image-20240321201852542" tabindex="0" loading="lazy"><figcaption>image-20240321201852542</figcaption></figure><h4 id="位左移sftl" tabindex="-1"><a class="header-anchor" href="#位左移sftl" aria-hidden="true">#</a> 位左移SFTL</h4><p>只能对16位数据操作</p><figure><img src="'+K+'" alt="image-20240321201045601" tabindex="0" loading="lazy"><figcaption>image-20240321201045601</figcaption></figure><figure><img src="'+V+'" alt="image-20240321201540213" tabindex="0" loading="lazy"><figcaption>image-20240321201540213</figcaption></figure><h4 id="向右移位sftr" tabindex="-1"><a class="header-anchor" href="#向右移位sftr" aria-hidden="true">#</a> 向右移位SFTR</h4><figure><img src="'+J+'" alt="image-20240321201653613" tabindex="0" loading="lazy"><figcaption>image-20240321201653613</figcaption></figure><h4 id="sum指令" tabindex="-1"><a class="header-anchor" href="#sum指令" aria-hidden="true">#</a> SUM指令</h4><p>计算指定软元件数据有多少个为1（on）的指令</p><figure><img src="'+Q+'" alt="image-20240321202138830" tabindex="0" loading="lazy"><figcaption>image-20240321202138830</figcaption></figure><p>练习</p><figure><img src="'+j+'" alt="image-20240321201927873" tabindex="0" loading="lazy"><figcaption>image-20240321201927873</figcaption></figure><figure><img src="'+Z+'" alt="image-20240321202230920" tabindex="0" loading="lazy"><figcaption>image-20240321202230920</figcaption></figure>',124)]))}const ei=a($,[["render",q],["__file","04.plc指令介绍.html.vue"]]);export{ei as default};
