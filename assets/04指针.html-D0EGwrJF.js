import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as p,a as t}from"./app-DBc2jY3V.js";const o="/wf-site/assets/image-20231223161406999-DVB9PRBA.png",e={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[t('<h2 id="_01-指针的基本概念" tabindex="-1"><a class="header-anchor" href="#_01-指针的基本概念" aria-hidden="true">#</a> 01.指针的基本概念</h2><h3 id="_1-变量的地址" tabindex="-1"><a class="header-anchor" href="#_1-变量的地址" aria-hidden="true">#</a> 1）变量的地址</h3><p>变量是内存变量的简称，在C++中，每定义一个变量，系统就会给变量分配一块内存，内存是有地址的。</p><figure><img src="'+o+`" alt="image-20231223161406999" tabindex="0" loading="lazy"><figcaption>image-20231223161406999</figcaption></figure><p>C++用运算符&amp;获取变量在内存中的起始地址。</p><p>语法：&amp;变量名</p><h3 id="_2-指针变量" tabindex="-1"><a class="header-anchor" href="#_2-指针变量" aria-hidden="true">#</a> 2）指针变量</h3><p>指针变量简称指针，它是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p><p><code>语法：数据类型 \\*变量名;</code></p><p>数据类型必须是合法的C++数据类型（int、char、double或其它自定义的数据类型）。</p><p>星号*与乘法中使用的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p><h3 id="_3-对指针赋值" tabindex="-1"><a class="header-anchor" href="#_3-对指针赋值" aria-hidden="true">#</a> 3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其它的数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整数型变量的地址；用字符型指针存放字符型变量的地址；用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p><p>语法：指针=&amp;变量名;</p><p>注意</p><ul><li>对指针的赋值操作也通俗的被称为“指向某变量”，被指向的变量的数据类型称为“基类型”。</li><li>如果指针的数据类型与基类型不符，编译会出现警告。但是，可以强制转换它们的类型。</li></ul><h3 id="_4-指针占用的内存" tabindex="-1"><a class="header-anchor" href="#_4-指针占用的内存" aria-hidden="true">#</a> <strong>4）指针占用的内存</strong></h3><p>指针也是变量，是变量就要占用内存空间。</p><p>在64位的操作系统中，不管是什么类型的指针，占用的内存都是8字节。</p><p>在C++中，指针是复合数据类型，复合数据类型是指基于其它类型而定义的数据类型，在程序中，int是整型类型，int*是整型指针类型，int*可以用于声明变量，可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int*当成一种数据类型就是了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    bool b <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c  <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>
    string s <span class="token operator">=</span> <span class="token string">&quot;dd&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    bool <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>
    string <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a address is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b address is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;c address is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s address is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

<span class="token comment">//   直接使用cout输出地址，可能会出现乱码</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pa value is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span>pa <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pb value is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span>pb <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pc value is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span>pc <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ps value is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token punctuation">)</span>ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*pa is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pa <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*pb is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pb <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*pc is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pc <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;*ps is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pa sizeof is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;pb sizeof is:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用指针" tabindex="-1"><a class="header-anchor" href="#_5-使用指针" aria-hidden="true">#</a> 5）使用指针</h3><p>声明指针变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p><p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）</p><p>*运算符被称为<strong>间接值</strong>或**解除引用（解引用）**运算符，将它用于指针，可以得到该地址的内存中存储的值，*也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p><p><strong>变量和指向变量的指针就像同一枚硬币的两面。</strong></p><p>哪个银行？ 什么东西？ 数额</p><p>程序在存储数据的时候，必须跟踪三种基本属性：</p><ul><li>数据存储在哪里；</li><li>数据是什么类型；</li><li>数据的值是多少。</li></ul><p>用两种策略可以达到以上目的：</p><p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p><p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p><h2 id="_02-指针用于函数的参数" tabindex="-1"><a class="header-anchor" href="#_02-指针用于函数的参数" aria-hidden="true">#</a> 02.指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参的地址传进去，形参中存放的是实参的地址，在函数中通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p><p><strong>值传递</strong>：函数的形参是普通变量。</p><p>传地址的意义如下：</p><ul><li>可以在函数中修改实参的值。</li><li>减少内存拷贝，提升性能。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> string <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number is :&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, String is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n address is :&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, s address is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">&quot;ddd&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number is :&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, String is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n address is :&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, s address is &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    string s <span class="token operator">=</span> <span class="token string">&quot;fff&quot;</span><span class="token punctuation">;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03-用const修饰指针" tabindex="-1"><a class="header-anchor" href="#_03-用const修饰指针" aria-hidden="true">#</a> 03.用const修饰指针</h2><h3 id="_1-常量指针" tabindex="-1"><a class="header-anchor" href="#_1-常量指针" aria-hidden="true">#</a> <strong>1）常量指针</strong></h3><p>语法：const 数据类型 *变量名;</p><p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p><p>注意：</p><ul><li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li><li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li><li>如果用于形参，虽然指向的对象可以改变，但这么做没有任何意义。</li><li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li></ul><h3 id="_2-指针常量" tabindex="-1"><a class="header-anchor" href="#_2-指针常量" aria-hidden="true">#</a> <strong>2）指针常量</strong></h3><p>语法：数据类型 * const 变量名;</p><p>指向的变量（对象）不可改变。</p><p>注意：</p><ul><li>在定义的同时必须初始化，否则没有意义。</li><li>可以通过解引用的方法修改内存地址中的值。</li><li>C++编译器把指针常量做了一些特别的处理，改头换面之后，有一个新的名字，叫引用。</li></ul><h3 id="_3-常指针常量" tabindex="-1"><a class="header-anchor" href="#_3-常指针常量" aria-hidden="true">#</a> <strong>3）常指针常量</strong></h3><p>语法：const 数据类型 * const 变量名;</p><p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p><p>常引用。</p><p>常量指针：指针指向可以改，指针指向的值不可以更改。</p><p>指针常量：指针指向不可以改，指针指向的值可以更改。</p><p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p><p><strong>记忆秘诀：*表示指针，指针在前先读指针；指针在前指针就不允许改变。</strong></p><p>常量指针：const 数据类型 *变量名</p><p>指针常量：数据类型 * const 变量名</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    string s <span class="token operator">=</span> <span class="token string">&quot;fff&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pb <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>

    pa <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>pa <span class="token operator">=</span> b<span class="token punctuation">;</span>

    pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>pb <span class="token operator">=</span> b<span class="token punctuation">;</span>

    pc <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
    <span class="token operator">*</span>pc <span class="token operator">=</span> b<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D:/code/c++/c++Study/main.cpp: In function &#39;int main()&#39;:
D:/code/c++/c++Study/main.cpp:26:9: error: assignment of read-only location &#39;* pa&#39;
   26 |     *pa = b;
      |     ~~~~^~~
D:/code/c++/c++Study/main.cpp:28:8: error: assignment of read-only variable &#39;pb&#39;
   28 |     pb = &amp;b;
      |     ~~~^~~~
D:/code/c++/c++Study/main.cpp:31:8: error: assignment of read-only variable &#39;pc&#39;
   31 |     pc = &amp;b;
      |     ~~~^~~~
D:/code/c++/c++Study/main.cpp:32:9: error: assignment of read-only location &#39;*(const int*)pc&#39;
   32 |     *pc = b;
      |     ~~~~^~~
ninja: build stopped: subcommand failed.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_04-void关键字" tabindex="-1"><a class="header-anchor" href="#_04-void关键字" aria-hidden="true">#</a> 04.void关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p><p>1）函数的返回值用void，表示函数没有返回值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 函数体代码。</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）函数的参数填void，表示函数不需要参数（或者让参数列表空着）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 函数体代码。</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3）的形参用void *，表示接受任意数据类型的指针</strong>。</p><p>注意：</p><ul><li>不能用void声明变量，它不能代表一个真实的变量，但是，用void *可以。</li><li>不能对void *指针直接解引用（需要转换成其它类型的指针）。</li><li>把其它类型的指针赋值给void*指针不需要转换。</li><li>把void *指针赋值给把其它类型的指针需要转换。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>string varname<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> varname<span class="token operator">&lt;&lt;</span> <span class="token string">&quot;的地址是：&quot;</span> <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> varname <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;的值是：&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">89</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token char">&#39;X&#39;</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a的地址是：&quot;</span> <span class="token operator">&lt;&lt;</span>  <span class="token operator">&amp;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b的地址是：&quot;</span> <span class="token operator">&lt;&lt;</span>  <span class="token operator">&amp;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72)]))}const u=s(e,[["render",l],["__file","04指针.html.vue"]]);export{u as default};
