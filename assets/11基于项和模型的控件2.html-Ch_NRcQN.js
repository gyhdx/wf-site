import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,a}from"./app-DBc2jY3V.js";const d="/wf-site/assets/202303060121541-CI0zhidc.png",o={};function l(i,t){return s(),e("div",null,t[0]||(t[0]=[a(`<h1 id="_11-基于项和模型的控件2" tabindex="-1"><a class="header-anchor" href="#_11-基于项和模型的控件2" aria-hidden="true">#</a> 11.基于项和模型的控件2</h1><h3 id="常用数据模型和视图控件" tabindex="-1"><a class="header-anchor" href="#常用数据模型和视图控件" aria-hidden="true">#</a> 常用数据模型和视图控件</h3><h4 id="文本列表模型qstringlistmodel" tabindex="-1"><a class="header-anchor" href="#文本列表模型qstringlistmodel" aria-hidden="true">#</a> 文本列表模型QStringListModel</h4><p>文本列表模型QStringListModel通常用于存储一维文本列表它由一列多行文本数据构成。用于显示QStringListModel模型中文本数据的控件是QListView 控件。</p><p>用QStringListModel类创建文本列表模型实例的方法如下:</p><ul><li>parent 是继承自QObject的实例对象;</li><li>strings 是字符串型列表或元组用于确定文本列表模型中显示角色和编辑角色的数据</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QStringListModel

QStringListModel<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStringListModel<span class="token punctuation">(</span>strings<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文本列表模型QStringListModel的常用方法如表所示,主要方法介绍如下</p><ul><li><p>用setStringList(strings;Sequence[str])方法设置文本列表模型的显示角色和编辑角色的数据,</p><ul><li>用stringList()方法获取文本列表。</li></ul></li><li><p>用setData(QModelIndex,Any,role:int=Qt.EditRole)方法设置单个角色的值</p></li><li><p>用setItemData(QModelIndex,Dict[int,Any])方法按照宇典形式设置角色值,关键字是角色,</p></li><li><p>用data(QModelIndex,role;int= Qt.DisplayRole)方法和 itemData(QModelIndex)方法可获得数据,数据的角色可参考下表。</p><table><thead><tr><th>Qt.ltemDataRole 的取值</th><th>值</th><th>对应的数据类型</th><th>说明</th></tr></thead><tbody><tr><td>Qt.DisplayRole</td><td>0</td><td>str</td><td>视图控件显示的文本</td></tr><tr><td>Qt.DecorationRole</td><td>1</td><td>QIcon、QPixmap</td><td>图标</td></tr><tr><td>Qt.EditRole</td><td>2</td><td>str</td><td>视图控件中编辑时显示的文本</td></tr><tr><td>Qt.ToolTipRole</td><td>3</td><td>sLr</td><td>提示信息</td></tr><tr><td>Qt.StatusTipRole</td><td>4</td><td>str</td><td>状态提示信息</td></tr><tr><td>Qt.WhatsThisRole</td><td>5</td><td>str</td><td>按下Shilt+F1键时显示的数据</td></tr><tr><td>Qt.SizeHitRole</td><td>13</td><td>QSize</td><td>尺寸提示</td></tr><tr><td>Qt.FontRole</td><td>6</td><td>QFont</td><td>默认代理控件的字体</td></tr><tr><td>Qt.TextAlignmentRole</td><td>7</td><td>Qt.AlignmentFlag</td><td>默认代理控件的对齐方式</td></tr><tr><td>Qt.BackgroundRole</td><td>8</td><td>QBrush、 QColor、 Qt.GlobalColor</td><td>默认代理控件的背景色</td></tr><tr><td>Qt.ForegroundRole</td><td>9</td><td>默认代理控件的前景色</td><td></td></tr><tr><td>Qt.CheckStateRole</td><td>10</td><td>Qt.CheckState</td><td>勾选状态</td></tr><tr><td>Qt.InitialSortOrderRole</td><td>14</td><td>Qt.SortOrder</td><td>初始排序</td></tr><tr><td>Qt.AccessibleTextRole</td><td>11</td><td>Str</td><td>用于可访问插件扩展的文本</td></tr><tr><td>Qt.AccessibleDescriptionRole</td><td>12</td><td>Str</td><td>用于可访问功能的描述</td></tr><tr><td>Qt.UserRole</td><td>Ox0100</td><td>any(数据类型不限)</td><td>自定义角色,可使用多个自定义角色,第 1个为 Qt.UserRole,第 2 个为 Qt) UserRole+1,依次类推</td></tr></tbody></table></li><li><p>用index(row;int,column=0,parent=QModelIndex())方法获得某行的模型数据索引</p><ul><li>用sibling(row;int,column:int,idx;QModelIndex)方法获得同级别的数据项的索引。</li></ul></li><li><p>用insertRows(row:int,count;int,parent=QModelIndex)方法可以插人多行</p><ul><li>用moveRows(sourceParent: QModelIndex, sourceRow: int, count: int,destinationParent:QModelIndex,destinationChild: int)方法可以移动多行到目标行,</li><li>用removeRows(row:int,count:int,parent=QModelIndex)方法可以移除多行。</li></ul></li></ul><table><thead><tr><th>QStringListModel的方法及参数类型</th><th>说1 明</th></tr></thead><tbody><tr><td>setStringList(strings:Sequence[str])</td><td>设置列表模型显示和编辑角色的文本数据</td></tr><tr><td>stringList()</td><td>获取文本列表 List[str]</td></tr><tr><td>rowCount(parent=QModelIndex())</td><td>获取行的数量</td></tr><tr><td>parent()</td><td>获取模型所在的父对象QObject</td></tr><tr><td>parent(child:QModelIndex)</td><td>获取父索引QModelIndex</td></tr><tr><td>index(row: int,column=0,parent:QModelIndex)</td><td>获取row行的模型数据索引</td></tr><tr><td>sibling(row: int,column: int.idx: QModelIndex)</td><td>获取同级别的模型数据索引</td></tr><tr><td>setData(QModelIndex,Any,role: int=Qt.EditRole)</td><td>按角色设置数据</td></tr><tr><td>data(QModelIndex,role:int=Qt.DisplayRole)</td><td>获取角色的值</td></tr><tr><td>setItemData(QModelIndex,Dict[int,Any])</td><td>用字典设置角色值</td></tr><tr><td>itemData(QModelIndex)</td><td>获取字典角色值</td></tr><tr><td>flags(QModelIndex)</td><td>获取数据的标识 Qt.ItemFlag</td></tr><tr><td>insertRows(row: int, count: int, parent = QModelIndex)</td><td>插入多行,成功则返回True</td></tr><tr><td>moveRows(sourceParent:QModelIndex.sourceRow: int.count: int, destinationParent: QModelIndex, destinationChild:int)</td><td>移动多行,成功则返回True</td></tr><tr><td>removeRows(int,int,parent=QModelIndex())</td><td>移除多行,成功则返回True</td></tr><tr><td>clearItemData(index: QModelIndex)</td><td>清空角色数据,成功则返回 True</td></tr><tr><td>sort(column:int.order=Qt.AscendingOrder)</td><td>对列进行排序</td></tr></tbody></table><h4 id="列表视图控件qlistview" tabindex="-1"><a class="header-anchor" href="#列表视图控件qlistview" aria-hidden="true">#</a> 列表视图控件QListView</h4><p>列表视图控件QListView 用于显示文本列表模型 QStringListModel 中的文本数据</p><p>用QListView创建列表视图控件的方法如下,其中 parent 是继承自QWidget 的窗口或容器控件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QListView

QListView<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="列表视图控件qlistview-的常用方法" tabindex="-1"><a class="header-anchor" href="#列表视图控件qlistview-的常用方法" aria-hidden="true">#</a> 列表视图控件QListView 的常用方法</h5><p>列表视图控件 QListView 用于显示数据模型中某数据项下的所有子数据项的显示角色的文本。</p><p>列表视图控件没有表头,可以把数据显示成一列,也可以显示成一行。列表视图控件不仅可以显示文本列表模型中的数据,也可显示其他模型中的数据。</p><p>列表视图控件的常用方法如表 所示,主要方法介绍如下。</p><table><thead><tr><th>QListView的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setModel(QAbstractItemModel)</td><td>设置数据模型</td></tr><tr><td>setSelectionModel(QItemSelectionModel)</td><td>设置选择模型</td></tr><tr><td>selectionModel()</td><td>获取选择模型 QItemSelectionModel</td></tr><tr><td>setSelection(rect: QRect,command: QItemSelectionModel.SelectionFlags)</td><td>选择指定范围内的数据项</td></tr><tr><td>indexAt(QPoint)</td><td>获取指定位置处数据项的模型数据 索引</td></tr><tr><td>selectedIndexes()</td><td>获取选中的数据项的索引列表List Cint]</td></tr><tr><td>clearSelection()</td><td>取消选择</td></tr><tr><td>clearPropertyFlags()</td><td>清空属性标志</td></tr><tr><td>contentsSize()</td><td>获取包含的内容所占据的尺寸QSize</td></tr><tr><td>resizeContents(width:int,height: int)</td><td>重新设置尺寸</td></tr><tr><td>scrollTo(QModelIndex)</td><td>使数据项可见</td></tr><tr><td>setModelColumn(int)</td><td>设置数据模型中要显示的列</td></tr><tr><td>modelColumn()</td><td>获取模型中显示的列</td></tr><tr><td>setFlow(QListView.Flow)</td><td>设置显示的方向</td></tr><tr><td>setGridSize(QSize)</td><td>设置数据项的尺寸</td></tr><tr><td>setItemAlignment(Qt.Alignment)</td><td>设置对齐方式</td></tr><tr><td>setLayoutMode(QListView.LayoutMode)</td><td>设置数据的显示方式</td></tr><tr><td>setBatchSize(int)</td><td>设置批量显示的数量,默认为100</td></tr><tr><td>setMovement(QListView.Movement)</td><td>设置数据项的移动方式</td></tr><tr><td>setResizeMode(QListView.ResizeMode)</td><td>设置尺寸调整模式</td></tr><tr><td>setRootIndex(QModelIndex)</td><td>设置根目录的数据项索引</td></tr><tr><td>setRowHidden(int,bool)</td><td>设置是否隐藏</td></tr><tr><td>setSpacing(int)</td><td>设置数据项之间的间距</td></tr><tr><td>setUniformItemSizes(bool)</td><td>设置数据项是否统一尺寸</td></tr><tr><td>setViewMode(QListView.ViewMode)</td><td>设置显示模式</td></tr><tr><td>setWordWrap(bool)</td><td>设置单词是否可以写到两行上</td></tr><tr><td>setWrapping(bool)</td><td>设置文本是否可以写到两行</td></tr><tr><td>setAlternatingRowColors()</td><td>设置是否用交替颜色</td></tr><tr><td>setSelectionMode(QAbstractItemView.SelectionMode)</td><td>设置选择模式</td></tr><tr><td>setSelectionModel(QItemSelectionModel)</td><td>设置选择模型</td></tr><tr><td>selectionModel()</td><td>获取选择模型</td></tr><tr><td>setPositionForIndex(position:QPoint,index:QModelIndex)</td><td>将指定索引的项放到指定位置处</td></tr></tbody></table><ul><li><p>用setModel(QAbstractItemModel)方法可以给列表视图控件设置关联的数据模型,</p><ul><li>用setRootIndex(QModelIndex)方法设置列表视图控件</li><li>需要显示的数据索引下的子数据项如果数据项由多列构成则用setModelColumn(int)方法设置数据模型中要显示的列。</li></ul></li><li><p>用selectedIndexes()方法取选中的数据项的行索引 List[int];</p><ul><li>用setCurrentIndex(QModelIndex)方法设置当前的模型数据索引;</li><li>用currentIndex()方法获取当前项的模型数据索引;用</li><li>indexAt(QPoint)方法获取指定位置处的数据项的模型数据索引。</li></ul></li><li><p>用setFlow(QListView.Flow)方法设置数据项的排列方向,其中 QListView.Flow可以取:</p><ul><li>QListView,LeftToRight(值是0)</li><li>QListView.TopToBottom(值是1)。</li></ul></li><li><p>用setLayoutMode(QListView.LayoutMode)方法设置数据的显示方式,其中QListView.LayoutMode 可取:</p><ul><li>QListView.SinglePass(值是0,全部显示)</li><li>QListView,Batched(值是1,分批显示);</li><li>用setBatchSize(int)方法设置分批显示的个数。</li></ul></li><li><p>用setMovement(QListView.Movement)方法设置数据项的拖拽方式,其中QListView.Movement 可取:</p><ul><li>QListView.Static(不能移动)</li><li>QListView.Free(可以自由移动)</li><li>QListView.Snap(捕捉到数据项的位置)。</li></ul></li><li><p>用setViewMode(QListView.ViewMode)方法设置显示模式,参数 QListViewViewMode</p><ul><li>如果取QListView.ListMode,则采用QListView.TopToBottom 排列小尺寸和QListView.Static不能移动方式;</li><li>如果取 QListView.IconMode,则采用QListView.LeftToRight 排列、大尺寸和QListView.Free自由移动方式。</li></ul></li><li><p>用setResizeMode(QListView.ResizeMode)方法设置尺调整模式,参数可取QListView.Fixed或QListView.Adjust。</p></li><li><p>用setSelectionMode(QAbstractItemView.SelectionMode)方法可以设置选择模式其中参数QAbstractItemView.SelectionMode 的取值如表所示</p><table><thead><tr><th>QAbstractItemView.SelectionMode的取值</th><th>值</th><th>说 明</th></tr></thead><tbody><tr><td>QAbstractItemView.NoSelection</td><td>0</td><td>禁止选择</td></tr><tr><td>QAbstractItemView.SingleSelection</td><td>1</td><td>单选,当选择一个数据项时,其他任何已经选中的数 据项都变成未选中项</td></tr><tr><td>QAbstractItemView.MultiSelection</td><td>2</td><td>多选,当单击一个数据项时,将改变选中状态,其他还 未单击的数据项状态不变</td></tr><tr><td>QAbstractItemView.ExtendedSelection</td><td>3</td><td>当单击某数据项时,清除已选择的数据项；当按住 Ctrl键选择时,会改变被单击数据项的选中状态；当 按住 Shift 键选择两个数据项时,这两个数据项之间 的数据项的选中状态发生改变</td></tr><tr><td>QAbstractItemView.ContiguousSelection</td><td>4</td><td>当单击一个数据项时,清除已经选择的项；当按住 Shift 键或Ctrl键选择两个数据项时,这两个数据项 之间的选择状态发生改变</td></tr></tbody></table></li></ul><h5 id="列表视图控件qlistview的信号" tabindex="-1"><a class="header-anchor" href="#列表视图控件qlistview的信号" aria-hidden="true">#</a> 列表视图控件QListView的信号</h5><p>列表视图控件QListView的信号如表所示</p><table><thead><tr><th>QListView的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>activated(QModelIndex)</td><td>数据项活跃时发送信号</td></tr><tr><td>clicked(QModelIndex)</td><td>单击数据项时发送信号</td></tr><tr><td>doubleClicked(QModelIndex)</td><td>双击数据项时发送信号</td></tr><tr><td>entered(QModelIndex)</td><td>光标进入数据项时发送信号</td></tr><tr><td>iconSizeChanged(QSize)</td><td>图标尺寸发生变化时发送信号</td></tr><tr><td>indexesMoved(List[QModelIndex])</td><td>数据索引发生移动时发送信号</td></tr><tr><td>pressed(QModelIndex)</td><td>按下鼠标按键时发送信号</td></tr><tr><td>viewportEntered()</td><td>光标进人视图时发送信号</td></tr></tbody></table><h5 id="文本列表模型ostringlistmodel和列表视图控件qlistview-的应用实例" tabindex="-1"><a class="header-anchor" href="#文本列表模型ostringlistmodel和列表视图控件qlistview-的应用实例" aria-hidden="true">#</a> 文本列表模型OStringListModel和列表视图控件QListView 的应用实例</h5><p>下面的程序建立两个QListView 控件,并分别关联两个 QStringListModel。</p><p>程序初始从Excel文件&quot;学生 IDxlsx&quot;中的ID工作页中读取学生名单,在学生名单中选择学生姓名后,单击&quot;添加&quot;按钮,数据会从学生名单中删除,并移到三好学生中;</p><p>单击&quot;删除&quot;按钮,数据会从三好学生中移到学生名单中,并插人到原来的位置。左侧选择1个或多个学生姓名,右侧只有 1个选中时,可以使用&quot;插人&quot;按钮。</p><p>程序运行界面如图所示</p><figure><img src="`+d+`" alt="image-20230306012136571" tabindex="0" loading="lazy"><figcaption>image-20230306012136571</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># File date: Hi_2023/3/6 0:22</span>
<span class="token comment"># File_name: 02-文本列表模型OStringListModel和列表视图控件QListView 的应用实例.py</span>


<span class="token keyword">import</span> sys<span class="token punctuation">,</span> os
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QListView<span class="token punctuation">,</span> QHBoxLayout<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QVBoxLayout
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QStringListModel<span class="token punctuation">,</span> QModelIndex<span class="token punctuation">,</span> Qt
<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook


<span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fileName <span class="token operator">=</span> <span class="token string">&quot;./学生ID.xlsx&quot;</span>
        self<span class="token punctuation">.</span>reference_Model <span class="token operator">=</span> QStringListModel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 从 Excel中读数据存储数据的模型</span>
        self<span class="token punctuation">.</span>selection_Model <span class="token operator">=</span> QStringListModel<span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token comment"># 选择数据后,存储选择数据的模型</span>

        self<span class="token punctuation">.</span>setup_Ui<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 建立界面</span>
        self<span class="token punctuation">.</span>data_import<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 从Excel中读取数据</span>
        self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 单击视图控件,判断按钮是否激活或失效</span>

    <span class="token keyword">def</span> <span class="token function">setup_Ui</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        label1 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;学生名单&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>listView_1 <span class="token operator">=</span> QListView<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 列表视图控件,显示Exce1 中的数据的控件</span>
        v1 <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        v1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>label1<span class="token punctuation">)</span>
        v1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_1<span class="token punctuation">)</span>

        label2 <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;三好学生&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>listView_2 <span class="token operator">=</span> QListView<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 列表视图控件,显示选中的数据</span>
        self<span class="token punctuation">.</span>btn_add <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;添加&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_insert <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;插人&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_delete <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;删除&quot;</span><span class="token punctuation">)</span>
        h1 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        h1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_add<span class="token punctuation">)</span>
        h1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_insert<span class="token punctuation">)</span>
        h1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_delete<span class="token punctuation">)</span>
        v2 <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        v2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>label2<span class="token punctuation">)</span>
        v2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_2<span class="token punctuation">)</span>
        v2<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>h1<span class="token punctuation">)</span>
        h2 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        h2<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
        h2<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>v2<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>setModel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">)</span>  <span class="token comment"># 设置模型</span>
        self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>setModel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">)</span>  <span class="token comment"># 设置模型</span>
        self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>setSelectionMode<span class="token punctuation">(</span>QListView<span class="token punctuation">.</span>SelectionMode<span class="token punctuation">.</span>ExtendedSelection<span class="token punctuation">)</span>  <span class="token comment"># 设置选择模式</span>
        self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>setSelectionMode<span class="token punctuation">(</span>QListView<span class="token punctuation">.</span>SelectionMode<span class="token punctuation">.</span>ExtendedSelection<span class="token punctuation">)</span>  <span class="token comment"># 设置选择模式</span>

        self<span class="token punctuation">.</span>btn_add<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_add_clicked<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_insert<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_insert_clicked<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_delete<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>btn_delete_clicked<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">data_import</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>
            wbook <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token string">&quot;ID&quot;</span> <span class="token keyword">in</span> wbook<span class="token punctuation">.</span>sheetnames<span class="token punctuation">:</span>
                wsheet <span class="token operator">=</span> wbook<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span>
                cell_range <span class="token operator">=</span> wsheet<span class="token punctuation">[</span>wsheet<span class="token punctuation">.</span>dimensions<span class="token punctuation">]</span> <span class="token comment"># 取 Excel中数据存储范围</span>

                student <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> cell_row <span class="token keyword">in</span> cell_range<span class="token punctuation">:</span>
                    string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
                    <span class="token keyword">for</span> cell <span class="token keyword">in</span> cell_row<span class="token punctuation">:</span>  <span class="token comment"># cell_row.Excel行单元格元组</span>
                        string <span class="token operator">=</span> string <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span>  <span class="token comment"># 取Excel单元格中数据</span>

                    student<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>setStringList<span class="token punctuation">(</span>student<span class="token punctuation">)</span>  <span class="token comment"># 在模型中添加数据列表</span>

    <span class="token keyword">def</span> <span class="token function">btn_add_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 添加按钮的槽函数</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            selectedIndexes <span class="token operator">=</span> self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
            index <span class="token operator">=</span> selectedIndexes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            string <span class="token operator">=</span> self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>data<span class="token punctuation">(</span>index<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>  <span class="token comment"># 获取数据</span>
            self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>removeRow<span class="token punctuation">(</span>index<span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QModelIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            count <span class="token operator">=</span> self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>rowCount<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取行的数量</span>
            self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>insertRow<span class="token punctuation">(</span>count<span class="token punctuation">)</span>  <span class="token comment"># 在末尾插人数据</span>
            last_index <span class="token operator">=</span> self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>index<span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QModelIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取末尾索引</span>
            self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>setData<span class="token punctuation">(</span>last_index<span class="token punctuation">,</span> string<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>  <span class="token comment"># 设置末尾的数据</span>
        self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 控制按钮的激活与失效</span>

    <span class="token keyword">def</span> <span class="token function">btn_insert_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            selectedIndexs_1 <span class="token operator">=</span> self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取选中数据项的索引</span>
            selectedIndex_2 <span class="token operator">=</span> self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取选中数据项的索引</span>

            index <span class="token operator">=</span> selectedIndexs_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            string <span class="token operator">=</span> self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>data<span class="token punctuation">(</span>index<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>removeRow<span class="token punctuation">(</span>index<span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QModelIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            row <span class="token operator">=</span> selectedIndex_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>insertRow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
            index <span class="token operator">=</span> self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>index<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>setData<span class="token punctuation">(</span>index<span class="token punctuation">,</span> string<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 控制按钮的激活与失效</span>

    <span class="token keyword">def</span> <span class="token function">btn_delete_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 删除按钮的槽函数</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            selectedIndexes <span class="token operator">=</span> self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
            index <span class="token operator">=</span> selectedIndexes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            string <span class="token operator">=</span> self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>data<span class="token punctuation">(</span>index<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>selection_Model<span class="token punctuation">.</span>removeRow<span class="token punctuation">(</span>index<span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QModelIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            count <span class="token operator">=</span> self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>rowCount<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>insertRow<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
            last_index <span class="token operator">=</span> self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>index<span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QModelIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取末尾索引</span>
            self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>setData<span class="token punctuation">(</span>last_index<span class="token punctuation">,</span> string<span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>DisplayRole<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>view_clicked<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reference_Model<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 排序</span>

    <span class="token keyword">def</span> <span class="token function">view_clicked</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        n1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_1<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取选中数据项的数量</span>
        n2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>listView_2<span class="token punctuation">.</span>selectedIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取选中数据项的数量</span>
        self<span class="token punctuation">.</span>btn_add<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_insert<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span>n1 <span class="token keyword">and</span> n2 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btn_delete<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span>n2<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    win <span class="token operator">=</span> MyWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

    win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件系统模型qfilesystemmodel" tabindex="-1"><a class="header-anchor" href="#文件系统模型qfilesystemmodel" aria-hidden="true">#</a> 文件系统模型QFileSystemModel</h4><p>利用文件系统模型 QFileSystemModel 可以访问本机的文件系统,可以获得文件目录文件名称和文件大小等信息,可以新建目录删除目录和文件、移动目录和文件及重命名目录和文件。</p><p>用QFileSystemModel类定义文件系统模型的方法如下所示其中parent 是继承自QObject的实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QFileSystemModel

QFileSystemModel<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="文件系统模型qfilesystemmodel的常用方法" tabindex="-1"><a class="header-anchor" href="#文件系统模型qfilesystemmodel的常用方法" aria-hidden="true">#</a> 文件系统模型QFileSystemModel的常用方法</h5><p>文件系统模型QFileSystemModel的常用方法如表所示,主要方法介绍如下</p><ul><li>用setRootPath(path:str)方法设置模型的根目录,并返回指向该目录的模型数据索引。 <ul><li>改变根目录时,发送rootPathChanged(newPath)信号。</li><li>用rootPath()方法获取根目录。</li></ul></li><li>用fileName(QModelIndex)方法获取文件名; <ul><li>用filePath(QModelIndex)方法获取文件名和路径;</li><li>用fileInfo(QModelIndex)方法获取文件信息;</li><li>用lastModified(QModelIndex)方法获取文件最后修改日期。</li></ul></li><li>用mkdir(QModelIndex,str)方法创建目录,并返回指向该目录的模型数据索引。</li><li>用rmdir(QModelIndex)方法除目录成功则返回True否则返回 False,删除后不可恢复。</li><li>用setOption(QFileSystemModelOptionon=True)方法设置文件系统模型的参数,其中QFileSystemModel Option 可取: <ul><li>QFileSystemModel, DontWatchForChanges(不使用监控器)</li><li>QFileSystemModel, DontResolveSymlinks(不解析链接)</li><li>QFileSystemModel.DontUseCustomDirectoryIcons(不使用客户图标),</li><li>默认都是关闭的用setNameFilters(filters; Sequence[str])方法设置名称过滤器;</li></ul></li><li>用setFilter(filters;QDir.Filter)方法设置路径过滤器,其中filters 可取: <ul><li>QDir.DirsQDir.AllDirs</li><li>QDir.Files</li><li>QDir.Drives</li><li>QDir.NoSymLinks</li><li>QDir.NoDotAndDotDot</li><li>QDir.NoDot</li><li>QDir.NoDotDot</li><li>QDir.AllEntries</li><li>QDir, Readable</li><li>QDir.Writable</li><li>QDir.Executable</li><li>QDir.Modified</li><li>QDir.Hidden</li><li>QDir.System</li><li>QDir.CaseSensitive。</li><li>设置路径过滤器时一定要包括QDir.AllDirs,否则无法识别路径的结构。</li></ul></li></ul><table><thead><tr><th>QFileSystemModel的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setRootPath(path；str)</td><td>QModelIndex</td><td>设置模型的根目录,并返回指向该目录的 模型数据索引</td></tr><tr><td>setData(QModelIndex,Any, role = Qt.EditRole)</td><td>bool</td><td>设置角色数据,成功则返回True</td></tr><tr><td>data(index: QModelIndex, role: int=Qt.DisplayRole)</td><td>Any</td><td>获取角色数据</td></tr><tr><td>setFilter(filters:QDir.Filter)</td><td>None</td><td>设置路径过滤器</td></tr><tr><td>setNameFilters(filters:Sequence[str])</td><td>None</td><td>设置名称过滤器</td></tr><tr><td>nameFilters()</td><td>List[str]</td><td>获取名称过滤器</td></tr><tr><td>setNameFilterDisables(enable:bool)</td><td>None</td><td>设置名称过滤器是否激活</td></tr><tr><td>nameFilterDisables()</td><td>bool</td><td>获取名称过滤器是否激活</td></tr><tr><td>setOption(QFileSystemModel.Option, on=True)</td><td>None</td><td>设置文件系统模型的参数</td></tr><tr><td>setReadOnly(enable: bool)</td><td>None</td><td>设置是否是只读的</td></tr><tr><td>isReadOnly()</td><td>bool</td><td>获取是否有只读属性</td></tr><tr><td>fileIcon(QModelIndex)</td><td>QIcon</td><td>获取文件的图标</td></tr><tr><td>fileInfo(QModelIndex)</td><td>QFileInfo</td><td>获取文件信息</td></tr><tr><td>fileName(QModelIndex)</td><td>str</td><td>获取文件名</td></tr><tr><td>filePath(QModelIndex)</td><td>Str</td><td>获取路径和文件名</td></tr><tr><td>headerData(int, Qt.Orientation,role=Qt.DisplayRole)</td><td>Any</td><td>获取表头数据</td></tr><tr><td>index(row: int,column: int, parent:QModelIndex)</td><td>QModelIndex</td><td>获取索引</td></tr><tr><td>index(path:str,column:int=0)</td><td>QModelIndex</td><td>获取索引</td></tr><tr><td>hasChildren(parent:QModelIndex)</td><td>bool</td><td>获取是否有子目录或文件</td></tr><tr><td>isDir(QModelIndex)</td><td>bool</td><td>获取是否是路径</td></tr><tr><td>lastModified(QModelIndex)</td><td>QDateTime</td><td>获取最后修改时间</td></tr><tr><td>mkdir(QModelIndex,str)</td><td>QModelIndex</td><td>创建目录,并返回指向该目录的模型数据 索引</td></tr><tr><td>myComputer(role=Qt.DisplayRole)</td><td>Any</td><td>获取myComputer下的数据</td></tr><tr><td>parent(child: QModelIndex)</td><td>QModelIndex</td><td>获取父模型数据索引</td></tr><tr><td>remove(QModelIndex)</td><td>bool</td><td>删除文件或目录,成功则返回True</td></tr><tr><td>rmdir(QModelIndex)</td><td>bool</td><td>删除目录,成功则返回True</td></tr><tr><td>rootDirectory()</td><td>QDir</td><td>返回根目录QDir</td></tr><tr><td>rootPath()</td><td>Str</td><td>返回根目录文本</td></tr><tr><td>rowCount(parent; QModelIndex)</td><td>int</td><td>返回目录下的文件数量</td></tr><tr><td>sibling(row: int, column; int, idx: QModelIndex)</td><td>QModelIndex</td><td>获取同级别的模型数据索引</td></tr><tr><td>type(index: QModelIndex)</td><td>Str</td><td>返回路径或文件类型,例如&quot;Directory&quot; &quot;JPEG file&quot;</td></tr><tr><td>size(QModelIndex)</td><td>int</td><td>获取文件的大小</td></tr><tr><td>columnCount(parent:QModelIndex)</td><td>int</td><td>获取父索引下的列数</td></tr></tbody></table><h5 id="文件系统模型-qfilesystemmodel的信号" tabindex="-1"><a class="header-anchor" href="#文件系统模型-qfilesystemmodel的信号" aria-hidden="true">#</a> 文件系统模型 QFileSystemModel的信号</h5><p>文件系统模型 QFileSystemModel 的信号如表所示</p><table><thead><tr><th>QFileSystemModel的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>directoryLoaded(path:str)</td><td>当加载路径时发送信号</td></tr><tr><td>rootPathChanged(newPath:str)</td><td>根路径发生改变时发送信号</td></tr><tr><td>fileRenamed(path: str,oldName: str,newName: str)</td><td>更改文件名时发送信号</td></tr></tbody></table><h4 id="树视图控件qtreeview" tabindex="-1"><a class="header-anchor" href="#树视图控件qtreeview" aria-hidden="true">#</a> 树视图控件QTreeView</h4><p>树视图控件 QTreeView 以树列表的形式显示文件系统模型关联的本机文件系统,显示出本机的目录、文件名、文件大小等信息,也可以以层级结构形式显示其他类型的数据模型。</p><p>用QTreeView类创建树视图控件的方法如下,其中parent是继承自QWidget 的窗口或容器控件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QTreeView

QTreeView<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="树视图控件qtreeview的方法" tabindex="-1"><a class="header-anchor" href="#树视图控件qtreeview的方法" aria-hidden="true">#</a> 树视图控件QTreeView的方法</h5><p>树视图控件QTreeView 的常用方法如表所示,主要方法介绍如下</p><ul><li>用setModel(QAbstractItemModel)方法可以给树视图控件设置关联的数据模型</li><li>用setRootIndex(QModelIndex)方法可以设置树视图控件根部指向的模型数据位置。</li><li>用setItemsExpandable(bool)方法设置是否可以展开节点; <ul><li>用setExpanded(QModelIndex;bool)方法设置展开或折叠某节点;</li><li>用expand(QModelIndex)方法展开某节点;用expandAll()方法展开所有节点;</li><li>用collapse(QModelIndex)方法折叠某节点;</li><li>用collapseAl1()方法折叠所有节点;</li><li>用setExpandsOnDoubleClick(bool)方法设置双击节点时是否展开节点。 <ul><li>展开或折叠节点时,将会发送expanded(QModelIndex)信号或 collapsed(QModelIndex)信号。</li></ul></li><li>用setColumnHidden(column;int,hide:bool)方法可以设置隐藏或显示某列, <ul><li>用showColumn(column;int)方法和hideColumn(column:int)方法可以显示和隐藏指定的列。</li><li>用setColumnWidth(int,int)方法设置列的宽度,用setUniformRowHeights(bool)方法设置行是否有统一的高度。&quot;</li></ul></li></ul></li></ul><table><thead><tr><th>QTreeView的方法及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>setModel(QAbstractItemModel)</td><td>设置数据模型</td></tr><tr><td>setSelectionModel(QItemSelectionModel)</td><td>设置选择模型</td></tr><tr><td>selectionModel()</td><td>获取选择模型 QItemSelectionModel</td></tr><tr><td>ctSelection(reet: QRect,command: QItemSelectionModel.SelectionFlags)</td><td>选择指定范图内的数据项</td></tr><tr><td>setRootIndex(QModellndex)</td><td>设置根部的索引</td></tr><tr><td>setRootIsDecorated(bool)</td><td>设置根部是否有折叠或展开标识</td></tr><tr><td>rootlsDecorated()</td><td>获取根部是否有折叠或展开标识</td></tr><tr><td>[slot]collapse(QModellndex)</td><td>折叠节点</td></tr><tr><td>[slot]collapseAII()</td><td>折叠所有节点</td></tr><tr><td>[slot]expand(QModellndex)</td><td>展开节点</td></tr><tr><td>isExpanded(QModelIndex)</td><td>获取节点是否已经展开</td></tr><tr><td>[slot]expandAII()</td><td>股开所有节点</td></tr><tr><td>[slot]expandRecursively(QModelIndex,depth=-1)</td><td>逐级展开,腰开探度是 depth。一1表示展开所有节点,0表示只展开本层</td></tr><tr><td>[slot]expandToDepth(depth:int)</td><td>展开到指定的深度</td></tr><tr><td>[slot]hideColumn(column:int)</td><td>隐藏列</td></tr><tr><td>[slot]showColumn(column:int)</td><td>显示列</td></tr><tr><td>indexAbove(QModelIndex)</td><td>获取某索引之前的索引</td></tr><tr><td>indexAt(QPoint)</td><td>获取某个点处的索引</td></tr><tr><td>indexBelow(QModelIndex)</td><td>获取某索引之后的索引</td></tr><tr><td>selectAII()</td><td>全部选择</td></tr><tr><td>selectedIndexes()</td><td>获取选中的项的行列表 List[int]</td></tr><tr><td>setAnimated(bool)</td><td>设置展开或折叠时是否比较连贯</td></tr><tr><td>isAnimated()</td><td>获取展开或折叠时是否比较连贯</td></tr><tr><td>setColumnHidden(column:int,hide: bool)</td><td>设置是否隐藏列</td></tr><tr><td>isColumnHidden(column:int)</td><td>获取列是否隐藏</td></tr><tr><td>setRowHidden(row: int, parent: QModelIndex, hide:bool)</td><td>设置相对于QModelIndex的第int行是否隐藏</td></tr><tr><td>isRowHidden(row: int,parent: QModelIndex)</td><td>获取行是否隐藏</td></tr><tr><td>setColumnWidth(column: int,width: int)</td><td>设置列的宽度</td></tr><tr><td>columnWidth(column:int)</td><td>获取列的宽度</td></tr><tr><td>rowHeight(index: QModelIndex)</td><td>获取行的高度</td></tr><tr><td>setItemsExpandable(enable:bool)</td><td>设置是否可以展开节点</td></tr><tr><td>itemsExpandable()</td><td>获取节点是否可以展开</td></tr><tr><td>setExpanded(QModelIndex,bool)</td><td>设置是否展开某节点</td></tr><tr><td>setExpandsOnDoubleClick(bool)</td><td>设置双击时是否展开节点</td></tr><tr><td>setFirstColumnSpanned(row: int, parent: QModelIndex,span:bool)</td><td>设置某行的第1列的内容是否占据所有列</td></tr><tr><td>isFirstColumnSpanned(int,QModelIndex)</td><td>获取某行的第1列的内容是否占据所有列</td></tr><tr><td>setHeader(QHeaderView)</td><td>设置表头</td></tr><tr><td>header()</td><td>获取表头</td></tr><tr><td>setHeaderHidden(bool)</td><td>设置是否隐藏表头</td></tr><tr><td>setIndentation(int)</td><td>设置缩进量</td></tr><tr><td>indentation()</td><td>获取缩进量</td></tr><tr><td>resetIndentation()</td><td>重置缩进量</td></tr><tr><td>setAutoExpandDelay(delay:int)</td><td>拖放操作中设置项打开的延迟时间(毫秒)</td></tr><tr><td>autoExpandDelay()</td><td>获取项打开的延迟时间,如为负则不能打开</td></tr><tr><td>setAllColumnsShowFocus(enable:bool)</td><td>设置所有列是否显示键盘焦点,否则只有一列显示 焦点</td></tr><tr><td>allColumnsShowFocus()</td><td>获取所有列是否显示键盘焦点</td></tr><tr><td>setItemsExpandable(bool)</td><td>设置是否可以展开节点</td></tr><tr><td>setUniformRowHeights(uniform:bool)</td><td>设置项是否有相同的高度</td></tr><tr><td>uniformRowHeights()</td><td>获取项是否有相同的高度</td></tr><tr><td>setWordWrap(on:bool)</td><td>设置一个单词是否可以写到两行上</td></tr><tr><td>serTextElideMode(mode:Qt.TextElideMode)</td><td>设置省略号&quot;…&quot;的位置,参数可取Qt.ElideLelt、Qt.ElideRight、Qt.ElideMiddle 或 Qt.ElideNone</td></tr><tr><td>setTreePosition(logicalIndex:int)</td><td>设置树的位置</td></tr><tr><td>treePosition()</td><td>获取树的位置</td></tr><tr><td>setSortingEnabled(bool)</td><td>设置是否可以进行排序</td></tr><tr><td>isSortingEnabled()</td><td>获取是否可以排序</td></tr><tr><td>[slot]sortByColumn(int,Qt.SortOrder)</td><td>按列进行排序</td></tr><tr><td>[slotJresizeColumnToContents(column:int)</td><td>根据内容调整列的尺寸</td></tr><tr><td>scrollContentsBy(dx:int,dy:int)</td><td>将内容移动指定的距离</td></tr><tr><td>setUniformRowHeights(bool)</td><td>设置行是否有统一高度</td></tr></tbody></table><h5 id="树视图控件qtreeview的信号" tabindex="-1"><a class="header-anchor" href="#树视图控件qtreeview的信号" aria-hidden="true">#</a> 树视图控件QTreeView的信号</h5><p>树视图控件QTreeView的信号如表所示</p><table><thead><tr><th>QTreeView的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>collapsed(QModelIndex)</td><td>折叠节点时发送信号</td></tr><tr><td>expanded(QModelIndex)</td><td>展开节点时发送信号</td></tr><tr><td>activated(QModelIndex)</td><td>数据项活跃时发送信号</td></tr><tr><td>clicked(QModelIndex)</td><td>单击数据项时发送信号</td></tr><tr><td>doubleClicked(QModelIndex)</td><td>双击数据项时发送信号</td></tr><tr><td>entered(QModelIndex)</td><td>光标进入数据项时发送信号</td></tr><tr><td>iconSizeChanged(QSize)</td><td>图标尺寸发生变化时发送信号</td></tr><tr><td>pressed(QModelIndex)</td><td>按下鼠标按键时发送信号</td></tr><tr><td>viewportEntered()</td><td>光标进入树视图时发送信号</td></tr></tbody></table><h4 id="标准数据模型qstandardltemmodel" tabindex="-1"><a class="header-anchor" href="#标准数据模型qstandardltemmodel" aria-hidden="true">#</a> 标准数据模型QStandardltemModel</h4><p>标准数据模型QStandardItemModel可以存储多行多列的数据</p><ul><li>表格数据表格中的每个数据称为数据项QStandardItem</li><li>每个数据项下面还可以存储多行多列的子数据表格并形成层级关系,这样会形成比较复杂的结构关系。数据项可以存储文本、图标勾选状态等信息。</li></ul><p>用QStandardItemModel创建标准数据模型的方法如下所示其中parent是QObject或继承自QObject的实例对象,rows 和columns 分别是行数和列数</p><p>用QStandardItem创建数据项的方法如下所示用QStandardItem(rows,columns)方法可以创建一个含有多行多列子数据项的数据项。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QStandardItemModel<span class="token punctuation">,</span> QStandardItem

QStandardItemModel<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStandardItemModel<span class="token punctuation">(</span>rows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> columns<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>

QStandardItem<span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStandardItem<span class="token punctuation">(</span>icon<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">,</span> PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStandardItem<span class="token punctuation">(</span>other<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtGui<span class="token punctuation">.</span>QStandardItem<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStandardItem<span class="token punctuation">(</span>rows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> columns<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QStandardItem<span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="标准数据模型qstandarditemmodel的常用方法" tabindex="-1"><a class="header-anchor" href="#标准数据模型qstandarditemmodel的常用方法" aria-hidden="true">#</a> 标准数据模型QStandardItemModel的常用方法</h5><p>标准数据模型QStandardItemModel的常用方法如表所示,主要方法介绍如下标</p><ul><li>准数据模型最高层的列数和行数用setColumnCount(columns:int)和setRowCount(row;int)方法设置; <ul><li>用columnCount(parent;QModelIndex)方法和rowCount(parent:QModelIndex)方法可获得某层的列数和行数。</li></ul></li><li>用appendColumn(Sequence[QStandardItem])方法可以添加列; <ul><li>用appendRow(Sequence[QStandardItem])方法或appendRow(QStandardItem)方法可添加行</li><li>用insertColumn(Sequence[QStandardItem])方法和insertRow(Sequence[QStandardItem])方法插人列行;</li><li>用takeColumn(column:int)方法和 takeRow(row:int)方法移除列和行。</li></ul></li><li>用setItem(row;int,column;int,item;QStandardItem)方法或 setItem(row; int,item:QStandardItem)方法可以在数据模型中设置数据项, <ul><li>用item(row:int,column:int=0)方法可以获取数据项,</li><li>用takeltem(row:int,column:int=0)方法可移除数据项,</li><li>用clear()方法可清除所有的数据项。</li></ul></li><li>用setData(QModelIndex,Any,role =Qt EditRole)方法和setItemData(QModelIndex,Dict[int,Any])方法可以设置数据项的角色数据, <ul><li>用clearItemData(QModelIndex)方法可以清除数据项上的角色数据。</li></ul></li><li>获得数据项的索引 <ul><li>index(row:int,column:int,parent: QModelIndex)</li><li>indexFromItem(QStandardItem)</li><li>sibling(row:int,column:int,idx:QModelIndex)</li></ul></li><li>标准数据模型有行表头和列表头 <ul><li>用setHorizontalHeaderItem(column:int,item:QStandardItem)方法和 setVerticalHeaderItem(row;int,item: QStandardItem)方法设置水平表头和竖直表头的数据项;</li><li>用takeHorizontalHeaderItem(column;int)方法和takeVerticalHeaderItem(row;int)方法移除表头的数据项,并返回被移除的表头数据项。</li></ul></li></ul><table><thead><tr><th>QStandardItemModel的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>removeRows(row:int,count:int, parent: QModelIndex)</td><td>bool</td><td>移除多行</td></tr><tr><td>setltem(row: int, column: int, item: QStandardItem)</td><td>None</td><td>根据行和列设置项</td></tr><tr><td>setltem(row: int, item: QStandardItem)</td><td>None</td><td>根据行设置数据项</td></tr><tr><td>item(row: int,column: int=0)</td><td>QStandardItem</td><td>根据行和列获取项</td></tr><tr><td>takeltem(row: int,column: int=0)</td><td>QStandardItem</td><td>移除数据项</td></tr><tr><td>setData(QModelIndex,Any,role = Qt.EditRole)</td><td>bool</td><td>设置角色值</td></tr><tr><td>data(QModellndex, role=Qt.DisplayRole)</td><td>Any</td><td>获取角色值</td></tr><tr><td>setItemData(QModelIndex,Dict[int,Any])</td><td>bool</td><td>用字典设置项的值</td></tr><tr><td>itemData(QModelIndex)</td><td>Dict[int,Any]</td><td>获取多个项的值</td></tr><tr><td>setHeaderData(int, Qt.Orientation, Any, role= Qt.EditRole)</td><td>bool</td><td>设置表头值</td></tr><tr><td>headerData(int, Qt.Orientation, role=Qt.DisplayRole)</td><td>Any</td><td>获取表头的值</td></tr><tr><td>setHorizontalHeaderltem(column: int, QStandardItem)</td><td>None</td><td>设置水平表头的项</td></tr><tr><td>setHorizontalHeaderLabels(labels: Sequence[str])</td><td>None</td><td>设置水平表头的文本内容</td></tr><tr><td>horizontalHeaderItem(column:int)</td><td>QStandardItem</td><td>获取水平表头的项</td></tr><tr><td>setVerticalHeaderItem(row: int, item: QStandardItem)</td><td>None</td><td>设置竖直表头的项</td></tr><tr><td>setVerticalHeaderLabels(labels: Sequence[str])</td><td>None</td><td>设置竖直表头的文本内容</td></tr><tr><td>verticalHeaderItem(row: int)</td><td>QStandardItem</td><td>获取竖直表头的项</td></tr><tr><td>takeHorizontalHeaderItem(coloumn:int)</td><td>QStandardItem</td><td>移除水平表头的项</td></tr><tr><td>takeVerticalHeaderItem(row:int)</td><td>QStandardItem</td><td>移除竖直表头的项</td></tr><tr><td>index(row: int, column: int, parent: QModelIndex)</td><td>QModelIndex</td><td>根据行列获取数据项索引</td></tr><tr><td>indexFromItem(QStandardItem)</td><td>QModelIndex</td><td>根据项获取索引</td></tr><tr><td>sibling(row: int, column: int, idx: QModelIndex)</td><td>QModelIndex</td><td>获取同级别的索引</td></tr><tr><td>invisibleRootItem()</td><td>QStandardItem</td><td>获取根目录的项</td></tr><tr><td>clear()</td><td>None</td><td>清除所有的数据项</td></tr><tr><td>clearItemData(index: QModelIndex)</td><td>bool</td><td>清除项中的数据</td></tr><tr><td>findItems(str,Qt.MatchFlag,column=0)</td><td>List[QStandardItem]</td><td>获取满足匹配条件的数据项列表</td></tr><tr><td>flags(QModelIndex)</td><td>Qt.ItemFlags</td><td>获取数据项的标识</td></tr><tr><td>hasChildren(parent:QModelIndex)</td><td>bool</td><td>获取是否有子项</td></tr><tr><td>itemFromIndex(QModelIndex)</td><td>QStandardItem</td><td>根据索引获取项</td></tr><tr><td>parent(child: QModelIndex)</td><td>QModelIndex</td><td>获取父项的索引</td></tr><tr><td>setSortRole(role:int)</td><td>None</td><td>设置排序角色</td></tr><tr><td>sortRole()</td><td>int</td><td>获取排序角色</td></tr><tr><td>sort(column:int,order=Qt.AscendingOrder)</td><td>None</td><td>根据角色值排序</td></tr></tbody></table><h5 id="数据项qstandarditem的常用方法" tabindex="-1"><a class="header-anchor" href="#数据项qstandarditem的常用方法" aria-hidden="true">#</a> 数据项QStandardItem的常用方法</h5><p>数据项QStandardItem的常用方法如表所示,主要方法介绍如下</p><ul><li>数据项可以设置文本、字体、图标、前景色、背景色勾选状态和提示信息等。 <ul><li>用setText(str)方法设置数据项显示的文本;</li><li>用setIcon(QIcon)方法设置图标;</li><li>用setFont(QFont)方法设置数据项的字体;</li><li>用setForeground(QColor)方法设置前景色;</li><li>用setCheckable(bool)方法设置是否可以勾选,</li><li>用setCheckState(Qt.CheckState)方法设置勾选状态</li></ul></li><li>数据项下面可以有多行多列子数据项 <ul><li>行和列可以在创建数据项时用构造函数设置,</li><li>也可用setRowCount(int)方法和 setColumnCount(int)方法设置;</li><li>用rowCount()方法和columnCount()方法获取行和列的数量。</li></ul></li><li>可用多种方法添加插入和移除子数据项的行和列, <ul><li>用setChild(row:int,column;int,QStandardItem)方法和setChild(row:intQStandardItem)方法设置子数据项;</li><li>用row()和column()方法获取数据项所在的行和列;</li><li>用child(row:int,column;int=0)方法获取子数据项;</li><li>用hasChildren()方法获取是否有子数据项;</li><li>用takeChild(row:int;column:int-0)方法移除子数据项,并返回被移除的子数据项。</li></ul></li></ul><table><thead><tr><th>QStandardltem的方法及参数类型</th><th>返回值的类型</th><th>说 明</th></tr></thead><tbody><tr><td>index()</td><td>QModelIndex</td><td>获取数据项的索引</td></tr><tr><td>setColumnCount(int)</td><td>None</td><td>设置列数</td></tr><tr><td>columnCount()</td><td>Int</td><td>获取列数</td></tr><tr><td>setRowCount(int)</td><td>None</td><td>设置行数</td></tr><tr><td>rowCount()</td><td>int</td><td>获取行数</td></tr><tr><td>setChild(row: int.column:int, QStandardltem)</td><td>None</td><td>根据行和列设置子数据项</td></tr><tr><td>setChild(row:int,QStandardItem)</td><td>None</td><td>根据行设置子数据项</td></tr><tr><td>hasChildren()</td><td>bool</td><td>获取是否有子数据项</td></tr><tr><td>child(row: int,column: int=0)</td><td>QStandardItem</td><td>根据行和列获取子数据项</td></tr><tr><td>takeChild(row: int,column:int=0)</td><td>QStandardltem</td><td>移除并返回子数据项</td></tr><tr><td>row()、column()</td><td>int</td><td>获取数据项所在的行和列</td></tr><tr><td>appendColumn(Sequence[QStandardItern.])</td><td>None</td><td>添加列</td></tr><tr><td>appendRow(Sequence[QStandardItem])</td><td>None</td><td>添加行</td></tr><tr><td>appendRow(QStandardItem)</td><td>None</td><td>添加行</td></tr><tr><td>appendRows(Sequence[QStandardItem])</td><td>None</td><td>添加多行</td></tr><tr><td>insertColumn(column:int,Sequence[QStandardItem])</td><td>None</td><td>插人列</td></tr><tr><td>insertColumns(column: int,count:int)</td><td>None</td><td>插人多列</td></tr><tr><td>insertRow(row: int,Sequence[QStandardItem])</td><td>None</td><td>插人行</td></tr><tr><td>insertRow(row:int,QStandardItem)</td><td>None</td><td>插人行</td></tr><tr><td>insertRows(row:int,count:int)</td><td>None</td><td>插人多行</td></tr><tr><td>insertRows(row:int,Sequence[QStandardItem])</td><td>None</td><td>插人多行</td></tr><tr><td>removeColumn(column:int)</td><td>None</td><td>移除列</td></tr><tr><td>removeColumns(column: int, count: int)</td><td>None</td><td>移除多列</td></tr><tr><td>removeRow(row:int)</td><td>None</td><td>移除行</td></tr><tr><td>removeRows(row:int,count:int)</td><td>None-</td><td>移除多行</td></tr><tr><td>takeColumn(column:int)</td><td>List[QStandardItem]</td><td>移除列,并返回被移除的数据项列表</td></tr><tr><td>takeRow(row:int)</td><td>List[QStandardItem]</td><td>移除行,并返回被移除的数据项列表</td></tr><tr><td>model()</td><td>QStandardItemModel</td><td>获取数据模型</td></tr><tr><td>parent()</td><td>QStandardItem</td><td>获取父数据项</td></tr><tr><td>setAutoTristate(bool)</td><td>None</td><td>设置自动有第3种状态</td></tr><tr><td>isAutoTristate()</td><td>bool</td><td>获取自动有第3种状态</td></tr><tr><td>setTristate(bool)</td><td>None</td><td>设置是否有弟3种状态</td></tr><tr><td>setForeground(brush: Union[QBrush, Qt.BrushStyle, Qt.GlobalColor, QColor,QGradient,QImage,QPixmap])</td><td>None</td><td>设置前景色</td></tr><tr><td>foreground()</td><td>QBrush</td><td>.获取前景画刷</td></tr><tr><td>setBackground(brush: Union[QBrush, Qt.BrushStyle, Qt.GlobalColor, QColor:QGradient,QImage,QPixmap])</td><td>None</td><td>设置背景色</td></tr><tr><td>background()</td><td>QBrush</td><td>获取背景画刷</td></tr><tr><td>setCheckable(bool)</td><td>None</td><td>设置是否可以勾选</td></tr><tr><td>setCheckState(Qt.CheckState)</td><td>None</td><td>设置勾选状态</td></tr><tr><td>checkState()</td><td>Qt.CheckState</td><td>获取勾选状态</td></tr><tr><td>isCheckable()</td><td>bool</td><td>获取是否可以勾选</td></tr><tr><td>setData(value: Any,role: int=257)</td><td>None</td><td>设置数据</td></tr><tr><td>data(role:int=257)</td><td>Any</td><td>获取数据</td></tr><tr><td>clearData()</td><td>None</td><td>清空数据</td></tr><tr><td>setDragEnabled(bool)</td><td>None</td><td>设置是否可以拖拽</td></tr><tr><td>isDragEnabled()</td><td>bool</td><td>获取是否可以拖拽</td></tr><tr><td>setDropEnabled(bool)</td><td>None</td><td>设置是否可以拖放</td></tr><tr><td>isDropEnabled()</td><td>bool</td><td>获取是否可以拖放</td></tr><tr><td>setEditable(bool)</td><td>None</td><td>设置是否可以编辑</td></tr><tr><td>setEnabled(bool)</td><td>None</td><td>设置是否激活</td></tr><tr><td>setFlags(Qt.ItemFlag)</td><td>None</td><td>设置标识</td></tr><tr><td>isEditable()</td><td>bool</td><td>获取是否可编辑</td></tr><tr><td>isEnabled()</td><td>bool</td><td>获取是否激活</td></tr><tr><td>isSelectable()</td><td>bool</td><td>获取是否可选择</td></tr><tr><td>isUserTristate()</td><td>bool</td><td>获取是否有用户第3状态</td></tr><tr><td>setFont(QFont)</td><td>None</td><td>设置字体</td></tr><tr><td>setIcon(QIcon)</td><td>None</td><td>设置图标</td></tr><tr><td>setSelectable(bool)</td><td>None</td><td>设置选中状态</td></tr><tr><td>setStatusTip(str)</td><td>None</td><td>设置状态信息</td></tr><tr><td>setText(str)</td><td>None</td><td>设置文本</td></tr><tr><td>text()</td><td>str</td><td>欢取文本</td></tr><tr><td>setTextAlignment(Qt.Alignment)</td><td>None</td><td>设置文本对齐方式</td></tr><tr><td>setToolTip(str)</td><td>None</td><td>设置提示信息</td></tr><tr><td>setWhatsThis(str)</td><td>None</td><td>设置按Shilt+F1键的提示信息</td></tr><tr><td>write(QDataStream)</td><td>None</td><td>把项写人到数据流中</td></tr><tr><td>read(QDataStream)</td><td>None</td><td>从数据流中读取项</td></tr><tr><td>sortChildren(column:int,order = Qt.AscendingOrder)</td><td>None</td><td>对列进行排序</td></tr></tbody></table><h4 id="表格视图控件qtableview" tabindex="-1"><a class="header-anchor" href="#表格视图控件qtableview" aria-hidden="true">#</a> 表格视图控件QTableView</h4><p>表格视图控件QTableView 可以用多行多列的单元格来显示标准数据模型,也可显示其他类型的数据模型</p><p>用QTableView创建表格视图控件的方法如下所示,其中parent是继承自QWidget的窗口或容器控件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QTableView

QTableView<span class="token punctuation">(</span>parent<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="表格视图控件qtableview的常用方法" tabindex="-1"><a class="header-anchor" href="#表格视图控件qtableview的常用方法" aria-hidden="true">#</a> 表格视图控件QTableView的常用方法</h5><p>表格视图控件QTableView 以二维表格的形式显示数据模型中的数据,其常用方法如表所示,主要方法介绍如下。</p><ul><li>用setModel(QAbstractItemModel)方法设置表格视图控件的数据模型</li><li>用setRootIndex(QModelIndex)方法设置根目录(不可见)的数据索引,</li><li>用setSelectionModel(QItemSelectionModel)方法设置选择模型</li><li>用setColumnWidth(int, int)方法和 setRowHeight(int, int)方法设置列的宽度和行的高度, <ul><li>用columnWidth(int)方法和 rowHeight(int)方法获取列的宽度和行的高度。</li></ul></li><li>表格视图控件有坐标系 <ul><li>用columnAt(x;int)方法获取坐标位置处的列号</li><li>用rowAt(y:int)方法获取y坐标位置处的行号,</li><li>用columnViewportPasition(column;int)方法获取指定列的x坐标值,</li><li>用rowViewportPosition(row;int)方法获取指定行的坐标值。</li></ul></li><li>行和列可以根据内容调整高度和宽度 <ul><li>用resizeColumnToContents(column; int)方法和resizeColumnsToContents()方法自动调整列的宽度,</li><li>用resizeRowToContents(row:int)方法和 resizeRowsToContents()方法自动调整行的高度。</li></ul></li><li>在表格的左上角有个按钮,单击该按钮可以选中所有数据, <ul><li>用setCornerButtonEnabled(bool)方法设置是否激活该按钮。</li><li>用setShowGrid(bool)方法设置是否显示表格线条,</li></ul></li><li>用setGridStyle(Qt.PenStyle)方法可以设置表格线条的样式,其中参数 Qt PenStyle 可取: <ul><li>Qt.NoPen(没有表格线条)</li><li>Qt.SolidLine,</li><li>Qt.DashLine、</li><li>Qt.DotLine,</li><li>Qt.DashDotLine,</li><li>Qt.DashDotDotLine</li><li>Qt.CustomDashLine(用setDashPattern()方法自定义)</li></ul></li></ul><table><thead><tr><th>QTableView的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>setModel(QAbstractItemModel)</td><td>None</td><td>设置关联的数据模型</td></tr><tr><td>setRootIndex(QModelIndex)</td><td>None</td><td>设置根目录的数据索引</td></tr><tr><td>setSelectionModel(QItemSelectionModel)</td><td>None</td><td>设置选择模型</td></tr><tr><td>selectionModel()</td><td>QItemSelectionModel</td><td>获取选择模型</td></tr><tr><td>setSelection(rect:QRect,command: QItemSelectionModel.SelectionFlags)</td><td>None</td><td>选择指定范围内的数据项</td></tr><tr><td>columnAt(x:int)</td><td>int</td><td>获取×坐标位置处的列号</td></tr><tr><td>rowAt(y: int)</td><td>int</td><td>获取y坐标位置处的行号</td></tr><tr><td>columnViewportPosition(column:int)</td><td>int</td><td>获取指定列的×坐标值</td></tr><tr><td>rowViewportPosition(row:int)</td><td>int</td><td>获取指定行的y坐标值</td></tr><tr><td>indexAt(QPoint)</td><td>QModelIndex</td><td>获取指定位置的数据索引</td></tr><tr><td>selectedIndexes()</td><td>List[int]</td><td>获取选中的项的索引列表</td></tr><tr><td>resizeColumnToContents(column:int)</td><td>None</td><td>自动调整指定列的宽度</td></tr><tr><td>resizeColumnsToContents()</td><td>None</td><td>根据内容自动调整列的宽度</td></tr><tr><td>resizeRowToContents(row:int)</td><td>None</td><td>自动调整指定行的高度</td></tr><tr><td>resizeRowsToContents()</td><td>None</td><td>根据内容自动调整行的高度</td></tr><tr><td>scrollTo(QModelIndex)</td><td>None</td><td>滚动表格使指定内容可见</td></tr><tr><td>selectColumn(column:int)</td><td>None</td><td>选择列</td></tr><tr><td>selectRow(row:int)</td><td>None</td><td>选择行</td></tr><tr><td>setColumnHidden(column:int,bool)</td><td>None</td><td>设置是否隐藏列</td></tr><tr><td>hideColumn(column:int)</td><td>None</td><td>隐藏列</td></tr><tr><td>setRowHidden(row:int,bool)</td><td>None</td><td>设置是否隐藏行</td></tr><tr><td>hideRow(row:int)</td><td>None</td><td>隐藏行</td></tr><tr><td>showColumn(column:int)</td><td>None</td><td>显示列</td></tr><tr><td>showRow(row:int)</td><td>None</td><td>显示行</td></tr><tr><td>isColumnHidden(column:int)</td><td>bool</td><td>获取指定的列是否隐藏</td></tr><tr><td>isRowHidden(row:int)</td><td>bool</td><td>获取指定的行是否隐藏</td></tr><tr><td>islndexHidden(QModelIndex)</td><td>bool</td><td>获取索引对应的单元格是否隐藏</td></tr><tr><td>setShowGrid(bool)</td><td>None</td><td>设置是否显示表格线条</td></tr><tr><td>showGrid()</td><td>bo01</td><td>获取表格线条是否已显示</td></tr><tr><td>setGridStyle(Qt.PenStyle)</td><td>None</td><td>设置表格线的样式</td></tr><tr><td>setColumnWidth(column:int,width:int)</td><td>None</td><td>设置列的宽度</td></tr><tr><td>columnWidth(column:int)</td><td>int</td><td>获取列的宽度</td></tr><tr><td>setRowHeight(row: int,height: int)</td><td>None</td><td>设置行的高度</td></tr><tr><td>rowHeight(row:int)</td><td>int</td><td>获取行的高度</td></tr><tr><td>setCornerButtonEnabled(bool)</td><td>None</td><td>设置是否激活右下角按钮</td></tr><tr><td>isCornerButtonEnabled()</td><td>bool</td><td>获取右下角按钮是否激活</td></tr><tr><td>setVerticalHeader(QHeaderView)</td><td>None</td><td>设置竖直表头</td></tr><tr><td>verticalHeader()</td><td>QHeaderView</td><td>获取竖直表头</td></tr><tr><td>setHorizontalHeader(QHeaderView)</td><td>None</td><td>设置水平表头</td></tr><tr><td>horizontalHeader()</td><td>QHeaderView</td><td>获取水平表头</td></tr><tr><td>setSpan(row:int,column: int, rowSpan: intcolumnSpan:int)</td><td>None</td><td>设置单元格的行跨度和列跨度</td></tr><tr><td>columnSpan(row:int,column:int)</td><td>int</td><td>获取单元格的列跨度</td></tr><tr><td>rowSpan(row:int,column:int)</td><td>int</td><td>获取单元格的行跨度</td></tr><tr><td>clearSpans()</td><td>None</td><td>清除跨度</td></tr><tr><td>setWordWrap(bool)</td><td>None</td><td>设置字可以写到多行上</td></tr><tr><td>setSortingEnabled(bool)</td><td>None</td><td>设置是否可以排序</td></tr><tr><td>isSortingEnabled()</td><td>bool</td><td>获取是否可以排序</td></tr><tr><td>sortByColumn(int,Qt.SortOrder)</td><td>None</td><td>按列进行排序</td></tr><tr><td>scrollContentsBy(dx: int,dy:int)</td><td>None</td><td>把表格移动指定的距离</td></tr><tr><td>scrollTo(index: QModelIndex,hint = QAbstractItemView.EnsureVisible)</td><td>None</td><td>使指定的项可见</td></tr><tr><td>setAlternatingRowColors(enable: bool)</td><td>None</td><td>设置行的颜色交替变化</td></tr></tbody></table><h5 id="表格视图控件qtableview的信号" tabindex="-1"><a class="header-anchor" href="#表格视图控件qtableview的信号" aria-hidden="true">#</a> 表格视图控件QTableView的信号</h5><p>表格视图控件QTableView的信号如表所示</p><table><thead><tr><th>QTableView的信号及参数类型</th><th>说 明</th></tr></thead><tbody><tr><td>activated(QModelIndex)</td><td>数据项活跃时发送信号</td></tr><tr><td>clicked(QModelIndex)</td><td>单击数据项时发送信号</td></tr><tr><td>doubleCIicked(QModelIndex)</td><td>双击数据项时发送信号</td></tr><tr><td>entered(QModelIndex)</td><td>光标进入数据项时发送信号</td></tr><tr><td>iconSizeChanged(QSize)</td><td>图标尺寸发生变化时发送信号</td></tr><tr><td>pressed(QModelIndex)</td><td>按下鼠标按时发送信号</td></tr><tr><td>viewportEntered()</td><td>光标进入视图控件时发送信号</td></tr></tbody></table><h3 id="选择模型和代理控件" tabindex="-1"><a class="header-anchor" href="#选择模型和代理控件" aria-hidden="true">#</a> 选择模型和代理控件</h3><h4 id="选择模型-qltemselectionmode" tabindex="-1"><a class="header-anchor" href="#选择模型-qltemselectionmode" aria-hidden="true">#</a> 选择模型 QltemSelectionMode</h4><p>在列表、树和表格视图中,如要对数据项进行操作,需要先选中数据项,被选中的数据项高亮或反色显示。</p><p>在 PySide6 中被选中的数据项记录在选择模型 QItemSelectionModel中,如果多个视图控件同时关联到一个数据模型,选择模型可以记录多个视图控件中被选中的数据项,形成数据选择集 QItemSelection。视图控件有自已默认的选择模型,般可以满足用户的需要;另外可以单独创建新的选择模型,以实现特殊目的。</p><p>视图控件都有 setSelectionModel(QItemSelectionModel)方法和 selectionModel()方法,用于设置视图控件的选择模型和获取选择模型。</p><p>用selectionModel()方法获取某一个视图控件的选择模型后,可以使用setSelectionModel()方法提供给其他视图共享选择模型因此一般没有必要新建选择模型</p><p>用QItemSelectionModel 创建选择模型的方法如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QItemSelectionModel

QItemSelectionModel<span class="token punctuation">(</span>model<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QAbstractItemModel<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QObject<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
QItemSelectionModel<span class="token punctuation">(</span>model<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>PySide6<span class="token punctuation">.</span>QtCore<span class="token punctuation">.</span>QAbstractItemModel<span class="token punctuation">,</span> NoneType<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="选择模型-qitemselectionmodel-的常用方法" tabindex="-1"><a class="header-anchor" href="#选择模型-qitemselectionmodel-的常用方法" aria-hidden="true">#</a> 选择模型 QItemSelectionModel 的常用方法</h5><ul><li><p>用selection()方法可以获取项的选择集 QItemSelection;</p></li><li><p>用select(index; QModelIndex,command:QItemSelectionModel,SelectionFlags)方法可以往选择集中添加内容,或从选择集中移除选择,其中command是QItemSelectionModel,SelectionFlags 的枚举值,可取的值如表示。</p><table><thead><tr><th>QItemSelectionModel.SelectionFlags 的取值</th><th>说明</th></tr></thead><tbody><tr><td>QItemSelectionModel, NoUpdate</td><td>选择集没有变化</td></tr><tr><td>QItemSelectionModel.Clear</td><td>清空选择集</td></tr><tr><td>QItemSelectionModel, Select</td><td>选择所有指定的项</td></tr><tr><td>QItemSelectionModel.Deselect</td><td>取消选择所有指定的项</td></tr><tr><td>QItemSelectionModel.Toggle</td><td>根据项的状态选择或不选择</td></tr><tr><td>QItemSelectionModel.Current</td><td>更新当前的选择</td></tr><tr><td>QItemSelectionModel.Rows</td><td>选择整行</td></tr><tr><td>QItemSelectionModel.Columns</td><td>选择整列</td></tr><tr><td>QItemSelectionModel.SelectCurrent</td><td>Select | Current</td></tr><tr><td>QItemSelectionModel.ToggleCurrent</td><td>Toggle | Current</td></tr><tr><td>QItemSelectionModel.ClearAndSelect</td><td>Clear | Select</td></tr></tbody></table></li></ul><table><thead><tr><th>QtemSelectionModel的方法及参数类型</th><th>返回值的类型</th><th>说明</th></tr></thead><tbody><tr><td>[slot]clear()</td><td>None</td><td>清空选择模型并发送selectionChanged() 和currentChanged()信号</td></tr><tr><td>[slot]reset()</td><td>None</td><td>清空选择模型,不发送信号</td></tr><tr><td>[slot]clearCurrentIndex()</td><td>None</td><td>清空当前的数据索引模型并发送 currentChanged()信号</td></tr><tr><td>[slot]clearSelection()</td><td>None</td><td>清空选择模型并发送 selectionChanged() 信号</td></tr><tr><td>[slot]setCurrentIndex(index: QModelIndex,command: QItemSelectionModel.SelectionFlags)</td><td>None</td><td>设置当前的项,并发送currentChanged() 信号</td></tr><tr><td>[slot]select(index: QModelIndex, command: QItemSelectionModel, SelectionFlags)</td><td>None</td><td>选择项,并发送selectionChanged()信号</td></tr><tr><td>[slot]select(selection:QItemSelection, command:QItemSelectionModel.SelectionFlags)</td><td>None</td><td>选择项,并发送selectionChanged()信号</td></tr><tr><td>rowIntersectsSelection(row: int,parent: QModelIndex)</td><td>bool</td><td>如果选择的数据项与parent的子数据项的 指定行有交集,则返回True</td></tr><tr><td>columnIntersectsSelection(column:int, parent:QModelIndex)</td><td>bool</td><td>如果选择的数据项与parent的子数据项的 指定列有交集,则返回True</td></tr><tr><td>currentIndex()</td><td>QModelIndex</td><td>获取当前数据项的索引</td></tr><tr><td>hasSelection()</td><td>b001</td><td>获取是否有选择项</td></tr><tr><td>isColumnSelected(column: int,parent: QModelIndex)</td><td>bool</td><td>获取parent下的某列是否全部选中</td></tr><tr><td>isRowSelected(row:int,parent: QModelIndex)</td><td>bool</td><td>获取parent下的某行是否全部选中</td></tr><tr><td>isSelected(index:QModelIndex)</td><td>bool</td><td>获取某数据项是否选中</td></tr><tr><td>selectedRows(column:int=0)</td><td>ListCint]</td><td>获取某行中被选中的数据项的索引列表</td></tr><tr><td>selectedColumns(row:int=0)</td><td>ListCint]</td><td>获取某列中被选中的数据项的索引列表</td></tr><tr><td>selectedIndexes()</td><td>ListCint]</td><td>获取被选中的数据项的索引列表</td></tr><tr><td>selection()</td><td>QItemSelection</td><td>获取项的选择集</td></tr><tr><td>setModel(QAbstractItemModel)</td><td>None</td><td>设置数据模型</td></tr></tbody></table><h5 id="选择模型qitemselectionmodel-的信号" tabindex="-1"><a class="header-anchor" href="#选择模型qitemselectionmodel-的信号" aria-hidden="true">#</a> 选择模型QItemSelectionModel 的信号</h5><p>选择模型QItemSelectionModel的信号如表所示</p><table><thead><tr><th>QItemSelectionModel的信号及参数类型</th><th>说明</th></tr></thead><tbody><tr><td>curentChanged(current: QModelIndex, previous: QModellndex)</td><td>当前数据项发生改变时发送信号</td></tr><tr><td>currentColumnChanged(current: QModelIndex, previous: QModelIndex)</td><td>当前数据项的列改变时发送信号</td></tr><tr><td>currentRowChanged(current:QModelIndex, previous:QModelIndex)</td><td>当前数据项的行改变时发送信号</td></tr><tr><td>modelChanged(QAbstractItemModel)</td><td>数据模型发生改变时发送信号</td></tr><tr><td>selectionChanged(selected: QItemSelection, deselected: QItemSelection)</td><td>选择区域发生改变时发送信号</td></tr></tbody></table><h5 id="选择集qitemselection" tabindex="-1"><a class="header-anchor" href="#选择集qitemselection" aria-hidden="true">#</a> 选择集QItemSelection</h5><p>选择集QItemSelection是指数据模型中已经被选中的项的集合其方法如表所示。</p><table><thead><tr><th>QItemSelection的方法及参数类型</th><th>返回值的类型</th><th>说月 明</th></tr></thead><tbody><tr><td>select(topLeft: QModelIndex, bottomRight: QModelIndex)</td><td>None</td><td>添加从左上角到右下角位置处的 所有项</td></tr><tr><td>merge(other: QItemSelection, command: QItemSelectionModel.SelectionFlags)</td><td>None</td><td>与其他选择集合并</td></tr><tr><td>indexes()</td><td>List[QModelIndexJ</td><td>获取选择集中的数据索引列表</td></tr><tr><td>contains(index:QModelIndex)</td><td>bool</td><td>获取指定的项是否在选择集中</td></tr><tr><td>clear()</td><td>None</td><td>清空选择集</td></tr><tr><td>count()</td><td>int</td><td>获取选择集中元素的个数</td></tr></tbody></table><h4 id="代理控件qstyledltemdelegate" tabindex="-1"><a class="header-anchor" href="#代理控件qstyledltemdelegate" aria-hidden="true">#</a> 代理控件QStyledltemDelegate</h4><p>在视图控件中双击某个数据项,可以修改数据项当前显示的值,即可以输入新的值。</p><ul><li>输人新值时,并不是直接在视图控件上输入(视图控件只具有显示数据的功能),而是在视图控件的单元格位置出现一个新的可以输入数据的控件,</li><li>例如 QLieEdit。QLineEdit 读取数据项的值作为初始值,供用户修改,修改完成后通过数据项的索引把数据保存到数据模型中,并通知视图控件显示新的数据,像这种为视图控件提供编辑功能的控件称为代理控件或委托控件。</li></ul><p>系统为每种数据类型定义了默认的代理控件,用户也可以自定义代理控件。</p><ul><li><p>例如某个数据项存储性别值该数据项只有&quot;男&quot;和&quot;女&quot;两个选择可以用QComboBox作为代理控件双击该数据项,弹出QComboBox 控件,从QComboBox 的列表中选择&quot;男&quot;或&quot;女&quot;;</p></li><li><p>再如对于存储成绩的数据项,用QDoubleSpinBox作为代理控件,设置其可以输人1位小数定义代理控件需要用QStyledItemDelegate类或 QItemDelegate类创建子类,这两个类都继承自QAbstractItemDelegate类。</p></li><li><p>这两个类的主要区别是前者可以使用当前的样式表来设置代理控件的样式因此建议使用前者来定义代理控件。</p></li><li><p>在QStyledItemDelegate或QItemDelegate 的子类中定义代理控件的类型位置,以及如何读取和返回数据。</p></li><li><p>视图控件都有从 QAbstractItemView 继承而来的:</p><ul><li>setItemDelegate(delegate: QAbstractltemDelegate)方法为所有的数据项设置代理控件</li><li>setItemDelegateForColumn(column; int,delegate: QAbstractItemDelegate) 方法为列数据项设置代理控件</li><li>setItemDelegateForRow(row;int,delegate:QAbstractItemDelegate)方法为行数据项设置代理控件</li></ul></li><li><p>创建代理控件可以用项编辑器工厂QItemEditorFactory定义默认的代理控件,也可以自定义代理控件的类型本书讲解自定义代理控件。自定义代理控件需要重写 QStyledItemDelegate 类或 QItemDelegate 类的下面4个函数:</p><blockquote><ul><li>createEditor(parent: QWidget, option: QStyleOptionViewItem, index: QModelIndex)-&gt;QWidget函数用于创建代理控件的实例对象并返回该实例对象</li><li>setEditorData(editor:QWidget,index:QModelIndex)-&gt; None 函数,用于读取视图控件的数据项的值到代理控件中。</li><li>setModelData(editor: QWidget, model: QAbstractItemModel, index:QModelIndex)-&gt;None函数,用于将编辑后的代理控件的值返回到数据模型中</li><li>updateEditorGeometry(editor: QWidget, option: QStyleOptionViewItem,index:QModelIndex)-&gt;None 函数,用于设置代理控件显示的位置。</li></ul></blockquote><ul><li>createEditor)函数中的参数 parent 指代理控件所在的窗口,通常取视图控件所在的窗体;</li><li>其他3个函数的editor 指 createEditor()返回的代理控件,用于传递数据;</li><li>QModelIndex是数据项的索引,系统会给实参传递索引;</li><li>QStyleOptionViewItem 传递的一些属性用于确定代理控件的位置和外观,其属性如表所示。其中枚举值QStyleOptionViewltem.Position 可取: <ul><li>QStyleOptionViewItem.Left</li><li>QStyleOptionViewItem.Right</li><li>QStyleOptionViewltem.op</li><li>QStyleOptionViewItem.Bottom;</li></ul></li><li>枚举值 QStyleOptionViewItem.ViewItemFeatures 可取: <ul><li>QStyleOptionViewltem None</li><li>QStyleOptionViewItem.WrapText</li><li>QStyleOptionViewltem.Alternate</li><li>QStyleOptionViewItem.HasCheckIndicator</li><li>OStyleOptionViewltem.HasDisplay</li><li>QStyleOptionViewItem.HasDecoration;</li></ul></li><li>枚举值 QStyleOptionViewItem.ViewItemPosition 可取: <ul><li>QStyleOptionViewItem.Beginning</li><li>QStyleOptionViewItem.Middle</li><li>QStyleOptionViewItem.End</li><li>QStyleOptionViewItem.OnlyOne(行中只有一个项.两端对齐)。</li></ul></li></ul></li></ul><table><thead><tr><th>QStyleOptionViewltem的属性</th><th>属性值的类型</th><th>说明</th></tr></thead><tbody><tr><td>backgroundBrush</td><td>QBrush</td><td>项的背景画刷</td></tr><tr><td>checkState</td><td>Qt.CheckState</td><td>项的勾选状态</td></tr><tr><td>decorationAlignment</td><td>Qt.Alignment</td><td>项的图标对齐位置</td></tr><tr><td>decorationPosition</td><td>QStyleOptionViewItem.Position</td><td>项的图标位置</td></tr><tr><td>decorationSize</td><td>QSize</td><td>项的图标尺寸</td></tr><tr><td>displayAlignment</td><td>Qt.Alignment</td><td>项的文字对齐位置</td></tr><tr><td>features</td><td>QStyleOptionViewItem.ViewItemFeatures</td><td>项所具有的特征</td></tr><tr><td>font</td><td>QFont</td><td>项的字体</td></tr><tr><td>icon</td><td>QIcon</td><td>项图标</td></tr><tr><td>index</td><td>QModelIndex</td><td>项的模型索引</td></tr><tr><td>showDecorationSelected</td><td>bool</td><td>项是否显示图标</td></tr><tr><td>text</td><td>QString</td><td>项显示的文本</td></tr><tr><td>textElideMode</td><td>Qt.TextElideMode</td><td>省略号的模式</td></tr><tr><td>viewItemPosition</td><td>QStyleOptionViewltem.ViewItemPosition</td><td>项在行中的位置</td></tr><tr><td>direction</td><td>Qt.LayoutDirection</td><td>布局方向</td></tr><tr><td>palette</td><td>QPalette</td><td>调色板</td></tr><tr><td>Tect</td><td>QRect</td><td>项的矩形区域</td></tr><tr><td>styleObject</td><td>QObject</td><td>项的窗口类型</td></tr><tr><td>version</td><td>int</td><td>版本</td></tr></tbody></table>`,100)]))}const c=n(o,[["render",l],["__file","11基于项和模型的控件2.html.vue"]]);export{c as default};
